[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/js/BOM.js",
    "content": "/**\n * This class defines a BOMEntry object which is used to define one entry in a bill of materials.\n */\nexport class BOMEntry {\n  /**\n   * The constructor returns a new blank BOMEntry object.\n   */\n  constructor() {\n    /**\n     * The name of the item.\n     * @type {string}\n     */\n    this.BOMitemName = \"name\";\n    /**\n     * The number of this item needed.\n     * @type {number}\n     */\n    this.numberNeeded = 1;\n    /**\n     * The cost of one of this item in USD.\n     * @type {number}\n     */\n    this.costUSD = 0.0;\n    /**\n     * A link to where to purchase the item.\n     * @type {string}\n     */\n    this.source = \"www.example.com\";\n\n    /**\n   \n     * This atom's height as drawn on the screen\n     */\n    this.height;\n  }\n}\n\n/**\n * Takes a link and converts it to be an affiliate link if it should be.\n * @param {string} link - The link to check.\n */\nexport const convertLinks = function (link) {\n  if (link.toLowerCase().includes(\"amazon\")) {\n    return \"[Amazon](\" + link + \"?tag=maslowcnc01-20)\";\n  }\n  return link;\n};\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/BOM.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "BOMEntry",
    "memberof": "src/js/BOM.js",
    "static": true,
    "longname": "src/js/BOM.js~BOMEntry",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/BOM.js",
    "importStyle": "{BOMEntry}",
    "description": "This class defines a BOMEntry object which is used to define one entry in a bill of materials.",
    "lineNumber": 4,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/BOM.js~BOMEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/BOM.js~BOMEntry#constructor",
    "access": "public",
    "description": "The constructor returns a new blank BOMEntry object.",
    "lineNumber": 8
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "BOMitemName",
    "memberof": "src/js/BOM.js~BOMEntry",
    "static": false,
    "longname": "src/js/BOM.js~BOMEntry#BOMitemName",
    "access": "public",
    "description": "The name of the item.",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "numberNeeded",
    "memberof": "src/js/BOM.js~BOMEntry",
    "static": false,
    "longname": "src/js/BOM.js~BOMEntry#numberNeeded",
    "access": "public",
    "description": "The number of this item needed.",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "costUSD",
    "memberof": "src/js/BOM.js~BOMEntry",
    "static": false,
    "longname": "src/js/BOM.js~BOMEntry#costUSD",
    "access": "public",
    "description": "The cost of one of this item in USD.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "source",
    "memberof": "src/js/BOM.js~BOMEntry",
    "static": false,
    "longname": "src/js/BOM.js~BOMEntry#source",
    "access": "public",
    "description": "A link to where to purchase the item.",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "convertLinks",
    "memberof": "src/js/BOM.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/BOM.js~convertLinks",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/BOM.js",
    "importStyle": "{convertLinks}",
    "description": "Takes a link and converts it to be an affiliate link if it should be.",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "link",
        "description": "The link to check."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/js/NewMenu.js",
    "content": "import CMenu from \"./circular-menu\";\nimport GlobalVariables from \"./globalvariables.js\";\n\n/**\n * Html element that contains the circular menu\n */\nvar ele = null; //document.querySelector('#circle-menu1')\nvar cmenu;\n\nconst createCMenu = (targetElement, setSearchingGithub) => {\n  ele = targetElement;\n  // /**\n  //      * Runs to create submenus from Global Variables atomCategories. Populates menu objects\n  //      * @param {object} group - Name of the category to find appropriate atoms\n  //      */\n  const makeArray = (group) => {\n    var menuArray = [];\n    for (var key in GlobalVariables.availableTypes) {\n      var instance = GlobalVariables.availableTypes[key];\n      if (instance.atomCategory === group) {\n        var subMenu = new Object();\n        subMenu.title = `${instance.atomType}`;\n        subMenu.icon = `${instance.atomType}`;\n        subMenu.name = instance.atomType;\n\n        subMenu.click = function menuClick(e, title) {\n          if (title.icon === \"GitHubMolecule\") {\n            const containerX = parseInt(cmenu._container.style.left, 10);\n            const containerY = parseInt(cmenu._container.style.top, 10);\n            GlobalVariables.lastClick = [containerX, containerY];\n            setSearchingGithub(true);\n          } else {\n            setSearchingGithub(false);\n            e.target.id = title.name;\n            placeNewNode(e);\n          }\n        };\n\n        menuArray.push(subMenu);\n      }\n    }\n    return menuArray;\n  };\n\n  /**\n   * This creates a new instance of the circular menu.\n   */\n  cmenu = CMenu(ele.current).config({\n    hideAfterClick: true,\n    percent: 0.15,\n    menus: [\n      {\n        title: \"Actions\",\n        icon: \"Actions\",\n        menus: makeArray(\"Actions\"),\n      },\n      {\n        title: \"Inputs\",\n        icon: \"Inputs\",\n        menus: makeArray(\"Inputs\"),\n      },\n      {\n        title: \"Tags\",\n        icon: \"Tags\",\n        menus: makeArray(\"Tags\"),\n      },\n      {\n        title: \"Import/Export\",\n        icon: \"Import-Export\",\n        menus: makeArray(\"ImportExport\"),\n      },\n      {\n        title: \"Shapes\",\n        icon: \"Shapes\",\n        menus: makeArray(\"Shapes\"),\n      },\n      {\n        title: \"Interactions\",\n        icon: \"Interaction\",\n        menus: makeArray(\"Interactions\"),\n      },\n    ],\n  });\n\n  /*Mask the default context menu on the main canvas*/\n  document\n    .getElementById(\"flow-canvas\")\n    .addEventListener(\"contextmenu\", (e) => {\n      e.preventDefault();\n    });\n\n  /*Mask the default context menu on the menu*/\n  ele.current.addEventListener(\"contextmenu\", (e) => {\n    e.preventDefault();\n  });\n\n  // /**\n  //      * Runs when a menu option is clicked to place a new atom from the local atoms list.\n  //      * @param {object} ev - The event triggered by click event on a menu item.\n  //      */\n  function placeNewNode(e) {\n    let clr = e.target.id;\n    const containerX = parseInt(cmenu._container.style.left, 10);\n    const containerY = parseInt(cmenu._container.style.top, 10);\n    GlobalVariables.currentMolecule.placeAtom(\n      {\n        x: GlobalVariables.pixelsToWidth(containerX),\n        y: GlobalVariables.pixelsToHeight(containerY),\n        parent: GlobalVariables.currentMolecule,\n        atomType: clr,\n        uniqueID: GlobalVariables.generateUniqueID(),\n      },\n      true\n    );\n    //Simulate a click on the new atom\n    var clickHandledByAtom = false;\n  }\n};\n\nexport { createCMenu, cmenu };\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/NewMenu.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "ele",
    "memberof": "src/js/NewMenu.js",
    "static": true,
    "longname": "src/js/NewMenu.js~ele",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/NewMenu.js",
    "importStyle": null,
    "description": "Html element that contains the circular menu",
    "lineNumber": 7,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 58,
    "kind": "function",
    "name": "createCMenu",
    "memberof": "src/js/NewMenu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/NewMenu.js~createCMenu",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/NewMenu.js",
    "importStyle": "{createCMenu}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "targetElement",
        "types": [
          "*"
        ]
      },
      {
        "name": "setSearchingGithub",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "src/js/alwaysOneFreeInput.js",
    "content": "//This module is used to create atoms which do not have a set number of inputs, but instead always have one input free.\n\n/**\n * Computes the number of inputs which are curently available on a target atom.\n * @param {object} target - The atom which should have it's number of inputs computed.\n */\nconst howManyInputPortsAvailable = function (target) {\n  var portsAvailable = 0;\n  target.inputs.forEach((io) => {\n    if (io.type == \"input\" && io.connectors.length == 0) {\n      //if this port is available\n      portsAvailable = portsAvailable + 1; //Add one to the count\n    }\n  });\n  return portsAvailable;\n};\n\n/**\n * Deletes one free input from an atom which has more than one free input available.\n * @param {object} target - The atom which should have one input deleted (if there are more than two free).\n */\nconst deleteEmptyPort = function (target) {\n  var i;\n  for (i = 0; i < target.inputs.length - 1; i++) {\n    var io = target.inputs[i];\n    if (io.type == \"input\" && io.connectors.length == 0) {\n      target.removeIO(\"input\", io.name, target);\n      return;\n    }\n  }\n};\n\n/**\n * Finds the highest number input currently used by this atom\n * @param {object} target - The atom which should be inspected for inputs.\n */\nconst findHighestInput = function (target) {\n  var maxInput = 0;\n  target.inputs.forEach((input) => {\n    maxInput = Math.max(maxInput, parseInt(input.name.match(/\\d+$/)[0]));\n  });\n  return maxInput;\n};\n\n/**\n * Adds or deletes inputs from a target atom until there is exactly one input available.\n * @param {object} target - The atom which should have it's number of inputs adjusted.\n */\nexport const addOrDeletePorts = (target) => {\n  //Add or delete ports as needed\n  if (howManyInputPortsAvailable(target) == 0) {\n    //We need to make a new port available\n    findHighestInput(target);\n    target.addIO(\n      \"input\",\n      \"Shape \" + (findHighestInput(target) + 1),\n      target,\n      \"geometry\",\n      \"\",\n      true\n    );\n  }\n  if (howManyInputPortsAvailable(target) >= 2) {\n    //We need to remove the empty port\n    deleteEmptyPort(target);\n  }\n};\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/alwaysOneFreeInput.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "function",
    "name": "howManyInputPortsAvailable",
    "memberof": "src/js/alwaysOneFreeInput.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/alwaysOneFreeInput.js~howManyInputPortsAvailable",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/alwaysOneFreeInput.js",
    "importStyle": null,
    "description": "Computes the number of inputs which are curently available on a target atom.",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The atom which should have it's number of inputs computed."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "deleteEmptyPort",
    "memberof": "src/js/alwaysOneFreeInput.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/alwaysOneFreeInput.js~deleteEmptyPort",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/alwaysOneFreeInput.js",
    "importStyle": null,
    "description": "Deletes one free input from an atom which has more than one free input available.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The atom which should have one input deleted (if there are more than two free)."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "findHighestInput",
    "memberof": "src/js/alwaysOneFreeInput.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/alwaysOneFreeInput.js~findHighestInput",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/alwaysOneFreeInput.js",
    "importStyle": null,
    "description": "Finds the highest number input currently used by this atom",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The atom which should be inspected for inputs."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "addOrDeletePorts",
    "memberof": "src/js/alwaysOneFreeInput.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/alwaysOneFreeInput.js~addOrDeletePorts",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/alwaysOneFreeInput.js",
    "importStyle": "{addOrDeletePorts}",
    "description": "Adds or deletes inputs from a target atom until there is exactly one input available.",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The atom which should have it's number of inputs adjusted."
      }
    ],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "file",
    "name": "src/js/circular-menu/dist/js/circular-menu.js",
    "content": "//circular-menu\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global.CMenu = factory());\n}(this, function () { 'use strict';\n\n    function rotateDeg (i){\n        return this.startDeg + this.rotateUnit * i;\n    }\n\n    function rotateDeg$1 (i){\n        return - (this.rotateDeg(i) + this.unskewDeg);\n    }\n\n    function startDeg(config) {\n        var top = -(config.totalAngle - 180) / 2,\n            positions = {\n                top: top,\n                left: top - 90,\n                right: top + 90,\n                bottom: top + 180\n            };\n\n        return config.start !== undefined ? config.start : positions[config.position];\n    }\n\n    const antialiasing = 3;\n\n    function coverRadius(radius, percent) {\n        var square = radius * radius * 2;\n        return Math.sqrt(square) * percent + antialiasing;\n    }\n\n    function coverSize (coverRadius) {\n        var l = coverRadius * 2;\n        var m = -l / 2;\n\n        l += \"px\";\n        m += \"px\";\n        \n        return {\n            width:  l,\n            height: l,\n            marginLeft: m,\n            marginTop: m\n        };\n    }\n\n    function menuSize (config) {\n        var l = config.diameter;\n        var m = - config.diameter / 2;\n\n        l += \"px\";\n        m += \"px\";\n\n        return {\n            width:  l,\n            height: l,\n            marginLeft: m,\n            marginTop: m\n        };\n    }\n\n    const fixedTop  = 10;\n\n    function clickZoneSize (config) {\n        var l = config.diameter;\n        var m = - config.diameter / 2;\n\n        l += \"px\";\n        m += \"px\";\n\n        return {\n            width:  l,\n            height: l,\n            marginRight: m,\n            marginBottom: m\n        };\n    }\n\n    function listSize (config) {\n        var l = (config.diameter / 2) + 'px';\n\n        return {\n            width:  l,\n            height: l\n        };\n    }\n\n    const middleRatio = 0.41;\n\n    function textTop (clickZoneRadius) {\n        return clickZoneRadius * middleRatio - fixedTop + 'px';\n\n    }\n\n    function Calculation(config) {\n        this._config = config;\n\n        var c = this.config = config,\n            itemsNum = c.menus.length,\n            spaceNumber = c.totalAngle === 360 ? itemsNum : itemsNum - 1;\n\n        this.radius = config.diameter / 2;\n        this.coverRadius = coverRadius(this.radius, config.percent);\n        this.clickZoneRadius = this.radius - this.coverRadius;\n\n\n\n        this.listSize = listSize(config);\n        this.clickZoneSize = clickZoneSize(config);\n        this.menuSize = menuSize(config);\n        this.coverSize = coverSize(this.coverRadius);\n        this.startDeg = startDeg(config);\n        this.centralDeg = (c.totalAngle - (c.spaceDeg * spaceNumber)) / itemsNum;\n        this.rotateUnit = this.centralDeg + c.spaceDeg;\n        this.skewDeg = 90 - this.centralDeg;\n        this.unskewDeg = - (90 - this.centralDeg / 2);\n        this.textTop = textTop(this.clickZoneRadius);\n    }\n\n    Calculation.prototype = {\n        constructor: Calculation,\n        rotateDeg: rotateDeg,\n        horizontalDeg: rotateDeg$1\n    };\n\n    function createLists (parent) {\n        \n        this._config.menus.forEach(function(v, k){\n\n            this._createList(parent, v, k);\n            \n        }, this);\n\n    }\n\n    function defaultView(node) {\n        return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node\n            || (node.document && node) // node is a Window\n            || node.defaultView; // node is a Document\n    }\n\n    function styleRemove(name) {\n        this.style.removeProperty(name);\n    }\n\n    function styleConstant(name, value, priority) {\n        this.style.setProperty(name, value, priority);\n    }\n\n    function styleFunction(name, value, priority) {\n        var v = value.apply(this, arguments);\n        if (v == null) this.style.removeProperty(name);\n        else this.style.setProperty(name, v, priority);\n    }\n\n    function style(ele, name, value, priority) {\n\n        var node;\n        return arguments.length > 1\n            ? ((value == null\n            ? styleRemove : typeof value === \"function\"\n            ? styleFunction\n            : styleConstant).call(ele, name, value, priority == null ? \"\" : priority))\n            : defaultView(node = ele)\n            .getComputedStyle(node, null)\n            .getPropertyValue(name);\n    }\n\n    function createList(parent, data, index){\n\n        var list = document.createElement('li');\n        style(list, 'width', this._calc.listSize.width);\n        style(list, 'height', this._calc.listSize.height);\n        style(list, 'transform', 'rotate('+ this._calc.rotateDeg(index) +'deg) skew('+ this._calc.skewDeg +'deg)');\n\n        parent.appendChild(list);\n\n        this._createAnchor(list, data, index);\n\n    }\n\n    function classArray(string) {\n        return string.trim().split(/^|\\s+/);\n    }\n\n    function classList(node) {\n        return node.classList || new ClassList(node);\n    }\n\n    function ClassList(node) {\n        this._node = node;\n        this._names = classArray(node.getAttribute(\"class\") || \"\");\n    }\n\n    ClassList.prototype = {\n        add: function(name) {\n            var i = this._names.indexOf(name);\n            if (i < 0) {\n                this._names.push(name);\n                this._node.setAttribute(\"class\", this._names.join(\" \"));\n            }\n        },\n        remove: function(name) {\n            var i = this._names.indexOf(name);\n            if (i >= 0) {\n                this._names.splice(i, 1);\n                this._node.setAttribute(\"class\", this._names.join(\" \"));\n            }\n        },\n        contains: function(name) {\n            return this._names.indexOf(name) >= 0;\n        }\n    };\n\n    function classedAdd(node, names) {\n        var list = classList(node), i = -1, n = names.length;\n        while (++i < n) list.add(names[i]);\n    }\n\n    function classedRemove(node, names) {\n        var list = classList(node), i = -1, n = names.length;\n        while (++i < n) list.remove(names[i]);\n    }\n\n    function classedTrue(names) {\n        classedAdd(this, names);\n    }\n\n    function classedFalse(names) {\n        classedRemove(this, names);\n    }\n\n    function classedFunction(names, value) {\n        (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\n    }\n\n    function classed(ele, name, value) {\n        var names = classArray(name + \"\");\n\n        if (arguments.length < 2) {\n            var list = classList(this), i = -1, n = names.length;\n            while (++i < n) if (!list.contains(names[i])) return false;\n            return true;\n        }\n\n        var callee = (typeof value === \"function\"\n            ? classedFunction : value\n            ? classedTrue\n            : classedFalse).call(ele, names, value);\n    }\n\n    var UID = {\n        _current: 0,\n        getNew: function(){\n            this._current++;\n            return this._current;\n        }\n    };\n    function styleSheet (element, prop, value, pseudo) {\n        \n        var _this = element;\n        var _sheetId = \"sheetStyles\";\n        var _head = document.head || document.getElementsByTagName('head')[0];\n        var _sheet = document.getElementById(_sheetId) || document.createElement('style');\n        _sheet.id = _sheetId;\n        var className = \"s-S\" + UID.getNew();\n        \n        _this.className += \" \" + className;\n\n\n\n        _sheet.innerHTML += \" .\" + className + ( pseudo ? (\":\" + pseudo) : \"\" ) + \"{\" + prop + \":\" + value + \"}\";\n        _head.appendChild(_sheet);\n        return this;\n    };\n\n    function on (ele, type, callback, data) {\n        ele.addEventListener(type, function(e){\n            callback.call(this, e, data);\n        });\n    }\n\n    function createMenu(){\n        var p = this._container;\n\n        classed(p, 'circular-menu', true);\n        style(p, 'width', this._calc.menuSize.width);\n        style(p, 'height', this._calc.menuSize.height);\n        style(p, 'margin-top', this._calc.menuSize.marginTop);\n        style(p, 'margin-left', this._calc.menuSize.marginLeft);\n        \n        var self = this;\n        on(p, \"click\", function(e){\n            if(e.toElement === p){\n                self._cMenu.hide();\n            }\n        });\n        setTimeout(function(){\n            style(p, 'display', 'block');\n        },100);\n\n        styleSheet(p, 'width', this._calc.coverSize.width, 'after');\n        styleSheet(p, 'height', this._calc.coverSize.height, 'after');\n        styleSheet(p, 'margin-left', this._calc.coverSize.marginLeft, 'after');\n        styleSheet(p, 'margin-top', this._calc.coverSize.marginTop, 'after');\n        styleSheet(p, 'border', \"3px solid \" + this._config.pageBackground, 'after');\n\n\n        var ul = p.appendChild(document.createElement('ul'));\n        this._createLists(ul);\n    }\n\n    function hasSubMenus(menus) {\n        return menus instanceof Array && menus.length !== 0;\n    }\n    function ifDisabled(disabled){\n        if(disabled instanceof Function)\n            return disabled();\n        else\n            return Boolean(disabled);\n    }\n\n    function setHref(ele, href){\n        if(!href) return;\n\n        if(href instanceof Object){\n            ele.href = href.url;\n            ele.target = href.blank? \"_blank\" : \"\";\n        }else{\n            ele.href = href;\n        }\n    }\n\n\n\n    var delayShow = null;// delayShow reference the last setTimeout triggered by any one of menu item(anchor)\n\n    function createAnchor (parent, data, index) {\n        var self = this;\n\n        var delayHide = null;// delayHide reference the last setTimeout triggered by the menu item itself\n\n        var a = document.createElement('a');\n\n        setHref(a, data.href);\n\n        a.setDisabled = function(){\n            classed(a, 'disabled', ifDisabled(data.disabled));\n        };\n        this._anchors.push(a);\n\n\n        style(a, 'width', this._calc.clickZoneSize.width);\n        style(a, 'height', this._calc.clickZoneSize.height);\n        style(a, 'right', this._calc.clickZoneSize.marginRight);\n        style(a, 'bottom', this._calc.clickZoneSize.marginBottom);\n        style(a, 'transform', 'skew(' + -this._calc.skewDeg + 'deg) rotate(' + this._calc.unskewDeg + 'deg) scale(1)');\n\n        classed(a, 'disabled', ifDisabled(data.disabled));\n\n\n        var percent = this._config.percent * 100 + \"%\";\n        styleSheet(a, 'background', 'radial-gradient(transparent ' + percent + ', ' + this._config.background + ' ' + percent + ')');\n        styleSheet(a, 'background', 'radial-gradient(transparent ' + percent + ', ' + this._config.backgroundHover + ' ' + percent + ')', 'hover');\n\n\n        function clickCallBack(e, data){\n            if (data.click) data.click.call(this, e, data);\n\n            if(self._config.hideAfterClick){\n                self._cMenu.hide();\n                if(self._cMenu._pMenu) self._cMenu._pMenu.hide();\n                if(subMenu) subMenu.hide();\n            }\n        }\n\n        on(a, 'click', clickCallBack, data);\n\n        parent.appendChild(a);\n\n        this._createHorizontal(a, data, index);\n        \n        \n        //toggle subMenu\n        if (hasSubMenus(data.menus)) {\n            var subMenu = this._createSubMenu(self, data.menus, index);\n\n            on(a, 'mouseenter', function () {\n                delayShow = setTimeout(function () {\n                    subMenu\n                        .styles({\n                                    top: self._container.offsetTop + self._calc.radius + 'px',\n                                    left: self._container.offsetLeft + self._calc.radius + 'px'\n                                })\n                        .show();\n                }, 150);\n            });\n\n            on(a, 'mouseleave', function (e) {\n                if (!subMenu._container.contains(e.toElement)) {\n                    delayHide = setTimeout(function () {\n                        subMenu.hide();\n                    }, 200);\n                }\n            });\n\n            on(subMenu._container, 'mouseenter', function () {\n                clearTimeout(delayShow);\n                clearTimeout(delayHide);\n            });\n\n            on(subMenu._container, 'mouseleave', function (e) {\n                if (!a.contains(e.toElement) || e.toElement.children[0] === a) {\n                    subMenu.hide();\n                }\n            });\n        }\n    }\n\n    const sizeRatio = 0.65;\n    const marginTopRatio = 0.2;\n    const fontHeight = 13;\n\n    function hasIcon(icon){\n        if(icon === undefined) return false;\n        else if(typeof icon === \"string\") return icon !== \"\";\n        else return icon.length && icon[0] !== \"\";\n    }\n\n    function getIcon(icon){\n        return typeof icon === \"string\"? icon : icon[0];\n    }\n\n    function getIconColor(icon){\n        return typeof icon === \"string\"? null : icon[1];\n    }\n\n    function createIcon (parent, data, index) {\n        if(!hasIcon(data.icon)) return;\n\n        var span = document.createElement('span');\n\n        var icon = getIcon(data.icon),\n            color = getIconColor(data.icon);\n\n        classed(span, icon + \" cm-icon\", true);\n        style(span, 'color', color);\n\n        var l = this._calc.clickZoneRadius * sizeRatio - fontHeight + \"px\",\n            m = this._calc.clickZoneRadius * marginTopRatio - fontHeight + \"px\";\n        style(span, 'width', l);\n        style(span, 'height', l);\n        style(span, 'font-size', l);\n        style(span, 'margin-top', m);\n\n        parent.appendChild(span);\n    }\n\n    const withIconMarginTop = \"3px\";\n    const withIconTop = \"-3px\";\n\n    function createText (parent, data, index) {\n\n        var span = document.createElement('span');\n        span.textContent = data.title;\n\n        classed(span, 'text', true);\n        style(span, 'margin-top', hasIcon(data.icon)? withIconMarginTop : this._calc.textTop);\n        style(span, 'top', hasIcon(data.icon)? withIconTop : 0);\n\n        parent.appendChild(span);\n    }\n\n    function createHorizontal (parent, data, index) {\n\n        var div = document.createElement('div');\n        classed(div, \"horizontal\", true);\n\n        if(this._config.horizontal) style(div, 'transform', 'rotate('+ this._calc.horizontalDeg(index) +'deg)');\n\n        parent.appendChild(div);\n\n        this._createIcon(div, data, index);\n        this._createText(div, data, index);\n    }\n\n    function extend$1 () {\n        // Variables\n        var extended = {};\n        var deep = false;\n        var i = 0;\n        var length = arguments.length;\n\n        // Check if a deep merge\n        if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {\n            deep = arguments[0];\n            i++;\n        }\n\n        // Merge the object into the extended object\n        var merge = function (obj) {\n            for (var prop in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n                    // If deep merge and property is an object, merge properties\n                    if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\n                        extended[prop] = extend(true, extended[prop], obj[prop]);\n                    } else {\n                        extended[prop] = obj[prop];\n                    }\n                }\n            }\n        };\n\n        // Loop through each object and conduct a merge\n        for (; i < length; i++) {\n            var obj = arguments[i];\n            merge(obj);\n        }\n\n        return extended;\n\n    };\n\n    const sizeRatio$1 = 5 / 3;\n    const percentRatio = 0.45;\n    const centralDegRatio = 0.618;\n\n\n    function createSubMenu(creator, menus, index) {\n        var subMenu = document.createElement('div');\n\n        classed(subMenu, 'circular-sub-menu', true);\n\n        this._container.parentNode.insertBefore(subMenu, this._container);\n\n        var totalAngle = this._calc.centralDeg * centralDegRatio * menus.length;\n        var startDeg = this._calc.rotateDeg(index) - totalAngle / 2 + this._calc.centralDeg / 2;\n\n        var config = extend$1(this._config, {\n            totalAngle: totalAngle,//deg,\n            percent: percentRatio,//%\n            diameter: this._config.diameter * sizeRatio$1,//px\n            start: startDeg,//deg\n            animation: \"into\",\n            menus: menus\n        });\n        \n        return new CMenu(subMenu, creator._cMenu)\n            .config(config);\n    }\n\n    function Creator(cMenu, config){\n        this._cMenu = cMenu;\n        this._container = cMenu._container;\n        this._config = config;\n        this._calc = new Calculation(config);\n        this._anchors = [];\n    }\n\n\n    Creator.prototype = {\n        constructor: Creator,\n        createMenu: createMenu,\n        _createLists: createLists,\n        _createList: createList,\n        _createAnchor: createAnchor,\n        _createText: createText,\n        _createHorizontal: createHorizontal,\n        _createIcon: createIcon,\n        _createSubMenu: createSubMenu\n    };\n\n    const defaultConfig = {\n        totalAngle: 360,//deg,\n        spaceDeg: 0,//deg\n        background: \"#323232\",\n        backgroundHover: \"#515151\",\n        pageBackground: \"transparent\",\n        percent: 0.32,//%\n        diameter: 300,//px\n        position: 'top',\n        horizontal: true,\n        animation: \"into\",\n        hideAfterClick: true\n    };\n\n\n    function config (config) {\n\n        config = extend$1(defaultConfig, config);\n\n        this._creator = new Creator(this, config);\n        this._creator.createMenu();\n\n        return this;\n    }\n\n    function setCoordinate(coordinate){\n        if( !(coordinate instanceof Array) || !(coordinate.length === 2) ) return;\n\n        //TODO verify if has unit\n        style(this._container, 'left', coordinate[0] + \"px\");\n        style(this._container, 'top', coordinate[1] + \"px\");\n    }\n\n    //check disabled\n\n    function setDisabled(){\n        this._creator._anchors.forEach(function(v){\n            v.setDisabled();\n        });\n    }\n\n    function show (coordinate) {\n\n\n        setDisabled.call(this);\n\n        setCoordinate.call(this, coordinate);\n\n        classed(this._container, 'opened-nav', true);\n        return this;\n    }\n\n    function hide () {\n        classed(this._container, 'opened-nav', false);\n        return this;\n    }\n\n    function styles (styles) {\n        if(!styles instanceof Object) return this;\n        \n        for(var k in styles){\n            if(styles.hasOwnProperty(k)) style(this._container, k, styles[k]);\n        }\n\n        return this;\n    }\n\n    function CMenu(element, pMenu){\n        this._container = element;\n        \n        if(pMenu) this._pMenu = pMenu;\n    }\n\n    CMenu.prototype = {\n        constructor: CMenu,\n        config: config,\n        show: show,\n        hide: hide,\n        styles: styles\n\n    };\n\n    function index (selector) {\n        return typeof selector === \"string\"\n            ? new CMenu(document.querySelector(selector))\n            : new CMenu(selector);\n    }\n\n    return index;\n\n}));\n//# sourceMappingURL=circular-menu.js.map\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/dist/js/circular-menu.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "src/js/circular-menu/index.js",
    "content": "import CMenu from \"./src/CMenu\";\n\nexport default function (selector) {\n    return typeof selector === \"string\"\n        ? new CMenu(document.querySelector(selector))\n        : new CMenu(selector);\n}\n\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "function",
    "name": "index",
    "memberof": "src/js/circular-menu/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/index.js~index",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/index.js",
    "importStyle": "index",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "selector",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "src/js/circular-menu/src/CMenu.js",
    "content": "import config from \"./config\";\nimport show from \"./show\";\nimport hide from \"./hide\";\nimport styles from \"./styles\";\n\nexport default function CMenu(element, pMenu){\n    this._container = element;\n    \n    if(pMenu) this._pMenu = pMenu;\n}\n\nCMenu.prototype = {\n    constructor: CMenu,\n    config: config,\n    show: show,\n    hide: hide,\n    styles: styles\n\n};",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/CMenu.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "CMenu",
    "memberof": "src/js/circular-menu/src/CMenu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/CMenu.js~CMenu",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/CMenu.js",
    "importStyle": "CMenu",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "element",
        "types": [
          "*"
        ]
      },
      {
        "name": "pMenu",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "src/js/circular-menu/src/Creator/createAnchor.js",
    "content": "import style from \"./../style\";\nimport classed from \"./../classed\";\nimport on from \"./../on\";\nimport styleSheet from \"./styleSheet\";\n\nfunction hasSubMenus(menus) {\n  return menus instanceof Array && menus.length !== 0;\n}\nfunction ifDisabled(disabled) {\n  if (disabled instanceof Function) return disabled();\n  else return Boolean(disabled);\n}\n\nfunction setHref(ele, href) {\n  if (!href) return;\n\n  if (href instanceof Object) {\n    ele.href = href.url;\n    ele.target = href.blank ? \"_blank\" : \"\";\n  } else {\n    ele.href = href;\n  }\n}\n\nvar delayShow = null; // delayShow reference the last setTimeout triggered by any one of menu item(anchor)\n\nexport default function (parent, data, index) {\n  var self = this;\n\n  var delayHide = null; // delayHide reference the last setTimeout triggered by the menu item itself\n\n  var a = document.createElement(\"a\");\n\n  setHref(a, data.href);\n\n  a.setDisabled = function () {\n    classed(a, \"disabled\", ifDisabled(data.disabled));\n  };\n  this._anchors.push(a);\n\n  style(a, \"width\", this._calc.clickZoneSize.width);\n  style(a, \"height\", this._calc.clickZoneSize.height);\n  style(a, \"right\", this._calc.clickZoneSize.marginRight);\n  style(a, \"bottom\", this._calc.clickZoneSize.marginBottom);\n  style(\n    a,\n    \"transform\",\n    \"skew(\" +\n      -this._calc.skewDeg +\n      \"deg) rotate(\" +\n      this._calc.unskewDeg +\n      \"deg) scale(1)\"\n  );\n\n  classed(a, \"disabled\", ifDisabled(data.disabled));\n\n  var percent = this._config.percent * 100 + \"%\";\n  styleSheet(\n    a,\n    \"background\",\n    \"radial-gradient(transparent \" +\n      percent +\n      \", \" +\n      this._config.background +\n      \" \" +\n      percent +\n      \")\"\n  );\n  styleSheet(\n    a,\n    \"background\",\n    \"radial-gradient(transparent \" +\n      percent +\n      \", \" +\n      this._config.backgroundHover +\n      \" \" +\n      percent +\n      \")\",\n    \"hover\"\n  );\n\n  function clickCallBack(e, data) {\n    if (data.click) data.click.call(this, e, data);\n\n    if (self._config.hideAfterClick) {\n      self._cMenu.hide();\n      if (self._cMenu._pMenu) self._cMenu._pMenu.hide();\n      if (subMenu) subMenu.hide();\n    }\n  }\n\n  // this is where the tooltip div is created to show names of elements in circular menu\n  on(a, \"mouseenter\", function () {\n    var div = document.createElement(\"div\");\n    div.textContent = data.icon;\n    div.classList.add(\"tooltip\");\n    div.id = data.icon + \"text\";\n    const length = div.textContent.length * 3; //Correct for text length centering\n    document.querySelector(\"body\").appendChild(div);\n\n    style(\n      div,\n      \"top\",\n      self._container.offsetTop + self._calc.radius - 10 + \"px\"\n    );\n\n    style(\n      div,\n      \"left\",\n      self._container.offsetLeft + self._calc.radius - length + \"px\"\n    );\n  });\n\n  on(a, \"click\", clickCallBack, data);\n  on(a, \"mouseleave\", function () {\n    document.getElementById(data.icon + \"text\").remove();\n  });\n\n  parent.appendChild(a);\n\n  this._createHorizontal(a, data, index);\n\n  //toggle subMenu\n  if (hasSubMenus(data.menus)) {\n    var subMenu = this._createSubMenu(self, data.menus, index);\n    let hovered = false;\n    on(a, \"mouseenter\", function () {\n      hovered = true;\n      delayShow = setTimeout(function () {\n        if (hovered) {\n          subMenu\n            .styles({\n              top: self._container.offsetTop + self._calc.radius + \"px\",\n              left: self._container.offsetLeft + self._calc.radius + \"px\",\n            })\n            .show();\n        }\n      }, 100);\n    });\n\n    on(a, \"mouseleave\", function (e) {\n      if (!subMenu._container.contains(e.toElement)) {\n        hovered = false;\n        delayHide = setTimeout(function () {\n          subMenu.hide();\n        }, 100);\n      }\n    });\n\n    on(subMenu._container, \"mouseenter\", function () {\n      clearTimeout(delayShow);\n      clearTimeout(delayHide);\n      var div = document.createElement(\"div\");\n      div.textContent = data.icon;\n      div.classList.add(\"tooltip\");\n      div.id = data.icon + \"text2\";\n      const length = div.textContent.length * 3; //Correct for text length centering\n      document.querySelector(\"body\").appendChild(div);\n      style(div, \"top\", 50 + \"px\");\n      style(\n        div,\n        \"left\",\n        self._container.offsetLeft + self._calc.radius - length + 100 + \"px\"\n      );\n      style(div, \"color\", \"#D7D5D560\");\n    });\n\n    on(subMenu._container, \"mouseleave\", function (e) {\n      hovered = false;\n\n      document.getElementById(data.icon + \"text2\").remove();\n      if (!a.contains(e.toElement) || e.toElement.children[0] === a) {\n        subMenu.hide();\n      }\n    });\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/Creator/createAnchor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "hasSubMenus",
    "memberof": "src/js/circular-menu/src/Creator/createAnchor.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/Creator/createAnchor.js~hasSubMenus",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/Creator/createAnchor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "menus",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "ifDisabled",
    "memberof": "src/js/circular-menu/src/Creator/createAnchor.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/Creator/createAnchor.js~ifDisabled",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/Creator/createAnchor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "disabled",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 72,
    "kind": "function",
    "name": "setHref",
    "memberof": "src/js/circular-menu/src/Creator/createAnchor.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/Creator/createAnchor.js~setHref",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/Creator/createAnchor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "ele",
        "types": [
          "*"
        ]
      },
      {
        "name": "href",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "variable",
    "name": "delayShow",
    "memberof": "src/js/circular-menu/src/Creator/createAnchor.js",
    "static": true,
    "longname": "src/js/circular-menu/src/Creator/createAnchor.js~delayShow",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/Creator/createAnchor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "createAnchor",
    "memberof": "src/js/circular-menu/src/Creator/createAnchor.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/Creator/createAnchor.js~createAnchor",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/Creator/createAnchor.js",
    "importStyle": "createAnchor",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 75,
    "kind": "file",
    "name": "src/js/circular-menu/src/Creator/createHorizontal.js",
    "content": "import style from \"./../style\";\nimport classed from \"./../classed\";\n\nexport default function (parent, data, index) {\n\n    var div = document.createElement('div');\n    classed(div, \"horizontal\", true);\n\n    if(this._config.horizontal) style(div, 'transform', 'rotate('+ this._calc.horizontalDeg(index) +'deg)');\n\n    parent.appendChild(div);\n\n    this._createIcon(div, data, index);\n    this._createText(div, data, index);\n}",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/Creator/createHorizontal.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "createHorizontal",
    "memberof": "src/js/circular-menu/src/Creator/createHorizontal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/Creator/createHorizontal.js~createHorizontal",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/Creator/createHorizontal.js",
    "importStyle": "createHorizontal",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "file",
    "name": "src/js/circular-menu/src/Creator/createIcon.js",
    "content": "import style from \"./../style\";\nimport classed from \"./../classed\";\n\nconst sizeRatio = 0.65;\nconst marginTopRatio = 0.2;\nconst fontHeight = 13;\n\nexport function hasIcon(icon){\n    if(icon === undefined) return false;\n    else if(typeof icon === \"string\") return icon !== \"\";\n    else return icon.length && icon[0] !== \"\";\n}\n\nfunction getIcon(icon){\n    return typeof icon === \"string\"? icon : icon[0];\n}\n\nfunction getIconColor(icon){\n    return typeof icon === \"string\"? null : icon[1];\n}\n\nexport default function (parent, data, index) {\n    if(!hasIcon(data.icon)) return;\n\n    var span = document.createElement('span');\n\n    var icon = getIcon(data.icon),\n        color = getIconColor(data.icon);\n\n    classed(span, icon + \" cm-icon\", true);\n    style(span, 'color', color);\n\n    var l = this._calc.clickZoneRadius * sizeRatio - fontHeight + \"px\",\n        m = this._calc.clickZoneRadius * marginTopRatio - fontHeight + \"px\";\n    style(span, 'width', l);\n    style(span, 'height', l);\n    style(span, 'font-size', l);\n    style(span, 'margin-top', m);\n\n    parent.appendChild(span);\n}",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/Creator/createIcon.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "name": "sizeRatio",
    "memberof": "src/js/circular-menu/src/Creator/createIcon.js",
    "static": true,
    "longname": "src/js/circular-menu/src/Creator/createIcon.js~sizeRatio",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/Creator/createIcon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "marginTopRatio",
    "memberof": "src/js/circular-menu/src/Creator/createIcon.js",
    "static": true,
    "longname": "src/js/circular-menu/src/Creator/createIcon.js~marginTopRatio",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/Creator/createIcon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 80,
    "kind": "variable",
    "name": "fontHeight",
    "memberof": "src/js/circular-menu/src/Creator/createIcon.js",
    "static": true,
    "longname": "src/js/circular-menu/src/Creator/createIcon.js~fontHeight",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/Creator/createIcon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "hasIcon",
    "memberof": "src/js/circular-menu/src/Creator/createIcon.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/Creator/createIcon.js~hasIcon",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/Creator/createIcon.js",
    "importStyle": "{hasIcon}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "icon",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "getIcon",
    "memberof": "src/js/circular-menu/src/Creator/createIcon.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/Creator/createIcon.js~getIcon",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/Creator/createIcon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "icon",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "getIconColor",
    "memberof": "src/js/circular-menu/src/Creator/createIcon.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/Creator/createIcon.js~getIconColor",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/Creator/createIcon.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "icon",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 84,
    "kind": "function",
    "name": "createIcon",
    "memberof": "src/js/circular-menu/src/Creator/createIcon.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/Creator/createIcon.js~createIcon",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/Creator/createIcon.js",
    "importStyle": "createIcon",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 85,
    "kind": "file",
    "name": "src/js/circular-menu/src/Creator/createList.js",
    "content": "import style from \"./../style\";\n\n\nexport default function(parent, data, index){\n\n    var list = document.createElement('li');\n    style(list, 'width', this._calc.listSize.width);\n    style(list, 'height', this._calc.listSize.height);\n    style(list, 'transform', 'rotate('+ this._calc.rotateDeg(index) +'deg) skew('+ this._calc.skewDeg +'deg)');\n\n    parent.appendChild(list);\n\n    this._createAnchor(list, data, index);\n\n}",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/Creator/createList.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "createList",
    "memberof": "src/js/circular-menu/src/Creator/createList.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/Creator/createList.js~createList",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/Creator/createList.js",
    "importStyle": "createList",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "src/js/circular-menu/src/Creator/createLists.js",
    "content": "export default function (parent) {\n    \n    this._config.menus.forEach(function(v, k){\n\n        this._createList(parent, v, k);\n        \n    }, this);\n\n}",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/Creator/createLists.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "createLists",
    "memberof": "src/js/circular-menu/src/Creator/createLists.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/Creator/createLists.js~createLists",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/Creator/createLists.js",
    "importStyle": "createLists",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "parent",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "src/js/circular-menu/src/Creator/createMenu.js",
    "content": "import classed from \"./../classed\";\nimport style from \"./../style\";\nimport styleSheet from \"./styleSheet\";\nimport on from \"../on\";\n\nexport default function(){\n    var p = this._container;\n\n    classed(p, 'circular-menu', true);\n    style(p, 'width', this._calc.menuSize.width);\n    style(p, 'height', this._calc.menuSize.height);\n    style(p, 'margin-top', this._calc.menuSize.marginTop);\n    style(p, 'margin-left', this._calc.menuSize.marginLeft);\n    \n    var self = this;\n    on(p, \"click\", function(e){\n        if(e.toElement === p){\n            self._cMenu.hide();\n        }\n    });\n    setTimeout(function(){\n        style(p, 'display', 'block');\n    },100);\n\n    styleSheet(p, 'width', this._calc.coverSize.width, 'after');\n    styleSheet(p, 'height', this._calc.coverSize.height, 'after');\n    styleSheet(p, 'margin-left', this._calc.coverSize.marginLeft, 'after');\n    styleSheet(p, 'margin-top', this._calc.coverSize.marginTop, 'after');\n    styleSheet(p, 'border', \"3px solid \" + this._config.pageBackground, 'after');\n\n\n    var ul = p.appendChild(document.createElement('ul'));\n    this._createLists(ul);\n}",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/Creator/createMenu.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "createMenu",
    "memberof": "src/js/circular-menu/src/Creator/createMenu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/Creator/createMenu.js~createMenu",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/Creator/createMenu.js",
    "importStyle": "createMenu",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 91,
    "kind": "file",
    "name": "src/js/circular-menu/src/Creator/createSubMenu.js",
    "content": "import classed from \"./../classed\";\nimport CMenu from \"../CMenu\";\nimport extend from \"../extend\";\n\nconst sizeRatio = 5 / 3;\nconst percentRatio = 0.45;\nconst centralDegRatio = 0.618;\n\n\nexport default function createSubMenu(creator, menus, index) {\n    var subMenu = document.createElement('div');\n\n    classed(subMenu, 'circular-sub-menu', true);\n\n    this._container.parentNode.insertBefore(subMenu, this._container);\n\n    var totalAngle = this._calc.centralDeg * centralDegRatio * menus.length;\n    var startDeg = this._calc.rotateDeg(index) - totalAngle / 2 + this._calc.centralDeg / 2;\n\n    var config = extend(this._config, {\n        totalAngle: totalAngle,//deg,\n        percent: percentRatio,//%\n        diameter: this._config.diameter * sizeRatio,//px\n        start: startDeg,//deg\n        animation: \"into\",\n        menus: menus\n    });\n    \n    return new CMenu(subMenu, creator._cMenu)\n        .config(config);\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/Creator/createSubMenu.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "name": "sizeRatio",
    "memberof": "src/js/circular-menu/src/Creator/createSubMenu.js",
    "static": true,
    "longname": "src/js/circular-menu/src/Creator/createSubMenu.js~sizeRatio",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/Creator/createSubMenu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "name": "percentRatio",
    "memberof": "src/js/circular-menu/src/Creator/createSubMenu.js",
    "static": true,
    "longname": "src/js/circular-menu/src/Creator/createSubMenu.js~percentRatio",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/Creator/createSubMenu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "name": "centralDegRatio",
    "memberof": "src/js/circular-menu/src/Creator/createSubMenu.js",
    "static": true,
    "longname": "src/js/circular-menu/src/Creator/createSubMenu.js~centralDegRatio",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/Creator/createSubMenu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 95,
    "kind": "function",
    "name": "createSubMenu",
    "memberof": "src/js/circular-menu/src/Creator/createSubMenu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/Creator/createSubMenu.js~createSubMenu",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/Creator/createSubMenu.js",
    "importStyle": "createSubMenu",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "creator",
        "types": [
          "*"
        ]
      },
      {
        "name": "menus",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "file",
    "name": "src/js/circular-menu/src/Creator/createText.js",
    "content": "import style from \"./../style\";\nimport classed from \"./../classed\";\nimport {hasIcon} from \"./createIcon\";\n\nconst withIconMarginTop = \"3px\";\nconst withIconTop = \"-3px\";\n\nexport default function (parent, data, index) {\n\n    var span = document.createElement('span');\n    span.textContent = data.title;\n\n    classed(span, 'text', true);\n    style(span, 'margin-top', hasIcon(data.icon)? withIconMarginTop : this._calc.textTop);\n    style(span, 'top', hasIcon(data.icon)? withIconTop : 0);\n\n    parent.appendChild(span);\n}",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/Creator/createText.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "name": "withIconMarginTop",
    "memberof": "src/js/circular-menu/src/Creator/createText.js",
    "static": true,
    "longname": "src/js/circular-menu/src/Creator/createText.js~withIconMarginTop",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/Creator/createText.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "name": "withIconTop",
    "memberof": "src/js/circular-menu/src/Creator/createText.js",
    "static": true,
    "longname": "src/js/circular-menu/src/Creator/createText.js~withIconTop",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/Creator/createText.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 99,
    "kind": "function",
    "name": "createText",
    "memberof": "src/js/circular-menu/src/Creator/createText.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/Creator/createText.js~createText",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/Creator/createText.js",
    "importStyle": "createText",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 100,
    "kind": "file",
    "name": "src/js/circular-menu/src/Creator/index.js",
    "content": "import Calculation from '../calculation/index';\nimport createLists from \"./createLists\";\nimport createList from \"./createList\";\nimport createMenu from \"./createMenu\";\nimport createAnchor from \"./createAnchor\";\nimport createText from \"./createText\";\nimport createIcon from \"./createIcon\";\nimport createHorizontal from \"./createHorizontal\";\nimport createSubMenu from \"./createSubMenu\";\n\nexport default function Creator(cMenu, config){\n    this._cMenu = cMenu;\n    this._container = cMenu._container;\n    this._config = config;\n    this._calc = new Calculation(config);\n    this._anchors = [];\n}\n\n\nCreator.prototype = {\n    constructor: Creator,\n    createMenu: createMenu,\n    _createLists: createLists,\n    _createList: createList,\n    _createAnchor: createAnchor,\n    _createText: createText,\n    _createHorizontal: createHorizontal,\n    _createIcon: createIcon,\n    _createSubMenu: createSubMenu\n};",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/Creator/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "Creator",
    "memberof": "src/js/circular-menu/src/Creator/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/Creator/index.js~Creator",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/Creator/index.js",
    "importStyle": "Creator",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "cMenu",
        "types": [
          "*"
        ]
      },
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 102,
    "kind": "file",
    "name": "src/js/circular-menu/src/Creator/styleSheet.js",
    "content": "var UID = {\n    _current: 0,\n    getNew: function(){\n        this._current++;\n        return this._current;\n    }\n};\nexport default function (element, prop, value, pseudo) {\n    \n    var _this = element;\n    var _sheetId = \"sheetStyles\";\n    var _head = document.head || document.getElementsByTagName('head')[0];\n    var _sheet = document.getElementById(_sheetId) || document.createElement('style');\n    _sheet.id = _sheetId;\n    var className = \"s-S\" + UID.getNew();\n    \n    _this.className += \" \" + className;\n\n\n\n    _sheet.innerHTML += \" .\" + className + ( pseudo ? (\":\" + pseudo) : \"\" ) + \"{\" + prop + \":\" + value + \"}\";\n    _head.appendChild(_sheet);\n    return this;\n};",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/Creator/styleSheet.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 103,
    "kind": "variable",
    "name": "UID",
    "memberof": "src/js/circular-menu/src/Creator/styleSheet.js",
    "static": true,
    "longname": "src/js/circular-menu/src/Creator/styleSheet.js~UID",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/Creator/styleSheet.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "{\"_current\": *, \"getNew\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 104,
    "kind": "function",
    "name": "styleSheet",
    "memberof": "src/js/circular-menu/src/Creator/styleSheet.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/Creator/styleSheet.js~styleSheet",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/Creator/styleSheet.js",
    "importStyle": "styleSheet",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "element",
        "types": [
          "*"
        ]
      },
      {
        "name": "prop",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "pseudo",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "file",
    "name": "src/js/circular-menu/src/calculation/clickZoneSize.js",
    "content": "export const fixedTop  = 10;\n\nexport default function (config) {\n    var l = config.diameter;\n    var m = - config.diameter / 2;\n\n    l += \"px\";\n    m += \"px\";\n\n    return {\n        width:  l,\n        height: l,\n        marginRight: m,\n        marginBottom: m\n    };\n}",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/calculation/clickZoneSize.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "fixedTop",
    "memberof": "src/js/circular-menu/src/calculation/clickZoneSize.js",
    "static": true,
    "longname": "src/js/circular-menu/src/calculation/clickZoneSize.js~fixedTop",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/calculation/clickZoneSize.js",
    "importStyle": "{fixedTop}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "function",
    "name": "clickZoneSize",
    "memberof": "src/js/circular-menu/src/calculation/clickZoneSize.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/calculation/clickZoneSize.js~clickZoneSize",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/calculation/clickZoneSize.js",
    "importStyle": "clickZoneSize",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"width\": *, \"height\": *, \"marginRight\": *, \"marginBottom\": *}"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "src/js/circular-menu/src/calculation/coverSize.js",
    "content": "const antialiasing = 3;\n\nexport function coverRadius(radius, percent) {\n    var square = radius * radius * 2;\n    return Math.sqrt(square) * percent + antialiasing;\n}\n\nexport default function (coverRadius) {\n    var l = coverRadius * 2;\n    var m = -l / 2;\n\n    l += \"px\";\n    m += \"px\";\n    \n    return {\n        width:  l,\n        height: l,\n        marginLeft: m,\n        marginTop: m\n    };\n}",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/calculation/coverSize.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "variable",
    "name": "antialiasing",
    "memberof": "src/js/circular-menu/src/calculation/coverSize.js",
    "static": true,
    "longname": "src/js/circular-menu/src/calculation/coverSize.js~antialiasing",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/calculation/coverSize.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "function",
    "name": "coverRadius",
    "memberof": "src/js/circular-menu/src/calculation/coverSize.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/calculation/coverSize.js~coverRadius",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/calculation/coverSize.js",
    "importStyle": "{coverRadius}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "radius",
        "types": [
          "*"
        ]
      },
      {
        "name": "percent",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "coverSize",
    "memberof": "src/js/circular-menu/src/calculation/coverSize.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/calculation/coverSize.js~coverSize",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/calculation/coverSize.js",
    "importStyle": "coverSize",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "coverRadius",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"width\": *, \"height\": *, \"marginLeft\": *, \"marginTop\": *}"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "file",
    "name": "src/js/circular-menu/src/calculation/horizontalDeg.js",
    "content": "export default function rotateDeg (i){\n    return - (this.rotateDeg(i) + this.unskewDeg);\n}",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/calculation/horizontalDeg.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "rotateDeg",
    "memberof": "src/js/circular-menu/src/calculation/horizontalDeg.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/calculation/horizontalDeg.js~rotateDeg",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/calculation/horizontalDeg.js",
    "importStyle": "rotateDeg",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "src/js/circular-menu/src/calculation/index.js",
    "content": "import rotateDeg from './rotateDeg';\nimport horizontalDeg from './horizontalDeg';\nimport startDeg from './startDeg';\nimport {default as coverSize, coverRadius} from \"./coverSize\";\nimport menuSize from \"./menuSize\";\nimport clickZoneSize from \"./clickZoneSize\";\nimport listSize from \"./listSize\";\nimport textTop from \"./textTop\";\n\nexport default function Calculation(config) {\n    this._config = config;\n\n    var c = this.config = config,\n        itemsNum = c.menus.length,\n        spaceNumber = c.totalAngle === 360 ? itemsNum : itemsNum - 1;\n\n    this.radius = config.diameter / 2;\n    this.coverRadius = coverRadius(this.radius, config.percent);\n    this.clickZoneRadius = this.radius - this.coverRadius;\n\n\n\n    this.listSize = listSize(config);\n    this.clickZoneSize = clickZoneSize(config);\n    this.menuSize = menuSize(config);\n    this.coverSize = coverSize(this.coverRadius);\n    this.startDeg = startDeg(config);\n    this.centralDeg = (c.totalAngle - (c.spaceDeg * spaceNumber)) / itemsNum;\n    this.rotateUnit = this.centralDeg + c.spaceDeg;\n    this.skewDeg = 90 - this.centralDeg;\n    this.unskewDeg = - (90 - this.centralDeg / 2);\n    this.textTop = textTop(this.clickZoneRadius);\n}\n\nCalculation.prototype = {\n    constructor: Calculation,\n    rotateDeg: rotateDeg,\n    horizontalDeg: horizontalDeg\n};",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/calculation/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "function",
    "name": "Calculation",
    "memberof": "src/js/circular-menu/src/calculation/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/calculation/index.js~Calculation",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/calculation/index.js",
    "importStyle": "Calculation",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 116,
    "kind": "file",
    "name": "src/js/circular-menu/src/calculation/listSize.js",
    "content": "export default function (config) {\n    var l = (config.diameter / 2) + 'px';\n\n    return {\n        width:  l,\n        height: l\n    };\n}",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/calculation/listSize.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "function",
    "name": "listSize",
    "memberof": "src/js/circular-menu/src/calculation/listSize.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/calculation/listSize.js~listSize",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/calculation/listSize.js",
    "importStyle": "listSize",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"width\": *, \"height\": *}"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "file",
    "name": "src/js/circular-menu/src/calculation/menuSize.js",
    "content": "export default function (config) {\n    var l = config.diameter;\n    var m = - config.diameter / 2;\n\n    l += \"px\";\n    m += \"px\";\n\n    return {\n        width:  l,\n        height: l,\n        marginLeft: m,\n        marginTop: m\n    };\n}",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/calculation/menuSize.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "menuSize",
    "memberof": "src/js/circular-menu/src/calculation/menuSize.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/calculation/menuSize.js~menuSize",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/calculation/menuSize.js",
    "importStyle": "menuSize",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"width\": *, \"height\": *, \"marginLeft\": *, \"marginTop\": *}"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "file",
    "name": "src/js/circular-menu/src/calculation/rotateDeg.js",
    "content": "export default function rotateDeg (i){\n    return this.startDeg + this.rotateUnit * i;\n}",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/calculation/rotateDeg.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "rotateDeg",
    "memberof": "src/js/circular-menu/src/calculation/rotateDeg.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/calculation/rotateDeg.js~rotateDeg",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/calculation/rotateDeg.js",
    "importStyle": "rotateDeg",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "file",
    "name": "src/js/circular-menu/src/calculation/startDeg.js",
    "content": "export default function startDeg(config) {\n    var top = -(config.totalAngle - 180) / 2,\n        positions = {\n            top: top,\n            left: top - 90,\n            right: top + 90,\n            bottom: top + 180\n        };\n\n    return config.start !== undefined ? config.start : positions[config.position];\n}",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/calculation/startDeg.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 123,
    "kind": "function",
    "name": "startDeg",
    "memberof": "src/js/circular-menu/src/calculation/startDeg.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/calculation/startDeg.js~startDeg",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/calculation/startDeg.js",
    "importStyle": "startDeg",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "file",
    "name": "src/js/circular-menu/src/calculation/textTop.js",
    "content": "import {fixedTop} from \"./clickZoneSize\";\n\nconst middleRatio = 0.41;\n\nexport default function (clickZoneRadius) {\n    return clickZoneRadius * middleRatio - fixedTop + 'px';\n\n}",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/calculation/textTop.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "middleRatio",
    "memberof": "src/js/circular-menu/src/calculation/textTop.js",
    "static": true,
    "longname": "src/js/circular-menu/src/calculation/textTop.js~middleRatio",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/calculation/textTop.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "function",
    "name": "textTop",
    "memberof": "src/js/circular-menu/src/calculation/textTop.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/calculation/textTop.js~textTop",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/calculation/textTop.js",
    "importStyle": "textTop",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "clickZoneRadius",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "file",
    "name": "src/js/circular-menu/src/classed.js",
    "content": "function classArray(string) {\n    return string.trim().split(/^|\\s+/);\n}\n\nfunction classList(node) {\n    return node.classList || new ClassList(node);\n}\n\nfunction ClassList(node) {\n    this._node = node;\n    this._names = classArray(node.getAttribute(\"class\") || \"\");\n}\n\nClassList.prototype = {\n    add: function(name) {\n        var i = this._names.indexOf(name);\n        if (i < 0) {\n            this._names.push(name);\n            this._node.setAttribute(\"class\", this._names.join(\" \"));\n        }\n    },\n    remove: function(name) {\n        var i = this._names.indexOf(name);\n        if (i >= 0) {\n            this._names.splice(i, 1);\n            this._node.setAttribute(\"class\", this._names.join(\" \"));\n        }\n    },\n    contains: function(name) {\n        return this._names.indexOf(name) >= 0;\n    }\n};\n\nfunction classedAdd(node, names) {\n    var list = classList(node), i = -1, n = names.length;\n    while (++i < n) list.add(names[i]);\n}\n\nfunction classedRemove(node, names) {\n    var list = classList(node), i = -1, n = names.length;\n    while (++i < n) list.remove(names[i]);\n}\n\nfunction classedTrue(names) {\n    classedAdd(this, names);\n}\n\nfunction classedFalse(names) {\n    classedRemove(this, names);\n}\n\nfunction classedFunction(names, value) {\n    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\n}\n\nexport default function(ele, name, value) {\n    var names = classArray(name + \"\");\n\n    if (arguments.length < 2) {\n        var list = classList(this), i = -1, n = names.length;\n        while (++i < n) if (!list.contains(names[i])) return false;\n        return true;\n    }\n\n    var callee = (typeof value === \"function\"\n        ? classedFunction : value\n        ? classedTrue\n        : classedFalse).call(ele, names, value);\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/classed.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "classArray",
    "memberof": "src/js/circular-menu/src/classed.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/classed.js~classArray",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/classed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "classList",
    "memberof": "src/js/circular-menu/src/classed.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/classed.js~classList",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/classed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "ClassList",
    "memberof": "src/js/circular-menu/src/classed.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/classed.js~ClassList",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/classed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 131,
    "kind": "function",
    "name": "classedAdd",
    "memberof": "src/js/circular-menu/src/classed.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/classed.js~classedAdd",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/classed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "names",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 132,
    "kind": "function",
    "name": "classedRemove",
    "memberof": "src/js/circular-menu/src/classed.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/classed.js~classedRemove",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/classed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "names",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "function",
    "name": "classedTrue",
    "memberof": "src/js/circular-menu/src/classed.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/classed.js~classedTrue",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/classed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "names",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 134,
    "kind": "function",
    "name": "classedFalse",
    "memberof": "src/js/circular-menu/src/classed.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/classed.js~classedFalse",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/classed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [
      {
        "name": "names",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "function",
    "name": "classedFunction",
    "memberof": "src/js/circular-menu/src/classed.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/classed.js~classedFunction",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/classed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "names",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 136,
    "kind": "function",
    "name": "classed",
    "memberof": "src/js/circular-menu/src/classed.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/classed.js~classed",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/classed.js",
    "importStyle": "classed",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [
      {
        "name": "ele",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "file",
    "name": "src/js/circular-menu/src/config.js",
    "content": "import Creator from \"./Creator/index\";\nimport extend from \"./extend\";\n\nconst defaultConfig = {\n    totalAngle: 360,//deg,\n    spaceDeg: 0,//deg\n    background: \"#323232\",\n    backgroundHover: \"#515151\",\n    pageBackground: \"transparent\",\n    percent: 0.32,//%\n    diameter: 300,//px\n    position: 'top',\n    horizontal: true,\n    animation: \"into\",\n    hideAfterClick: true\n};\n\n\nexport default function (config) {\n    config = extend(defaultConfig, config);\n\n    this._creator = new Creator(this, config);\n    this._creator.createMenu();\n\n    return this;\n}",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/config.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 138,
    "kind": "variable",
    "name": "defaultConfig",
    "memberof": "src/js/circular-menu/src/config.js",
    "static": true,
    "longname": "src/js/circular-menu/src/config.js~defaultConfig",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/config.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{\"totalAngle\": number, \"spaceDeg\": *, \"background\": string, \"backgroundHover\": string, \"pageBackground\": string, \"percent\": number, \"diameter\": number, \"position\": string, \"horizontal\": boolean, \"animation\": string, \"hideAfterClick\": boolean}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 139,
    "kind": "function",
    "name": "config",
    "memberof": "src/js/circular-menu/src/config.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/config.js~config",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/config.js",
    "importStyle": "config",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "file",
    "name": "src/js/circular-menu/src/extend.js",
    "content": "export default function () {\n    // Variables\n    var extended = {};\n    var deep = false;\n    var i = 0;\n    var length = arguments.length;\n\n    // Check if a deep merge\n    if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {\n        deep = arguments[0];\n        i++;\n    }\n\n    // Merge the object into the extended object\n    var merge = function (obj) {\n        for (var prop in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n                // If deep merge and property is an object, merge properties\n                if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\n                    extended[prop] = extend(true, extended[prop], obj[prop]);\n                } else {\n                    extended[prop] = obj[prop];\n                }\n            }\n        }\n    };\n\n    // Loop through each object and conduct a merge\n    for (; i < length; i++) {\n        var obj = arguments[i];\n        merge(obj);\n    }\n\n    return extended;\n\n};",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/extend.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 141,
    "kind": "function",
    "name": "extend",
    "memberof": "src/js/circular-menu/src/extend.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/extend.js~extend",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/extend.js",
    "importStyle": "extend",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "file",
    "name": "src/js/circular-menu/src/hide.js",
    "content": "import classed from \"./classed\";\nexport default function () {\n    classed(this._container, 'opened-nav', false);\n    return this;\n}",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/hide.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 143,
    "kind": "function",
    "name": "hide",
    "memberof": "src/js/circular-menu/src/hide.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/hide.js~hide",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/hide.js",
    "importStyle": "hide",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "file",
    "name": "src/js/circular-menu/src/on.js",
    "content": "export default function on (ele, type, callback, data) {\n    ele.addEventListener(type, function(e){\n        callback.call(this, e, data);\n    });\n}",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/on.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 145,
    "kind": "function",
    "name": "on",
    "memberof": "src/js/circular-menu/src/on.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/on.js~on",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/on.js",
    "importStyle": "on",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "ele",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 146,
    "kind": "file",
    "name": "src/js/circular-menu/src/show.js",
    "content": "import classed from \"./classed\";\nimport style from \"./style\";\n\nfunction setCoordinate(coordinate) {\n  if (!(coordinate instanceof Array) || !(coordinate.length === 2)) return;\n\n  //TODO verify if has unit\n  style(this._container, \"left\", coordinate[0] + \"px\");\n  style(this._container, \"top\", coordinate[1] + \"px\");\n}\n\n//check disabled\n\nfunction setDisabled() {\n  this._creator._anchors.forEach(function (v) {\n    v.setDisabled();\n  });\n}\n\nexport default function (coordinate) {\n  setDisabled.call(this);\n\n  setCoordinate.call(this, coordinate);\n\n  classed(this._container, \"opened-nav\", true);\n\n  return this;\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/show.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 147,
    "kind": "function",
    "name": "setCoordinate",
    "memberof": "src/js/circular-menu/src/show.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/show.js~setCoordinate",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/show.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "coordinate",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 148,
    "kind": "function",
    "name": "setDisabled",
    "memberof": "src/js/circular-menu/src/show.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/show.js~setDisabled",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/show.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 149,
    "kind": "function",
    "name": "show",
    "memberof": "src/js/circular-menu/src/show.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/show.js~show",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/show.js",
    "importStyle": "show",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "coordinate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "file",
    "name": "src/js/circular-menu/src/style.js",
    "content": "import defaultView from \"./window\";\n\nfunction styleRemove(name) {\n    this.style.removeProperty(name);\n}\n\nfunction styleConstant(name, value, priority) {\n    this.style.setProperty(name, value, priority);\n}\n\nfunction styleFunction(name, value, priority) {\n    var v = value.apply(this, arguments);\n    if (v == null) this.style.removeProperty(name);\n    else this.style.setProperty(name, v, priority);\n}\n\nexport default function(ele, name, value, priority) {\n\n    var node;\n    return arguments.length > 1\n        ? ((value == null\n        ? styleRemove : typeof value === \"function\"\n        ? styleFunction\n        : styleConstant).call(ele, name, value, priority == null ? \"\" : priority))\n        : defaultView(node = ele)\n        .getComputedStyle(node, null)\n        .getPropertyValue(name);\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/style.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 151,
    "kind": "function",
    "name": "styleRemove",
    "memberof": "src/js/circular-menu/src/style.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/style.js~styleRemove",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/style.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 152,
    "kind": "function",
    "name": "styleConstant",
    "memberof": "src/js/circular-menu/src/style.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/style.js~styleConstant",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/style.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "priority",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "styleFunction",
    "memberof": "src/js/circular-menu/src/style.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/style.js~styleFunction",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/js/circular-menu/src/style.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "priority",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 154,
    "kind": "function",
    "name": "style",
    "memberof": "src/js/circular-menu/src/style.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/style.js~style",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/style.js",
    "importStyle": "style",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "ele",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "priority",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "file",
    "name": "src/js/circular-menu/src/styles.js",
    "content": "import style from \"./style\";\n\nexport default function (styles) {\n    if(!styles instanceof Object) return this;\n    \n    for(var k in styles){\n        if(styles.hasOwnProperty(k)) style(this._container, k, styles[k]);\n    }\n\n    return this;\n}",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/styles.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 156,
    "kind": "function",
    "name": "styles",
    "memberof": "src/js/circular-menu/src/styles.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/styles.js~styles",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/styles.js",
    "importStyle": "styles",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "styles",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "file",
    "name": "src/js/circular-menu/src/window.js",
    "content": "export default function(node) {\n    return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node\n        || (node.document && node) // node is a Window\n        || node.defaultView; // node is a Document\n}",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/circular-menu/src/window.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 158,
    "kind": "function",
    "name": "window",
    "memberof": "src/js/circular-menu/src/window.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/circular-menu/src/window.js~window",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/circular-menu/src/window.js",
    "importStyle": "window",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "file",
    "name": "src/js/fonts.js",
    "content": "const fonts = {\n  ANTON: \"http://fonts.gstatic.com/s/anton/v7/XIbCenm-W0IRHWYIh7CGUQ.ttf\",\n  ROBOTO: \"https://fonts.gstatic.com/s/roboto/v15/W5F8_SL0XFawnjxHGsZjJA.ttf\",\n\n  NOTOSANS:\n    \"http://fonts.gstatic.com/s/notosansdisplay/v20/RLplK4fy6r6tOBEJg0IAKzqdFZVZxokvfn_BDLxR.ttf\",\n\n  ANONYMOUSPRO:\n    \"http://fonts.gstatic.com/s/anonymouspro/v14/rP2Bp2a15UIB7Un-bOeISG3pLlw89CH98Ko.ttf\",\n\n  MONSERRAT:\n    \"http://fonts.gstatic.com/s/montserrat/v15/JTURjIg1_i6t8kCHKm45_dJE3gnD-w.ttf\",\n\n  AGUAFINA:\n    \"http://fonts.gstatic.com/s/aguafinascript/v5/65g7cgMtMGnNlNyq_Z6CvMxLhO8OSNnfAp53LK1_iRs.ttf\",\n\n  OPEN_SANS:\n    \"http://fonts.gstatic.com/s/opensans/v13/IgZJs4-7SA1XX_edsoXWog.ttf\",\n};\n\nexport default fonts;\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/fonts.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 160,
    "kind": "variable",
    "name": "fonts",
    "memberof": "src/js/fonts.js",
    "static": true,
    "longname": "src/js/fonts.js~fonts",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/fonts.js",
    "importStyle": "fonts",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "{\"ANTON\": string, \"ROBOTO\": string, \"NOTOSANS\": string, \"ANONYMOUSPRO\": string, \"MONSERRAT\": string, \"AGUAFINA\": string, \"OPEN_SANS\": string}"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "file",
    "name": "src/js/globalvariables.js",
    "content": "import { create, all } from \"mathjs\";\nimport Join from \"../molecules/join.js\";\nimport Circle from \"../molecules/circle.js\";\nimport Color from \"../molecules/color.js\";\nimport CutLayout from \"../molecules/cutlayout.js\";\nimport ShrinkWrap from \"../molecules/shrinkWrap.js\";\nimport Rectangle from \"../molecules/rectangle.js\";\nimport Loft from \"../molecules/loft.js\";\nimport Move from \"../molecules/move.js\";\nimport Tag from \"../molecules/tag.js\";\nimport RegularPolygon from \"../molecules/regularPolygon.js\";\nimport Extrude from \"../molecules/extrude.js\";\n//import Nest              from '../molecules/nest.js'\nimport Intersection from \"../molecules/intersection.js\";\nimport Difference from \"../molecules/difference.js\";\nimport Constant from \"../molecules/constant.js\";\nimport Equation from \"../molecules/equation.js\";\nimport ExtractTag from \"../molecules/extracttag.js\";\nimport Molecule from \"../molecules/molecule.js\";\nimport GeneticAlgorithm from \"../molecules/geneticAlgorithm.js\";\nimport Input from \"../molecules/input.js\";\nimport Readme from \"../molecules/readme.js\";\nimport AddBOMTag from \"../molecules/BOM.js\";\nimport Rotate from \"../molecules/rotate.js\";\nimport GitHubMolecule from \"../molecules/githubmolecule.js\";\nimport Output from \"../molecules/output.js\";\nimport Gcode from \"../molecules/gcode.js\";\nimport Code from \"../molecules/code.js\";\nimport Group from \"../molecules/group.js\";\nimport Import from \"../molecules/import.js\";\nimport Export from \"../molecules/export.js\";\nimport Text from \"../molecules/text.js\";\nimport Box from \"../molecules/box.js\";\n\n/**\n * This class defines things which are made available to all objects which import it. It is a singlton which means that each time it is imported the same instance is made available so if it is written to in one place, it can be read somewhere else.\n */\nclass GlobalVariables {\n  /**\n   * The constructor creates a new instance of the Global Variables object.\n   */\n  constructor() {\n    /**\n     * The canvas object on which the atoms are drawn.\n     * @type {object}\n     */\n    this.canvas = null;\n    /**\n     * The 2D reference to the canvas object on which the atoms are drawn.\n     * @type {object}\n     */\n    this.c = null;\n    /**\n     * An array of all of the available types of atoms which can be placed with a right click.\n     * @type {array}\n     */\n    this.availableTypes = {\n      box: { creator: Box, atomType: \"Box\" },\n      intersection: {\n        creator: Intersection,\n        atomType: \"Intersection\",\n        atomCategory: \"Interactions\",\n      },\n      difference: {\n        creator: Difference,\n        atomType: \"Difference\",\n        atomCategory: \"Interactions\",\n      },\n      union: {\n        creator: Join,\n        atomType: \"Join\",\n        atomCategory: \"Interactions\",\n      },\n      group: { creator: Group, atomType: \"Group\", atomCategory: \"None\" },\n      loft: {\n        creator: Loft,\n        atomType: \"Loft\",\n        atomCategory: \"Interactions\",\n      },\n      shrinkWrap: {\n        creator: ShrinkWrap,\n        atomType: \"ShrinkWrap\",\n        atomCategory: \"Interactions\",\n      },\n\n      readme: { creator: Readme, atomType: \"Readme\", atomCategory: \"Tags\" },\n      addBOMTag: {\n        creator: AddBOMTag,\n        atomType: \"Add-BOM-Tag\",\n        atomCategory: \"Tags\",\n      },\n      color: { creator: Color, atomType: \"Color\", atomCategory: \"Actions\" },\n      tag: { creator: Tag, atomType: \"Tag\", atomCategory: \"Tags\" },\n      extracttag: {\n        creator: ExtractTag,\n        atomType: \"ExtractTag\",\n        atomCategory: \"Tags\",\n      },\n      cutLayout: {\n        creator: CutLayout,\n        atomType: \"CutLayout\",\n        atomCategory: \"Tags\",\n      },\n      regularPolygon: {\n        creator: RegularPolygon,\n        atomType: \"RegularPolygon\",\n        atomCategory: \"Shapes\",\n      },\n      costant: {\n        creator: Constant,\n        atomType: \"Constant\",\n        atomCategory: \"Inputs\",\n      },\n      circle: { creator: Circle, atomType: \"Circle\", atomCategory: \"Shapes\" },\n      text: { creator: Text, atomType: \"Text\", atomCategory: \"Shapes\" },\n      rectangle: {\n        creator: Rectangle,\n        atomType: \"Rectangle\",\n        atomCategory: \"Shapes\",\n      },\n      molecule: {\n        creator: Molecule,\n        atomType: \"Molecule\",\n        atomCategory: \"Shapes\",\n      },\n      input: { creator: Input, atomType: \"Input\", atomCategory: \"Inputs\" },\n      equation: {\n        creator: Equation,\n        atomType: \"Equation\",\n        atomCategory: \"Inputs\",\n      },\n      code: { creator: Code, atomType: \"Code\", atomCategory: \"Inputs\" },\n\n      rotate: { creator: Rotate, atomType: \"Rotate\", atomCategory: \"Actions\" },\n      extrude: {\n        creator: Extrude,\n        atomType: \"Extrude\",\n        atomCategory: \"Actions\",\n      },\n      move: { creator: Move, atomType: \"Move\", atomCategory: \"Actions\" },\n      GeneticAlgorithm: {\n        creator: GeneticAlgorithm,\n        atomType: \"GeneticAlgorithm\",\n        atomCategory: \"Actions\",\n      },\n      //nest:               {creator: Nest, atomType: 'Nest', atomCategory: 'Export'},\n      gcode: {\n        creator: Gcode,\n        atomType: \"Gcode\",\n        atomCategory: \"ImportExport\",\n      },\n      import: {\n        creator: Import,\n        atomType: \"Import\",\n        atomCategory: \"ImportExport\",\n      },\n      export: {\n        creator: Export,\n        atomType: \"Export\",\n        atomCategory: \"ImportExport\",\n      },\n      githubmolecule: {\n        creator: GitHubMolecule,\n        atomType: \"GitHubMolecule\",\n        atomCategory: \"ImportExport\",\n      },\n\n      output: { creator: Output, atomType: \"Output\" },\n    };\n    /**\n     * A reference to the molecule curently being displayed on the screen.\n     * @type {object}\n     */\n    this.currentMolecule;\n    /**\n     * A reference to logged in authenticated.\n     * @type {string}\n     */\n    this.currentUser;\n    /** \n          /** \n         * A reference to the selected repository name.\n         * @type {string}\n         */\n    this.currentRepoName;\n    /**\n     * A reference to the selected repository authenticated.\n     * @type {string}\n     */\n    this.currentRepo;\n    /**\n     * A reference to the repo that goes through loaded project().\n     * @type {string}\n     */\n    this.loadedRepo;\n    /**\n     * A reference to the top level molecule of the project.\n     * @type {object}\n     */\n    this.topLevelMolecule;\n\n    /**\n     * A flag to indicate if the program is running with a touch interface. Set in flowDraw.js.\n     * @type {boolean}\n     */\n    this.touchInterface = false;\n    /**\n     * The replicad object which is used to interact with the replicad worker.\n     * @type {object}\n     */\n    this.cad = null; //Set in flowCanvas\n    /**\n     * A total of the number of atoms in this project\n     * @type {integer}\n     */\n    this.totalAtomCount = 0;\n    /**\n     * A counter used during the loading process to keep track of how many atoms are still to be loaded.\n     * @type {integer}\n     */\n    this.numberOfAtomsToLoad = 0;\n    /**\n     * A flag to indicate if the project is a fork.\n     * @type {boolean}\n     */\n    this.fork = false;\n    /**\n     * A flag to indicate if command is pressed\n     * @type {boolean}\n     */\n    this.ctrlDown = false;\n    /**\n     * A variable to save array to be copied\n     * @type {array}\n     */\n    this.atomsSelected = [];\n    /**\n     * The size (in mm) of segments to use for circles.\n     * @type {number}\n     */\n    this.circleSegmentSize = 2;\n    /**\n     * A flag to indicate if a display value is currently being processed.\n     * @type {bool}\n     */\n    this.displayProcessing = false;\n    /**\n     * The function to call to cancel the processing of the prevous display value.\n     * @type {function}\n     */\n    this.cancelLastDisplayWorker = function () {};\n    /**\n     * A flag to indicate if a grid should be displayed behind the shape\n     * @type {boolean}\n     */\n    this.displayGrid = true;\n    /**\n     * A flag to indicate if the edges of the shape should be displayed.\n     * @type {boolean}\n     */\n    this.displayAxis = true;\n    /**\n     * A flag to indicate if the display should show axis.\n     * @type {boolean}\n     */\n    this.displayTriangles = true;\n    /**\n     * A flag to indicate if shortcuts should be displayed.\n     * @type {boolean}\n     */\n    this.displayShortcuts = false;\n    /**\n     * A flag to indicate if the faces of the shape should be displayed.\n     * @type {boolean}\n     */\n    this.displayEdges = true;\n    /**\n     * An array to keep track of recent molecule changes to allow undo to revert back recently deleted molecules.\n     * @type {array}\n     */\n    this.recentMoleculeRepresentation = [];\n\n    const math = create(all); //What does this do? I think it is used to evalue strings as math\n    /**\n     * An evaluator for strings as mathmatical equations which is sandboxed and secure.\n     * @type {function}\n     */\n    this.limitedEvaluate = math.evaluate;\n    this.lastClick;\n    math.import(\n      {\n        import: function () {\n          throw new Error(\"Function import is disabled\");\n        },\n        createUnit: function () {\n          throw new Error(\"Function createUnit is disabled\");\n        },\n        evaluate: function () {\n          throw new Error(\"Function evaluate is disabled\");\n        },\n        parse: function () {\n          throw new Error(\"Function parse is disabled\");\n        },\n        simplify: function () {\n          throw new Error(\"Function simplify is disabled\");\n        },\n        derivative: function () {\n          throw new Error(\"Function derivative is disabled\");\n        },\n      },\n      { override: true }\n    );\n  }\n\n  /**\n   * Snaps the given x,y coordinates to the nearest point within the canvas boundaries. Where x\n   * and y are width fraction and heigh fraction respectively.\n   * @param {} x\n   * @param {*} y\n   * @return a tuple of [snapped x position, snapped y position], both in fractional position\n   */\n  constrainToCanvasBorders(x, y) {\n    return [Math.max(0, Math.min(1, x)), Math.max(0, Math.min(1, y))];\n  }\n\n  /**\n   * Snaps the given x,y coordinates to the nearest point within the canvas boundaries. Where x\n   * and y are measuring pixels from the top-left of the canvas.\n   * @param {} xPixels\n   * @param {*} yPixels\n   * @return a tuple of [snapped x position, snapped y position], both in pixels\n   */\n  constrainToCanvasBordersPixels(xPixels, yPixels) {\n    return [\n      Math.max(0, Math.min(this.canvas.current.width, xPixels)),\n      Math.max(0, Math.min(this.canvas.current.height, yPixels)),\n    ];\n  }\n\n  /**\n   * A function to generate a pixel value for 0-1 location on screen depending on screen width.\n   * @param {number} width\n   */\n  widthToPixels(width) {\n    let pixels = this.canvas.current.width * width;\n    return pixels;\n  }\n  /**\n   * A function to generate a 0-1 value from pixels for location on screen depending on screen width.\n   * @param {number} width\n   */\n  pixelsToWidth(pixels) {\n    let width = 1 / (this.canvas.current.width / pixels);\n    return width;\n  }\n  /**\n   * Convert from a fractional height value to a number of pixels.\n   * @param {number} width\n   */\n  heightToPixels(height) {\n    let pixels = this.canvas.current.height * height;\n    return pixels;\n  }\n\n  /**\n   * Convert from a pixel position or distance to a fraction of the page height between 0 and 1 inclusive.\n   * @param {number} width\n   */\n  pixelsToHeight(pixels) {\n    let height = 1 / (this.canvas.current.height / pixels);\n    return height;\n  }\n\n  /**\n   * A function to encode strings that contain characters outside of latin range so they can pass through btoa\n   * @param {str} The string to encode\n   */\n  toBinaryStr(str) {\n    const encoder = new TextEncoder();\n    // 1: split the UTF-16 string into an array of bytes\n    const charCodes = encoder.encode(str);\n    // 2: concatenate byte data to create a binary string\n    return String.fromCharCode(...charCodes);\n  }\n\n  /**\n   * A function which reads the value of a unique ID and passes to display\n   * @param {string} The unique ID to read from\n   */\n  writeToDisplay(id, resetView = false) {\n    console.log(\"Write to display not set\"); //This is a placedholder. It is created in flowCanvas.js\n  }\n\n  /**\n   * A function to generate a unique ID value.\n   */\n  generateUniqueID() {\n    const dateString = new Date().getTime();\n    const randomness = Math.floor(Math.random() * 1000);\n    const newID = dateString + randomness;\n    return newID;\n  }\n\n  /**\n   * A function to avoid repeating input names in a molecule\n   */\n  incrementVariableName(varName, molecule) {\n    if (molecule.inputs.find((o) => o.name === varName)) {\n      // Find the last number in the variable name\n      let lastNumber = varName.match(/\\d+(?=\\D*$)/);\n\n      // Increment the number by 1\n      const incrementedNumber = parseInt(lastNumber[0]) + 1;\n\n      // Replace the last occurrence of the number in the variable name with the incremented number\n      const incrementedVarName = varName.replace(\n        new RegExp(lastNumber[0] + \"(?=D*$)\"),\n        incrementedNumber\n      );\n      return this.incrementVariableName(incrementedVarName, molecule);\n    } else {\n      return varName;\n    }\n  }\n  /**\n   * Computes the distance between two points on a plane. This is a duplicate of the one in utils which should probably be deleted.\n   * @param {number} x1 - The x cordinate of the first point.\n   * @param {number} x2 - The x cordinate of the second point.\n   * @param {number} y1 - The y cordinate of the first point.\n   * @param {number} y2 - The y cordinate of the second point.\n   */\n  distBetweenPoints(x1, x2, y1, y2) {\n    var a2 = Math.pow(x1 - x2, 2);\n    var b2 = Math.pow(y1 - y2, 2);\n    var dist = Math.sqrt(a2 + b2);\n\n    return dist;\n  }\n}\n\n/**\n * Because we want global variables to be the same every time it is imported we export an instance of global variables instead of the constructor.\n */\nexport default new GlobalVariables();\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/globalvariables.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 162,
    "kind": "class",
    "name": "GlobalVariables",
    "memberof": "src/js/globalvariables.js",
    "static": true,
    "longname": "src/js/globalvariables.js~GlobalVariables",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/globalvariables.js",
    "importStyle": null,
    "description": "This class defines things which are made available to all objects which import it. It is a singlton which means that each time it is imported the same instance is made available so if it is written to in one place, it can be read somewhere else.",
    "lineNumber": 38,
    "pseudoExport": true,
    "interface": false
  },
  {
    "__docId__": 163,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#constructor",
    "access": "public",
    "description": "The constructor creates a new instance of the Global Variables object.",
    "lineNumber": 42
  },
  {
    "__docId__": 164,
    "kind": "member",
    "name": "canvas",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#canvas",
    "access": "public",
    "description": "The canvas object on which the atoms are drawn.",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "c",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#c",
    "access": "public",
    "description": "The 2D reference to the canvas object on which the atoms are drawn.",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "availableTypes",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#availableTypes",
    "access": "public",
    "description": "An array of all of the available types of atoms which can be placed with a right click.",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "touchInterface",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#touchInterface",
    "access": "public",
    "description": "A flag to indicate if the program is running with a touch interface. Set in flowDraw.js.",
    "lineNumber": 206,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "cad",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#cad",
    "access": "public",
    "description": "The replicad object which is used to interact with the replicad worker.",
    "lineNumber": 211,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "totalAtomCount",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#totalAtomCount",
    "access": "public",
    "description": "A total of the number of atoms in this project",
    "lineNumber": 216,
    "type": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "numberOfAtomsToLoad",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#numberOfAtomsToLoad",
    "access": "public",
    "description": "A counter used during the loading process to keep track of how many atoms are still to be loaded.",
    "lineNumber": 221,
    "type": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 171,
    "kind": "member",
    "name": "fork",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#fork",
    "access": "public",
    "description": "A flag to indicate if the project is a fork.",
    "lineNumber": 226,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 172,
    "kind": "member",
    "name": "ctrlDown",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#ctrlDown",
    "access": "public",
    "description": "A flag to indicate if command is pressed",
    "lineNumber": 231,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 173,
    "kind": "member",
    "name": "atomsSelected",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#atomsSelected",
    "access": "public",
    "description": "A variable to save array to be copied",
    "lineNumber": 236,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 174,
    "kind": "member",
    "name": "circleSegmentSize",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#circleSegmentSize",
    "access": "public",
    "description": "The size (in mm) of segments to use for circles.",
    "lineNumber": 241,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "displayProcessing",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#displayProcessing",
    "access": "public",
    "description": "A flag to indicate if a display value is currently being processed.",
    "lineNumber": 246,
    "type": {
      "nullable": null,
      "types": [
        "bool"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 176,
    "kind": "member",
    "name": "displayGrid",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#displayGrid",
    "access": "public",
    "description": "A flag to indicate if a grid should be displayed behind the shape",
    "lineNumber": 256,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 177,
    "kind": "member",
    "name": "displayAxis",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#displayAxis",
    "access": "public",
    "description": "A flag to indicate if the edges of the shape should be displayed.",
    "lineNumber": 261,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 178,
    "kind": "member",
    "name": "displayTriangles",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#displayTriangles",
    "access": "public",
    "description": "A flag to indicate if the display should show axis.",
    "lineNumber": 266,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "displayShortcuts",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#displayShortcuts",
    "access": "public",
    "description": "A flag to indicate if shortcuts should be displayed.",
    "lineNumber": 271,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "displayEdges",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#displayEdges",
    "access": "public",
    "description": "A flag to indicate if the faces of the shape should be displayed.",
    "lineNumber": 276,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "recentMoleculeRepresentation",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#recentMoleculeRepresentation",
    "access": "public",
    "description": "An array to keep track of recent molecule changes to allow undo to revert back recently deleted molecules.",
    "lineNumber": 281,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "limitedEvaluate",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#limitedEvaluate",
    "access": "public",
    "description": "An evaluator for strings as mathmatical equations which is sandboxed and secure.",
    "lineNumber": 288,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "constrainToCanvasBorders",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#constrainToCanvasBorders",
    "access": "public",
    "description": "Snaps the given x,y coordinates to the nearest point within the canvas boundaries. Where x\nand y are width fraction and heigh fraction respectively.",
    "lineNumber": 322,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "a tuple of [snapped x position, snapped y position], both in fractional position"
    }
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "constrainToCanvasBordersPixels",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#constrainToCanvasBordersPixels",
    "access": "public",
    "description": "Snaps the given x,y coordinates to the nearest point within the canvas boundaries. Where x\nand y are measuring pixels from the top-left of the canvas.",
    "lineNumber": 333,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "yPixels",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "a tuple of [snapped x position, snapped y position], both in pixels"
    }
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "widthToPixels",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#widthToPixels",
    "access": "public",
    "description": "A function to generate a pixel value for 0-1 location on screen depending on screen width.",
    "lineNumber": 344,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "pixelsToWidth",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#pixelsToWidth",
    "access": "public",
    "description": "A function to generate a 0-1 value from pixels for location on screen depending on screen width.",
    "lineNumber": 352,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "heightToPixels",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#heightToPixels",
    "access": "public",
    "description": "Convert from a fractional height value to a number of pixels.",
    "lineNumber": 360,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "pixelsToHeight",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#pixelsToHeight",
    "access": "public",
    "description": "Convert from a pixel position or distance to a fraction of the page height between 0 and 1 inclusive.",
    "lineNumber": 369,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "toBinaryStr",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#toBinaryStr",
    "access": "public",
    "description": "A function to encode strings that contain characters outside of latin range so they can pass through btoa",
    "lineNumber": 378,
    "params": [
      {
        "nullable": null,
        "types": [
          "str"
        ],
        "spread": false,
        "optional": false,
        "name": "The",
        "description": "string to encode"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "writeToDisplay",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#writeToDisplay",
    "access": "public",
    "description": "A function which reads the value of a unique ID and passes to display",
    "lineNumber": 390,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "The",
        "description": "unique ID to read from"
      }
    ],
    "return": null
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "generateUniqueID",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#generateUniqueID",
    "access": "public",
    "description": "A function to generate a unique ID value.",
    "lineNumber": 397,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "incrementVariableName",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#incrementVariableName",
    "access": "public",
    "description": "A function to avoid repeating input names in a molecule",
    "lineNumber": 407,
    "params": [
      {
        "name": "varName",
        "types": [
          "*"
        ]
      },
      {
        "name": "molecule",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "distBetweenPoints",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#distBetweenPoints",
    "access": "public",
    "description": "Computes the distance between two points on a plane. This is a duplicate of the one in utils which should probably be deleted.",
    "lineNumber": 432,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": "The x cordinate of the first point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x2",
        "description": "The x cordinate of the second point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y1",
        "description": "The y cordinate of the first point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y2",
        "description": "The y cordinate of the second point."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "variable",
    "name": "globalVariables",
    "memberof": "src/js/globalvariables.js",
    "static": true,
    "longname": "src/js/globalvariables.js~globalVariables",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/globalvariables.js",
    "importStyle": "globalVariables",
    "description": "Because we want global variables to be the same every time it is imported we export an instance of global variables instead of the constructor.",
    "lineNumber": 444,
    "type": {
      "types": [
        "src/js/globalvariables.js~GlobalVariables"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "file",
    "name": "src/js/licenseOptions.js",
    "content": "/**\n * This class defines the available default licenses when creating a new project\n */\nconst licenses = {\n  CC0: `Creative Commons Legal Code\n\nCC0 1.0 Universal\n\n    CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE\n    LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN\n    ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS\n    INFORMATION ON AN \"AS-IS\" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES\n    REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS\n    PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM\n    THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED\n    HEREUNDER.\n\nStatement of Purpose\n\nThe laws of most jurisdictions throughout the world automatically confer\nexclusive Copyright and Related Rights (defined below) upon the creator\nand subsequent owner(s) (each and all, an \"owner\") of an original work of\nauthorship and/or a database (each, a \"Work\").\n\nCertain owners wish to permanently relinquish those rights to a Work for\nthe purpose of contributing to a commons of creative, cultural and\nscientific works (\"Commons\") that the public can reliably and without fear\nof later claims of infringement build upon, modify, incorporate in other\nworks, reuse and redistribute as freely as possible in any form whatsoever\nand for any purposes, including without limitation commercial purposes.\nThese owners may contribute to the Commons to promote the ideal of a free\nculture and the further production of creative, cultural and scientific\nworks, or to gain reputation or greater distribution for their Work in\npart through the use and efforts of others.\n\nFor these and/or other purposes and motivations, and without any\nexpectation of additional consideration or compensation, the person\nassociating CC0 with a Work (the \"Affirmer\"), to the extent that he or she\nis an owner of Copyright and Related Rights in the Work, voluntarily\nelects to apply CC0 to the Work and publicly distribute the Work under its\nterms, with knowledge of his or her Copyright and Related Rights in the\nWork and the meaning and intended legal effect of CC0 on those rights.\n\n1. Copyright and Related Rights. A Work made available under CC0 may be\nprotected by copyright and related or neighboring rights (\"Copyright and\nRelated Rights\"). Copyright and Related Rights include, but are not\nlimited to, the following:\n\n  i. the right to reproduce, adapt, distribute, perform, display,\n     communicate, and translate a Work;\n ii. moral rights retained by the original author(s) and/or performer(s);\niii. publicity and privacy rights pertaining to a person's image or\n     likeness depicted in a Work;\n iv. rights protecting against unfair competition in regards to a Work,\n     subject to the limitations in paragraph 4(a), below;\n  v. rights protecting the extraction, dissemination, use and reuse of data\n     in a Work;\n vi. database rights (such as those arising under Directive 96/9/EC of the\n     European Parliament and of the Council of 11 March 1996 on the legal\n     protection of databases, and under any national implementation\n     thereof, including any amended or successor version of such\n     directive); and\nvii. other similar, equivalent or corresponding rights throughout the\n     world based on applicable law or treaty, and any national\n     implementations thereof.\n\n2. Waiver. To the greatest extent permitted by, but not in contravention\nof, applicable law, Affirmer hereby overtly, fully, permanently,\nirrevocably and unconditionally waives, abandons, and surrenders all of\nAffirmer's Copyright and Related Rights and associated claims and causes\nof action, whether now known or unknown (including existing as well as\nfuture claims and causes of action), in the Work (i) in all territories\nworldwide, (ii) for the maximum duration provided by applicable law or\ntreaty (including future time extensions), (iii) in any current or future\nmedium and for any number of copies, and (iv) for any purpose whatsoever,\nincluding without limitation commercial, advertising or promotional\npurposes (the \"Waiver\"). Affirmer makes the Waiver for the benefit of each\nmember of the public at large and to the detriment of Affirmer's heirs and\nsuccessors, fully intending that such Waiver shall not be subject to\nrevocation, rescission, cancellation, termination, or any other legal or\nequitable action to disrupt the quiet enjoyment of the Work by the public\nas contemplated by Affirmer's express Statement of Purpose.\n\n3. Public License Fallback. Should any part of the Waiver for any reason\nbe judged legally invalid or ineffective under applicable law, then the\nWaiver shall be preserved to the maximum extent permitted taking into\naccount Affirmer's express Statement of Purpose. In addition, to the\nextent the Waiver is so judged Affirmer hereby grants to each affected\nperson a royalty-free, non transferable, non sublicensable, non exclusive,\nirrevocable and unconditional license to exercise Affirmer's Copyright and\nRelated Rights in the Work (i) in all territories worldwide, (ii) for the\nmaximum duration provided by applicable law or treaty (including future\ntime extensions), (iii) in any current or future medium and for any number\nof copies, and (iv) for any purpose whatsoever, including without\nlimitation commercial, advertising or promotional purposes (the\n\"License\"). The License shall be deemed effective as of the date CC0 was\napplied by Affirmer to the Work. Should any part of the License for any\nreason be judged legally invalid or ineffective under applicable law, such\npartial invalidity or ineffectiveness shall not invalidate the remainder\nof the License, and in such case Affirmer hereby affirms that he or she\nwill not (i) exercise any of his or her remaining Copyright and Related\nRights in the Work or (ii) assert any associated claims and causes of\naction with respect to the Work, in either case contrary to Affirmer's\nexpress Statement of Purpose.\n\n4. Limitations and Disclaimers.\n\n a. No trademark or patent rights held by Affirmer are waived, abandoned,\n    surrendered, licensed or otherwise affected by this document.\n b. Affirmer offers the Work as-is and makes no representations or\n    warranties of any kind concerning the Work, express, implied,\n    statutory or otherwise, including without limitation warranties of\n    title, merchantability, fitness for a particular purpose, non\n    infringement, or the absence of latent or other defects, accuracy, or\n    the present or absence of errors, whether or not discoverable, all to\n    the greatest extent permissible under applicable law.\n c. Affirmer disclaims responsibility for clearing rights of other persons\n    that may apply to the Work or any use thereof, including without\n    limitation any person's Copyright and Related Rights in the Work.\n    Further, Affirmer disclaims responsibility for obtaining any necessary\n    consents, permissions or other rights required for any use of the\n    Work.\n d. Affirmer understands and acknowledges that Creative Commons is not a\n    party to this document and has no duty or obligation with respect to\n    this CC0 or use of the Work.`,\n\n  \"CC-BY\": `Attribution 4.0 International\n\n=======================================================================\n\nCreative Commons Corporation (\"Creative Commons\") is not a law firm and\ndoes not provide legal services or legal advice. Distribution of\nCreative Commons public licenses does not create a lawyer-client or\nother relationship. Creative Commons makes its licenses and related\ninformation available on an \"as-is\" basis. Creative Commons gives no\nwarranties regarding its licenses, any material licensed under their\nterms and conditions, or any related information. Creative Commons\ndisclaims all liability for damages resulting from their use to the\nfullest extent possible.\n\nUsing Creative Commons Public Licenses\n\nCreative Commons public licenses provide a standard set of terms and\nconditions that creators and other rights holders may use to share\noriginal works of authorship and other material subject to copyright\nand certain other rights specified in the public license below. The\nfollowing considerations are for informational purposes only, are not\nexhaustive, and do not form part of our licenses.\n\n     Considerations for licensors: Our public licenses are\n     intended for use by those authorized to give the public\n     permission to use material in ways otherwise restricted by\n     copyright and certain other rights. Our licenses are\n     irrevocable. Licensors should read and understand the terms\n     and conditions of the license they choose before applying it.\n     Licensors should also secure all rights necessary before\n     applying our licenses so that the public can reuse the\n     material as expected. Licensors should clearly mark any\n     material not subject to the license. This includes other CC-\n     licensed material, or material used under an exception or\n     limitation to copyright. More considerations for licensors:\n\twiki.creativecommons.org/Considerations_for_licensors\n\n     Considerations for the public: By using one of our public\n     licenses, a licensor grants the public permission to use the\n     licensed material under specified terms and conditions. If\n     the licensor's permission is not necessary for any reason--for\n     example, because of any applicable exception or limitation to\n     copyright--then that use is not regulated by the license. Our\n     licenses grant only permissions under copyright and certain\n     other rights that a licensor has authority to grant. Use of\n     the licensed material may still be restricted for other\n     reasons, including because others have copyright or other\n     rights in the material. A licensor may make special requests,\n     such as asking that all changes be marked or described.\n     Although not required by our licenses, you are encouraged to\n     respect those requests where reasonable. More_considerations\n     for the public:\n\twiki.creativecommons.org/Considerations_for_licensees\n\n=======================================================================\n\nCreative Commons Attribution 4.0 International Public License\n\nBy exercising the Licensed Rights (defined below), You accept and agree\nto be bound by the terms and conditions of this Creative Commons\nAttribution 4.0 International Public License (\"Public License\"). To the\nextent this Public License may be interpreted as a contract, You are\ngranted the Licensed Rights in consideration of Your acceptance of\nthese terms and conditions, and the Licensor grants You such rights in\nconsideration of benefits the Licensor receives from making the\nLicensed Material available under these terms and conditions.\n\n\nSection 1 -- Definitions.\n\n  a. Adapted Material means material subject to Copyright and Similar\n     Rights that is derived from or based upon the Licensed Material\n     and in which the Licensed Material is translated, altered,\n     arranged, transformed, or otherwise modified in a manner requiring\n     permission under the Copyright and Similar Rights held by the\n     Licensor. For purposes of this Public License, where the Licensed\n     Material is a musical work, performance, or sound recording,\n     Adapted Material is always produced where the Licensed Material is\n     synched in timed relation with a moving image.\n\n  b. Adapter's License means the license You apply to Your Copyright\n     and Similar Rights in Your contributions to Adapted Material in\n     accordance with the terms and conditions of this Public License.\n\n  c. Copyright and Similar Rights means copyright and/or similar rights\n     closely related to copyright including, without limitation,\n     performance, broadcast, sound recording, and Sui Generis Database\n     Rights, without regard to how the rights are labeled or\n     categorized. For purposes of this Public License, the rights\n     specified in Section 2(b)(1)-(2) are not Copyright and Similar\n     Rights.\n\n  d. Effective Technological Measures means those measures that, in the\n     absence of proper authority, may not be circumvented under laws\n     fulfilling obligations under Article 11 of the WIPO Copyright\n     Treaty adopted on December 20, 1996, and/or similar international\n     agreements.\n\n  e. Exceptions and Limitations means fair use, fair dealing, and/or\n     any other exception or limitation to Copyright and Similar Rights\n     that applies to Your use of the Licensed Material.\n\n  f. Licensed Material means the artistic or literary work, database,\n     or other material to which the Licensor applied this Public\n     License.\n\n  g. Licensed Rights means the rights granted to You subject to the\n     terms and conditions of this Public License, which are limited to\n     all Copyright and Similar Rights that apply to Your use of the\n     Licensed Material and that the Licensor has authority to license.\n\n  h. Licensor means the individual(s) or entity(ies) granting rights\n     under this Public License.\n\n  i. Share means to provide material to the public by any means or\n     process that requires permission under the Licensed Rights, such\n     as reproduction, public display, public performance, distribution,\n     dissemination, communication, or importation, and to make material\n     available to the public including in ways that members of the\n     public may access the material from a place and at a time\n     individually chosen by them.\n\n  j. Sui Generis Database Rights means rights other than copyright\n     resulting from Directive 96/9/EC of the European Parliament and of\n     the Council of 11 March 1996 on the legal protection of databases,\n     as amended and/or succeeded, as well as other essentially\n     equivalent rights anywhere in the world.\n\n  k. You means the individual or entity exercising the Licensed Rights\n     under this Public License. Your has a corresponding meaning.\n\n\nSection 2 -- Scope.\n\n  a. License grant.\n\n       1. Subject to the terms and conditions of this Public License,\n          the Licensor hereby grants You a worldwide, royalty-free,\n          non-sublicensable, non-exclusive, irrevocable license to\n          exercise the Licensed Rights in the Licensed Material to:\n\n            a. reproduce and Share the Licensed Material, in whole or\n               in part; and\n\n            b. produce, reproduce, and Share Adapted Material.\n\n       2. Exceptions and Limitations. For the avoidance of doubt, where\n          Exceptions and Limitations apply to Your use, this Public\n          License does not apply, and You do not need to comply with\n          its terms and conditions.\n\n       3. Term. The term of this Public License is specified in Section\n          6(a).\n\n       4. Media and formats; technical modifications allowed. The\n          Licensor authorizes You to exercise the Licensed Rights in\n          all media and formats whether now known or hereafter created,\n          and to make technical modifications necessary to do so. The\n          Licensor waives and/or agrees not to assert any right or\n          authority to forbid You from making technical modifications\n          necessary to exercise the Licensed Rights, including\n          technical modifications necessary to circumvent Effective\n          Technological Measures. For purposes of this Public License,\n          simply making modifications authorized by this Section 2(a)\n          (4) never produces Adapted Material.\n\n       5. Downstream recipients.\n\n            a. Offer from the Licensor -- Licensed Material. Every\n               recipient of the Licensed Material automatically\n               receives an offer from the Licensor to exercise the\n               Licensed Rights under the terms and conditions of this\n               Public License.\n\n            b. No downstream restrictions. You may not offer or impose\n               any additional or different terms or conditions on, or\n               apply any Effective Technological Measures to, the\n               Licensed Material if doing so restricts exercise of the\n               Licensed Rights by any recipient of the Licensed\n               Material.\n\n       6. No endorsement. Nothing in this Public License constitutes or\n          may be construed as permission to assert or imply that You\n          are, or that Your use of the Licensed Material is, connected\n          with, or sponsored, endorsed, or granted official status by,\n          the Licensor or others designated to receive attribution as\n          provided in Section 3(a)(1)(A)(i).\n\n  b. Other rights.\n\n       1. Moral rights, such as the right of integrity, are not\n          licensed under this Public License, nor are publicity,\n          privacy, and/or other similar personality rights; however, to\n          the extent possible, the Licensor waives and/or agrees not to\n          assert any such rights held by the Licensor to the limited\n          extent necessary to allow You to exercise the Licensed\n          Rights, but not otherwise.\n\n       2. Patent and trademark rights are not licensed under this\n          Public License.\n\n       3. To the extent possible, the Licensor waives any right to\n          collect royalties from You for the exercise of the Licensed\n          Rights, whether directly or through a collecting society\n          under any voluntary or waivable statutory or compulsory\n          licensing scheme. In all other cases the Licensor expressly\n          reserves any right to collect such royalties.\n\n\nSection 3 -- License Conditions.\n\nYour exercise of the Licensed Rights is expressly made subject to the\nfollowing conditions.\n\n  a. Attribution.\n\n       1. If You Share the Licensed Material (including in modified\n          form), You must:\n\n            a. retain the following if it is supplied by the Licensor\n               with the Licensed Material:\n\n                 i. identification of the creator(s) of the Licensed\n                    Material and any others designated to receive\n                    attribution, in any reasonable manner requested by\n                    the Licensor (including by pseudonym if\n                    designated);\n\n                ii. a copyright notice;\n\n               iii. a notice that refers to this Public License;\n\n                iv. a notice that refers to the disclaimer of\n                    warranties;\n\n                 v. a URI or hyperlink to the Licensed Material to the\n                    extent reasonably practicable;\n\n            b. indicate if You modified the Licensed Material and\n               retain an indication of any previous modifications; and\n\n            c. indicate the Licensed Material is licensed under this\n               Public License, and include the text of, or the URI or\n               hyperlink to, this Public License.\n\n       2. You may satisfy the conditions in Section 3(a)(1) in any\n          reasonable manner based on the medium, means, and context in\n          which You Share the Licensed Material. For example, it may be\n          reasonable to satisfy the conditions by providing a URI or\n          hyperlink to a resource that includes the required\n          information.\n\n       3. If requested by the Licensor, You must remove any of the\n          information required by Section 3(a)(1)(A) to the extent\n          reasonably practicable.\n\n       4. If You Share Adapted Material You produce, the Adapter's\n          License You apply must not prevent recipients of the Adapted\n          Material from complying with this Public License.\n\n\nSection 4 -- Sui Generis Database Rights.\n\nWhere the Licensed Rights include Sui Generis Database Rights that\napply to Your use of the Licensed Material:\n\n  a. for the avoidance of doubt, Section 2(a)(1) grants You the right\n     to extract, reuse, reproduce, and Share all or a substantial\n     portion of the contents of the database;\n\n  b. if You include all or a substantial portion of the database\n     contents in a database in which You have Sui Generis Database\n     Rights, then the database in which You have Sui Generis Database\n     Rights (but not its individual contents) is Adapted Material; and\n\n  c. You must comply with the conditions in Section 3(a) if You Share\n     all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not\nreplace Your obligations under this Public License where the Licensed\nRights include other Copyright and Similar Rights.\n\n\nSection 5 -- Disclaimer of Warranties and Limitation of Liability.\n\n  a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE\n     EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS\n     AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF\n     ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,\n     IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,\n     WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR\n     PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,\n     ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT\n     KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT\n     ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\n\n  b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE\n     TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,\n     NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,\n     INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,\n     COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR\n     USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN\n     ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR\n     DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR\n     IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\n\n  c. The disclaimer of warranties and limitation of liability provided\n     above shall be interpreted in a manner that, to the extent\n     possible, most closely approximates an absolute disclaimer and\n     waiver of all liability.\n\n\nSection 6 -- Term and Termination.\n\n  a. This Public License applies for the term of the Copyright and\n     Similar Rights licensed here. However, if You fail to comply with\n     this Public License, then Your rights under this Public License\n     terminate automatically.\n\n  b. Where Your right to use the Licensed Material has terminated under\n     Section 6(a), it reinstates:\n\n       1. automatically as of the date the violation is cured, provided\n          it is cured within 30 days of Your discovery of the\n          violation; or\n\n       2. upon express reinstatement by the Licensor.\n\n     For the avoidance of doubt, this Section 6(b) does not affect any\n     right the Licensor may have to seek remedies for Your violations\n     of this Public License.\n\n  c. For the avoidance of doubt, the Licensor may also offer the\n     Licensed Material under separate terms or conditions or stop\n     distributing the Licensed Material at any time; however, doing so\n     will not terminate this Public License.\n\n  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public\n     License.\n\n\nSection 7 -- Other Terms and Conditions.\n\n  a. The Licensor shall not be bound by any additional or different\n     terms or conditions communicated by You unless expressly agreed.\n\n  b. Any arrangements, understandings, or agreements regarding the\n     Licensed Material not stated herein are separate from and\n     independent of the terms and conditions of this Public License.\n\n\nSection 8 -- Interpretation.\n\n  a. For the avoidance of doubt, this Public License does not, and\n     shall not be interpreted to, reduce, limit, restrict, or impose\n     conditions on any use of the Licensed Material that could lawfully\n     be made without permission under this Public License.\n\n  b. To the extent possible, if any provision of this Public License is\n     deemed unenforceable, it shall be automatically reformed to the\n     minimum extent necessary to make it enforceable. If the provision\n     cannot be reformed, it shall be severed from this Public License\n     without affecting the enforceability of the remaining terms and\n     conditions.\n\n  c. No term or condition of this Public License will be waived and no\n     failure to comply consented to unless expressly agreed to by the\n     Licensor.\n\n  d. Nothing in this Public License constitutes or may be interpreted\n     as a limitation upon, or waiver of, any privileges and immunities\n     that apply to the Licensor or You, including from the legal\n     processes of any jurisdiction or authority.\n\n\n=======================================================================\n\nCreative Commons is not a party to its public\nlicenses. Notwithstanding, Creative Commons may elect to apply one of\nits public licenses to material it publishes and in those instances\nwill be considered the “Licensor.” The text of the Creative Commons\npublic licenses is dedicated to the public domain under the CC0 Public\nDomain Dedication. Except for the limited purpose of indicating that\nmaterial is shared under a Creative Commons public license or as\notherwise permitted by the Creative Commons policies published at\ncreativecommons.org/policies, Creative Commons does not authorize the\nuse of the trademark \"Creative Commons\" or any other trademark or logo\nof Creative Commons without its prior written consent including,\nwithout limitation, in connection with any unauthorized modifications\nto any of its public licenses or any other arrangements,\nunderstandings, or agreements concerning use of licensed material. For\nthe avoidance of doubt, this paragraph does not form part of the\npublic licenses.\n\nCreative Commons may be contacted at creativecommons.org.`,\n};\n\nexport { licenses };\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/licenseOptions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 196,
    "kind": "variable",
    "name": "licenses",
    "memberof": "src/js/licenseOptions.js",
    "static": true,
    "longname": "src/js/licenseOptions.js~licenses",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/licenseOptions.js",
    "importStyle": "{licenses}",
    "description": "This class defines the available default licenses when creating a new project",
    "lineNumber": 4,
    "type": {
      "types": [
        "{\"CC0\": *, \"CC-BY\": *}"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "file",
    "name": "src/js/maslowTopics.js",
    "content": "const topics = [\n  { value: \"abundance-tool\", label: \"Abundance tool\" },\n  { value: \"examples\", label: \"Example\" },\n  { value: \"furniture\", label: \"Furniture\" },\n  { value: \"hardware\", label: \"Hardware\" },\n  { value: \"project\", label: \"Project\" },\n];\n\nexport default topics;\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/js/maslowTopics.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 198,
    "kind": "variable",
    "name": "topics",
    "memberof": "src/js/maslowTopics.js",
    "static": true,
    "longname": "src/js/maslowTopics.js~topics",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/js/maslowTopics.js",
    "importStyle": "topics",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "file",
    "name": "src/molecules/BOM.js",
    "content": "import Atom from \"../prototypes/atom.js\";\nimport GlobalVariables from \"../js/globalvariables.js\";\nimport { BOMEntry } from \"../js/BOM.js\";\nimport { re } from \"mathjs\";\n\n/**\n * The addBOMTag molecule type adds a tag containing information about a bill of materials item to the input geometry. The input geometry is not modified in any other way\n */\nexport default class AddBOMTag extends Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"Add BOM Tag\";\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.type = \"addBOMTag\";\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"Add BOM Tag\";\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description =\n      \"Adds a Bill Of Materials tag which appears in molecules containing this atom and in the GitHub project bill of materials.\";\n\n    /**\n     * The BOM item object created by this atom\n     * @type {string}\n     */\n    this.BOMitem = new BOMEntry();\n    /**\n     * This atom's radius as displayed on the screen is 1/65 width\n     * @type {number}\n     */\n    this.radius = 1 / 65;\n    /**\n     * This atom's height as drawn on the screen\n     */\n    this.height;\n\n    this.addIO(\"input\", \"geometry\", this, \"geometry\", null, false, true);\n    this.addIO(\"output\", \"geometry\", this, \"geometry\", null);\n\n    this.setValues(values);\n  }\n\n  /**\n   * Set the value to be the BOMitem\n   */\n  updateValue() {\n    super.updateValue();\n\n    if (this.inputs.every((x) => x.ready)) {\n      var inputID = this.findIOValue(\"geometry\");\n      var bomItem = this.BOMitem;\n\n      GlobalVariables.cad\n        .bom(this.uniqueID, inputID, bomItem)\n        .then(() => {\n          this.basicThreadValueProcessing();\n        })\n        .catch(this.alertingErrorHandler());\n    }\n  }\n\n  /**\n   * Draw the constant which is more rectangular than the regular shape.\n   */\n  draw() {\n    super.draw(\"rect\");\n\n    let pixelsX = GlobalVariables.widthToPixels(this.x);\n    let pixelsY = GlobalVariables.heightToPixels(this.y);\n    let pixelsRadius = GlobalVariables.widthToPixels(this.radius);\n\n    /**\n     * Relates height to radius\n     * @type {number}\n     */\n    this.height = pixelsRadius / 1.3;\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#484848\";\n    GlobalVariables.c.font = `${pixelsRadius / 1.5}px Work Sans Bold`;\n    GlobalVariables.c.fillText(\n      String.fromCharCode(0x0024, 0x0024, 0x0024),\n      pixelsX - pixelsRadius / 2,\n      pixelsY + this.height / 3\n    );\n    GlobalVariables.c.fill();\n    GlobalVariables.c.closePath();\n  }\n\n  /** Leva inputs for bom  */\n  createLevaInputs() {\n    let bomParams = {};\n    for (const key in this.BOMitem) {\n      bomParams[key] = {\n        value: this.BOMitem[key],\n        label: key,\n        disabled: false,\n        onChange: (value) => {\n          this.BOMitem[key] = value;\n          this.updateValue();\n        },\n      };\n    }\n    return bomParams;\n  }\n\n  /**\n   * Add the bom item to the saved object\n   */\n  serialize(values) {\n    //Save the readme text to the serial stream\n    var valuesObj = super.serialize(values);\n\n    valuesObj.BOMitem = Object.assign({}, this.BOMitem); //Makes a shallow copy to prevent issues when copy pasting\n\n    return valuesObj;\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/BOM.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 200,
    "kind": "class",
    "name": "AddBOMTag",
    "memberof": "src/molecules/BOM.js",
    "static": true,
    "longname": "src/molecules/BOM.js~AddBOMTag",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/BOM.js",
    "importStyle": "AddBOMTag",
    "description": "The addBOMTag molecule type adds a tag containing information about a bill of materials item to the input geometry. The input geometry is not modified in any other way",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 201,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/BOM.js~AddBOMTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/BOM.js~AddBOMTag#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 202,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/BOM.js~AddBOMTag",
    "static": false,
    "longname": "src/molecules/BOM.js~AddBOMTag#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 203,
    "kind": "member",
    "name": "type",
    "memberof": "src/molecules/BOM.js~AddBOMTag",
    "static": false,
    "longname": "src/molecules/BOM.js~AddBOMTag#type",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 204,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/BOM.js~AddBOMTag",
    "static": false,
    "longname": "src/molecules/BOM.js~AddBOMTag#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 205,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/BOM.js~AddBOMTag",
    "static": false,
    "longname": "src/molecules/BOM.js~AddBOMTag#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 206,
    "kind": "member",
    "name": "BOMitem",
    "memberof": "src/molecules/BOM.js~AddBOMTag",
    "static": false,
    "longname": "src/molecules/BOM.js~AddBOMTag#BOMitem",
    "access": "public",
    "description": "The BOM item object created by this atom",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 207,
    "kind": "member",
    "name": "radius",
    "memberof": "src/molecules/BOM.js~AddBOMTag",
    "static": false,
    "longname": "src/molecules/BOM.js~AddBOMTag#radius",
    "access": "public",
    "description": "This atom's radius as displayed on the screen is 1/65 width",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/BOM.js~AddBOMTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/BOM.js~AddBOMTag#updateValue",
    "access": "public",
    "description": "Set the value to be the BOMitem",
    "lineNumber": 63,
    "params": [],
    "return": null
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/BOM.js~AddBOMTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/BOM.js~AddBOMTag#draw",
    "access": "public",
    "description": "Draw the constant which is more rectangular than the regular shape.",
    "lineNumber": 82,
    "params": [],
    "return": null
  },
  {
    "__docId__": 210,
    "kind": "member",
    "name": "height",
    "memberof": "src/molecules/BOM.js~AddBOMTag",
    "static": false,
    "longname": "src/molecules/BOM.js~AddBOMTag#height",
    "access": "public",
    "description": "Relates height to radius",
    "lineNumber": 93,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "createLevaInputs",
    "memberof": "src/molecules/BOM.js~AddBOMTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/BOM.js~AddBOMTag#createLevaInputs",
    "access": "public",
    "description": "Leva inputs for bom",
    "lineNumber": 108,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/molecules/BOM.js~AddBOMTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/BOM.js~AddBOMTag#serialize",
    "access": "public",
    "description": "Add the bom item to the saved object",
    "lineNumber": 127,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "file",
    "name": "src/molecules/box.js",
    "content": "import Atom from \"../prototypes/atom\";\nimport GlobalVariables from \"../js/globalvariables.js\";\n\n/**\n * This class is used for selecting multiple atoms. Probably shouldn't be done like this.\n */\nexport default class Box extends Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.type = \"box\";\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"Box\";\n    /**\n     * This atom's value\n     * @type {object}\n     */\n    this.value = null;\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"Box\";\n    /**\n     * This atom's height\n     * @type {number}\n     */\n    this.height = 16;\n    /**\n     * This atom's radius\n     * @type {number}\n     */\n    this.radius = 1 / 75;\n\n    /**\n     * Mouse x position when moving\n     * @type {number}\n     */\n    this.endX;\n    /**\n     * Mouse y position when moving\n     * @type {number}\n     */\n    this.endY;\n\n    /**\n     * Value to save for start position of box\n     * @type {number}\n     */\n    this.startX;\n    /**\n     * Value to save for start position of box\n     * @type {number}\n     */\n    this.startY;\n\n    this.setValues(values);\n  }\n\n  /**\n   * Draw the select box shape on the screen.\n   */\n  draw() {\n    const xInPixels = GlobalVariables.widthToPixels(this.x);\n    const yInPixels = GlobalVariables.heightToPixels(this.y);\n\n    //if(GlobalVariables.ctrlDown){\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#80808080\";\n    GlobalVariables.c.rect(\n      xInPixels,\n      yInPixels,\n      this.endX - xInPixels,\n      this.endY - yInPixels\n    );\n    GlobalVariables.c.fill();\n    GlobalVariables.c.closePath();\n    //}\n  }\n\n  /**\n   * When mouse moves and Ctrl is down updates value for box width and height\n   */\n  mouseMove(x, y) {\n    // if(GlobalVariables.ctrlDown){\n    /**\n     * Sets new box end to click target\n     * @type {number}\n     */\n    this.endX = x;\n    /**\n     * Sets new box end to click target\n     * @type {number}\n     */\n    this.endY = y;\n    //}\n  }\n  /**\n   * Clears the drawing of box when clickUp and updates values for atom selection\n   */\n  clickUp(x, y) {\n    const xInPixels = GlobalVariables.widthToPixels(this.x);\n    const yInPixels = GlobalVariables.heightToPixels(this.y);\n    /**\n     * Sets start value to molecule position\n     * @type {number}\n     */\n    this.startX = xInPixels;\n    /**\n     * Sets end value to molecule position\n     * @type {number}\n     */\n    this.startY = yInPixels;\n\n    this.deleteNode(false, false);\n    this.parent.nodesOnTheScreen.forEach((atom) => {\n      atom.selectBox(this.startX, this.startY, x, y);\n    });\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/box.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 214,
    "kind": "class",
    "name": "Box",
    "memberof": "src/molecules/box.js",
    "static": true,
    "longname": "src/molecules/box.js~Box",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/box.js",
    "importStyle": "Box",
    "description": "This class is used for selecting multiple atoms. Probably shouldn't be done like this.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 215,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/box.js~Box",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/box.js~Box#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "type",
    "memberof": "src/molecules/box.js~Box",
    "static": false,
    "longname": "src/molecules/box.js~Box#type",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/box.js~Box",
    "static": false,
    "longname": "src/molecules/box.js~Box#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "value",
    "memberof": "src/molecules/box.js~Box",
    "static": false,
    "longname": "src/molecules/box.js~Box#value",
    "access": "public",
    "description": "This atom's value",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/box.js~Box",
    "static": false,
    "longname": "src/molecules/box.js~Box#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 220,
    "kind": "member",
    "name": "height",
    "memberof": "src/molecules/box.js~Box",
    "static": false,
    "longname": "src/molecules/box.js~Box#height",
    "access": "public",
    "description": "This atom's height",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 221,
    "kind": "member",
    "name": "radius",
    "memberof": "src/molecules/box.js~Box",
    "static": false,
    "longname": "src/molecules/box.js~Box#radius",
    "access": "public",
    "description": "This atom's radius",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/box.js~Box",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/box.js~Box#draw",
    "access": "public",
    "description": "Draw the select box shape on the screen.",
    "lineNumber": 74,
    "params": [],
    "return": null
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "mouseMove",
    "memberof": "src/molecules/box.js~Box",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/box.js~Box#mouseMove",
    "access": "public",
    "description": "When mouse moves and Ctrl is down updates value for box width and height",
    "lineNumber": 96,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 224,
    "kind": "member",
    "name": "endX",
    "memberof": "src/molecules/box.js~Box",
    "static": false,
    "longname": "src/molecules/box.js~Box#endX",
    "access": "public",
    "description": "Sets new box end to click target",
    "lineNumber": 102,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 225,
    "kind": "member",
    "name": "endY",
    "memberof": "src/molecules/box.js~Box",
    "static": false,
    "longname": "src/molecules/box.js~Box#endY",
    "access": "public",
    "description": "Sets new box end to click target",
    "lineNumber": 107,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "clickUp",
    "memberof": "src/molecules/box.js~Box",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/box.js~Box#clickUp",
    "access": "public",
    "description": "Clears the drawing of box when clickUp and updates values for atom selection",
    "lineNumber": 113,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 227,
    "kind": "member",
    "name": "startX",
    "memberof": "src/molecules/box.js~Box",
    "static": false,
    "longname": "src/molecules/box.js~Box#startX",
    "access": "public",
    "description": "Sets start value to molecule position",
    "lineNumber": 120,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 228,
    "kind": "member",
    "name": "startY",
    "memberof": "src/molecules/box.js~Box",
    "static": false,
    "longname": "src/molecules/box.js~Box#startY",
    "access": "public",
    "description": "Sets end value to molecule position",
    "lineNumber": 125,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 229,
    "kind": "file",
    "name": "src/molecules/circle.js",
    "content": "import Atom from \"../prototypes/atom\";\nimport GlobalVariables from \"../js/globalvariables.js\";\n\n/**\n * This class creates the circle atom.\n */\nexport default class Circle extends Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"Circle\";\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"Circle\";\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description = \"Creates a new circle.\";\n\n    this.addIO(\"input\", \"diameter\", this, \"number\", 10.0);\n    this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\n\n    this.setValues(values);\n  }\n\n  /**\n   * Starts propagation from this atom if it is not waiting for anything up stream.\n   */\n  beginPropagation(force = false) {\n    //Triggers inputs with nothing connected to begin propagation\n    this.inputs.forEach((input) => {\n      input.beginPropagation();\n    });\n  }\n\n  /**\n   * Draw the circle atom & icon.\n   */\n  draw() {\n    super.draw(); //Super call to draw the rest\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#949294\";\n    GlobalVariables.c.arc(\n      GlobalVariables.widthToPixels(this.x),\n      GlobalVariables.heightToPixels(this.y),\n      GlobalVariables.widthToPixels(this.radius / 2),\n      0,\n      Math.PI * 2,\n      false\n    );\n    //GlobalVariables.c.fill()\n    GlobalVariables.c.stroke();\n    GlobalVariables.c.closePath();\n  }\n\n  /**\n   * Update the value of the circle in worker.\n   */\n  updateValue() {\n    super.updateValue();\n    var diameter = this.findIOValue(\"diameter\");\n    GlobalVariables.cad\n      .circle(this.uniqueID, diameter)\n      .then(() => {\n        this.basicThreadValueProcessing();\n      })\n      .catch(this.alertingErrorHandler());\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/circle.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 230,
    "kind": "class",
    "name": "Circle",
    "memberof": "src/molecules/circle.js",
    "static": true,
    "longname": "src/molecules/circle.js~Circle",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/circle.js",
    "importStyle": "Circle",
    "description": "This class creates the circle atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 231,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/circle.js~Circle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/circle.js~Circle#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 232,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/circle.js~Circle",
    "static": false,
    "longname": "src/molecules/circle.js~Circle#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/circle.js~Circle",
    "static": false,
    "longname": "src/molecules/circle.js~Circle#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 234,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/circle.js~Circle",
    "static": false,
    "longname": "src/molecules/circle.js~Circle#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "beginPropagation",
    "memberof": "src/molecules/circle.js~Circle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/circle.js~Circle#beginPropagation",
    "access": "public",
    "description": "Starts propagation from this atom if it is not waiting for anything up stream.",
    "lineNumber": 40,
    "params": [
      {
        "name": "force",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/circle.js~Circle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/circle.js~Circle#draw",
    "access": "public",
    "description": "Draw the circle atom & icon.",
    "lineNumber": 50,
    "params": [],
    "return": null
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/circle.js~Circle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/circle.js~Circle#updateValue",
    "access": "public",
    "description": "Update the value of the circle in worker.",
    "lineNumber": 71,
    "params": [],
    "return": null
  },
  {
    "__docId__": 238,
    "kind": "file",
    "name": "src/molecules/code.js",
    "content": "import Atom from \"../prototypes/atom.js\";\n\nimport GlobalVariables from \"../js/globalvariables.js\";\nimport { button } from \"leva\";\n\n/**\n * The Code molecule type adds support for executing arbitrary jsxcad code.\n */\nexport default class Code extends Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"Code\";\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.atomType = \"Code\";\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description = \"Defines a Replicad code block.\";\n    /**\n     * The code contained within the atom stored as a string.\n     * @type {string}\n     */\n    this.code =\n      \"\\\n//Inputs:[input1, height];\\n\\\n\\n\\\nlet shape = drawRectangle(5,7)\\n\\\n\\n\\\nconst newPlane = new Plane().pivot(0, 'Y');\\n\\\n\\n\\\n return { geometry: [shape.sketchOnPlane(newPlane).extrude(7)], tags: [],\\n\\\n      color: '#A3CE5B',\\n\\\n      plane: newPlane}\\n\\\n\\n\\\n\\n\\\n    /**\\n\\\n    To Use the Code Atom, enter your inputs to the input list a.e Inputs:[shape, height]\\n\\\n    If your input is connected to another atom with a replicad geometry you can access its geometry by looking up its ID in your library. a.e library[Input1].geometry[0] \\n\\\n    Use any replicad available methods to modify your geometry. Learn more about all of the available methods at \\n\\\n    https://replicad.xyz/docs/introapp/UserGuide.html \\n\\\n    Return a replicad object that includes geometry, color, tags and plane. \\n\\\n\\n\\\n\\n\\\n    Example Code Atom:\\n\\\n\\n\\\n      Inputs:[shape, x];\\n\\\n\\n\\\n      let finalShape = library[shape].geometry[0].clone.translate[x,0,0]\\n\\\n\\n\\\n      return {geometry: finalShape, color: library[shape].color, plane: library[shape].plane, tags: library[shape].tags }\\n\\\n\\n\\\n      - See more examples at _______ \\n\\\n\\n\\\n\\n\\\n    */\\n\\\n\";\n\n    this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\n\n    this.setValues(values);\n\n    this.parseInputs(false);\n  }\n\n  /**\n   * Draw the code atom which has a code icon.\n   */\n  draw() {\n    super.draw(); //Super call to draw the rest\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#949294\";\n    GlobalVariables.c.font = `${GlobalVariables.widthToPixels(\n      this.radius\n    )}px Work Sans Bold`;\n    GlobalVariables.c.fillText(\n      \"</>\",\n      GlobalVariables.widthToPixels(this.x - this.radius / 1.5),\n      GlobalVariables.heightToPixels(this.y + this.radius * 1.5)\n    );\n  }\n\n  /**\n   * Begin propagation from this code atom if it has no inputs or if none of the inputs are connected.\n   */\n  beginPropagation() {\n    //If there are no inputs\n    if (this.inputs.length == 0) {\n      this.updateValue();\n    }\n\n    //If none of the inputs are connected\n    var connectedInput = false;\n    this.inputs.forEach((input) => {\n      if (input.connectors.length > 0) {\n        connectedInput = true;\n      }\n    });\n    if (!connectedInput) {\n      this.updateValue();\n    }\n  }\n\n  createLevaInputs() {\n    let inputParams = {};\n    /** Runs through active atom inputs and adds IO parameters to default param*/\n    if (this.inputs) {\n      this.inputs.map((input) => {\n        const checkConnector = () => {\n          return input.connectors.length > 0;\n        };\n\n        inputParams[this.uniqueID + input.name] = {\n          value: input.value,\n          label: input.name,\n          disabled: checkConnector(),\n          onChange: (value) => {\n            if (input.value !== value) {\n              input.setValue(value);\n              //this.sendToRender();\n            }\n          },\n        };\n      });\n      inputParams[\"Edit Code\"] = button(() => this.editCode());\n      inputParams[\"Save Code\"] = button(() => this.saveCode());\n      inputParams[\"Close Editor\"] = button(() => this.closeCode());\n      return inputParams;\n    }\n  }\n\n  /**\n   * Called when code editor save button is clicked. Updates the code and value of the atom.\n   */\n  updateCode(code) {\n    this.code = code;\n    this.updateValue();\n    this.sendToRender();\n  }\n\n  /**\n   * Grab the code as a text string and execute it.\n   */\n  updateValue(value) {\n    super.updateValue();\n    //Parse the inputs\n    this.parseInputs();\n\n    if (this.inputs.every((x) => x.ready)) {\n      var inputValues = [];\n      this.inputs.forEach((io) => {\n        if (io.connectors.length > 0 && io.type == \"input\") {\n          inputValues.push(io.getValue());\n        }\n      });\n      var argumentsArray = {};\n      this.inputs.forEach((input) => {\n        argumentsArray[input.name] = input.value;\n      });\n\n      GlobalVariables.cad\n        .code(this.uniqueID, this.code, argumentsArray)\n        .then((result) => {\n\n          if(result === true){ //Code atom returned geometry\n            this.basicThreadValueProcessing();\n          }\n          else{ //Code atom returned a number\n            this.customThreadValueProcessing(result);\n          }\n        })\n        .catch(this.alertingErrorHandler());\n    }\n  }\n\n  /**\n   * Override the standard basic thread processing function to allow passing of numbers or geometry depending on what we have\n  */\n  customThreadValueProcessing(returnedNumber) {\n    this.decreaseToProcessCountByOne();\n    this.clearAlert();\n    if (this.output) {\n      this.value = returnedNumber;\n      this.output.setValue(returnedNumber);\n      this.output.ready = true;\n    }\n    this.processing = false;\n  }\n\n  /**\n   * This function reads the string of inputs the user specifies and adds them to the atom.\n   */\n  parseInputs(ready = true) {\n    //Parse this.code for the line \"\\nmain(input1, input2....) and add those as inputs if needed\n    var variables = /Inputs:\\[\\s*([^)]+?)\\s*\\]/.exec(this.code);\n\n    if (variables) {\n      if (variables[1]) {\n        variables = variables[1].split(/\\s*,\\s*/);\n      }\n      let variableNames = [];\n      //Add any inputs which are needed\n      for (var variable in variables) {\n        variables[variable] = variables[variable].split(/\\s*=\\s*/);\n        let variableName = variables[variable][0];\n        variableNames.push(variableName);\n        let defaultVal = variables[variable][1] ? variables[variable][1] : 10;\n\n        if (!this.inputs.some((input) => input.Name === variableName)) {\n          this.addIO(\n            \"input\",\n            variableName,\n            this,\n            \"geometry\",\n            defaultVal,\n            ready\n          );\n        }\n      }\n\n      //Remove any inputs which are not needed\n      for (var input in this.inputs) {\n        if (!variableNames.includes(this.inputs[input].name)) {\n          this.removeIO(\"input\", this.inputs[input].name, this);\n        }\n      }\n    }\n  }\n\n  /**\n   * Edit the atom's code when it is double clicked\n   * @param {number} x - The X coordinate of the click\n   * @param {number} y - The Y coordinate of the click\n   */\n  doubleClick(x, y) {\n    //returns true if something was done with the click\n    let xInPixels = GlobalVariables.widthToPixels(this.x);\n    let yInPixels = GlobalVariables.heightToPixels(this.y);\n    var clickProcessed = false;\n\n    var distFromClick = GlobalVariables.distBetweenPoints(\n      x,\n      xInPixels,\n      y,\n      yInPixels\n    );\n\n    if (distFromClick < this.radius) {\n      this.editCode();\n      clickProcessed = true;\n    }\n\n    return clickProcessed;\n  }\n\n  /**\n   * Called to trigger editing the code atom\n   */\n  editCode() {\n    const codeWindow = document.getElementById(\"code-window\");\n    codeWindow.classList.remove(\"code-off\");\n  }\n\n  /**\n   * Called to trigger editing the code atom\n   */\n  saveCode() {\n    const saveCodeButton = document.getElementById(\"save-code-button\");\n    saveCodeButton.click();\n  }\n\n  /**\n   * Called to trigger editing the code atom\n   */\n  closeCode() {\n    const closeCodeButton = document.getElementById(\"close-code-button\");\n    closeCodeButton.click();\n  }\n\n  /**\n   * Save the input code to be loaded next time\n   */\n  serialize(values) {\n    //Save the readme text to the serial stream\n    var valuesObj = super.serialize(values);\n    valuesObj.codeVersion = 1;\n    valuesObj.code = this.code;\n\n    return valuesObj;\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/code.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 239,
    "kind": "class",
    "name": "Code",
    "memberof": "src/molecules/code.js",
    "static": true,
    "longname": "src/molecules/code.js~Code",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/code.js",
    "importStyle": "Code",
    "description": "The Code molecule type adds support for executing arbitrary jsxcad code.",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 240,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/code.js~Code",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/code.js~Code#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 241,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/code.js~Code",
    "static": false,
    "longname": "src/molecules/code.js~Code#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 242,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/code.js~Code",
    "static": false,
    "longname": "src/molecules/code.js~Code#atomType",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 243,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/code.js~Code",
    "static": false,
    "longname": "src/molecules/code.js~Code#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 244,
    "kind": "member",
    "name": "code",
    "memberof": "src/molecules/code.js~Code",
    "static": false,
    "longname": "src/molecules/code.js~Code#code",
    "access": "public",
    "description": "The code contained within the atom stored as a string.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/code.js~Code",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/code.js~Code#draw",
    "access": "public",
    "description": "Draw the code atom which has a code icon.",
    "lineNumber": 81,
    "params": [],
    "return": null
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "beginPropagation",
    "memberof": "src/molecules/code.js~Code",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/code.js~Code#beginPropagation",
    "access": "public",
    "description": "Begin propagation from this code atom if it has no inputs or if none of the inputs are connected.",
    "lineNumber": 99,
    "params": [],
    "return": null
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "createLevaInputs",
    "memberof": "src/molecules/code.js~Code",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/code.js~Code#createLevaInputs",
    "access": "public",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "updateCode",
    "memberof": "src/molecules/code.js~Code",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/code.js~Code#updateCode",
    "access": "public",
    "description": "Called when code editor save button is clicked. Updates the code and value of the atom.",
    "lineNumber": 148,
    "params": [
      {
        "name": "code",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/code.js~Code",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/code.js~Code#updateValue",
    "access": "public",
    "description": "Grab the code as a text string and execute it.",
    "lineNumber": 157,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "customThreadValueProcessing",
    "memberof": "src/molecules/code.js~Code",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/code.js~Code#customThreadValueProcessing",
    "access": "public",
    "description": "Override the standard basic thread processing function to allow passing of numbers or geometry depending on what we have",
    "lineNumber": 192,
    "params": [
      {
        "name": "returnedNumber",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 252,
    "kind": "member",
    "name": "value",
    "memberof": "src/molecules/code.js~Code",
    "static": false,
    "longname": "src/molecules/code.js~Code#value",
    "access": "public",
    "description": null,
    "lineNumber": 196,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "member",
    "name": "processing",
    "memberof": "src/molecules/code.js~Code",
    "static": false,
    "longname": "src/molecules/code.js~Code#processing",
    "access": "public",
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "parseInputs",
    "memberof": "src/molecules/code.js~Code",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/code.js~Code#parseInputs",
    "access": "public",
    "description": "This function reads the string of inputs the user specifies and adds them to the atom.",
    "lineNumber": 206,
    "params": [
      {
        "name": "ready",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": null
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "doubleClick",
    "memberof": "src/molecules/code.js~Code",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/code.js~Code#doubleClick",
    "access": "public",
    "description": "Edit the atom's code when it is double clicked",
    "lineNumber": 248,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The X coordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The Y coordinate of the click"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "editCode",
    "memberof": "src/molecules/code.js~Code",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/code.js~Code#editCode",
    "access": "public",
    "description": "Called to trigger editing the code atom",
    "lineNumber": 272,
    "params": [],
    "return": null
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "saveCode",
    "memberof": "src/molecules/code.js~Code",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/code.js~Code#saveCode",
    "access": "public",
    "description": "Called to trigger editing the code atom",
    "lineNumber": 280,
    "params": [],
    "return": null
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "closeCode",
    "memberof": "src/molecules/code.js~Code",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/code.js~Code#closeCode",
    "access": "public",
    "description": "Called to trigger editing the code atom",
    "lineNumber": 288,
    "params": [],
    "return": null
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/molecules/code.js~Code",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/code.js~Code#serialize",
    "access": "public",
    "description": "Save the input code to be loaded next time",
    "lineNumber": 296,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "file",
    "name": "src/molecules/color.js",
    "content": "import Atom from \"../prototypes/atom\";\n\nimport GlobalVariables from \"../js/globalvariables.js\";\n\n/**\n * This class creates the color atom which can be used to give a part a color.\n */\nexport default class Color extends Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"Color\";\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"Color\";\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description = \"Changes the color of the shape.\";\n\n    /**\n     * The index of the currently selected color option.\n     * @type {number}\n     */\n    this.selectedColorIndex = 0;\n\n    /**\n     * The color options to choose from\n     * @type {array}\n     */\n    this.colorOptions = {\n      Red: \"#FF9065\",\n      Orange: \"#FFB458\",\n      Yellow: \"#FFD600\",\n      Olive: \"#C7DF66\",\n      Teal: \"#71D1C2\",\n      \"Light Blue\": \"#75DBF2\",\n      Green: \"#A3CE5B\",\n      \"Lavender \": \"#CCABED\",\n      Brown: \"#CFAB7C\",\n      Pink: \"#FFB09D\",\n      Sand: \"#E2C66C\",\n      Clay: \"#C4D3AC\",\n      Blue: \"#91C8D5\",\n      \"Light Green\": \"#96E1BB\",\n      Purple: \"#ACAFDD\",\n      \"Light Purple\": \"#DFB1E8\",\n      Tan: \"#F5D3B6\",\n      \"Mauve \": \"#DBADA9\",\n      Grey: \"#BABABA\",\n      Black: \"#3C3C3C\",\n      White: \"#FFFCF7\",\n      \"Keep Out\": \"#D9544D\",\n    };\n\n    this.addIO(\"input\", \"geometry\", this, \"geometry\", null, false, true);\n    this.addIO(\"output\", \"geometry\", this, \"geometry\", null);\n\n    this.selectedValueColor;\n\n    this.setValues(values);\n  }\n\n  /**\n   * Draw the circle atom & icon.\n   */\n  draw() {\n    super.draw(); //Super call to draw the rest\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = Object.values(this.colorOptions)[\n      this.selectedColorIndex\n    ];\n\n    GlobalVariables.c.arc(\n      GlobalVariables.widthToPixels(this.x),\n      GlobalVariables.heightToPixels(this.y),\n      GlobalVariables.widthToPixels(this.radius / 1.5),\n      0,\n      Math.PI * 2,\n      false\n    );\n    GlobalVariables.c.fill();\n    GlobalVariables.c.closePath();\n  }\n\n  /**\n   * Applies a color tag to the object in a worker thread.\n   */\n  updateValue() {\n    super.updateValue();\n\n    if (this.inputs.every((x) => x.ready)) {\n      this.processing = true;\n      var inputID = this.findIOValue(\"geometry\");\n      var color = Object.values(this.colorOptions)[this.selectedColorIndex];\n      this.selectedValueColor = Object.keys(this.colorOptions)[\n        this.selectedColorIndex\n      ];\n      GlobalVariables.cad\n        .color(this.uniqueID, inputID, color)\n        .then(() => {\n          this.basicThreadValueProcessing();\n        })\n        .catch(this.alertingErrorHandler());\n    }\n  }\n\n  /**\n   * Updates the value of the selected color and then the value.\n   */\n  changeColor(index) {\n    this.selectedColorIndex = index;\n    this.updateValue();\n  }\n\n  /**\n   * Create Leva Menu Inputs - returns to ParameterEditor\n   */\n  createLevaInputs() {\n    let inputParams = {};\n    /** Runs through active atom inputs and adds IO parameters to default param*/\n    if (this.inputs) {\n      this.inputs.map((input) => {\n        const checkConnector = () => {\n          return input.connectors.length > 0;\n        };\n\n        inputParams[this.uniqueID + \"color\"] = {\n          value: Object.keys(this.colorOptions)[this.selectedColorIndex],\n          label: \"Color\",\n          options: Object.keys(this.colorOptions),\n          onChange: (value) => {\n            this.changeColor(Object.keys(this.colorOptions).indexOf(value));\n            this.sendToRender();\n          },\n        };\n\n        /* Makes inputs for Io's other than geometry */\n        if (input.valueType !== \"geometry\") {\n          inputParams[this.uniqueID + input.name] = {\n            value: input.value,\n            label: input.name,\n            disabled: checkConnector(),\n            onChange: (value) => {\n              if (input.value !== value) {\n                input.setValue(value);\n                //this.sendToRender();\n              }\n            },\n          };\n        }\n      });\n      return inputParams;\n    }\n  }\n\n  /**\n   * Add the color choice to the object which is saved for this molecule\n   */\n  serialize(offset = { x: 0, y: 0 }) {\n    var superSerialObject = super.serialize(offset);\n\n    //Write the current color selection to the serialized object\n    superSerialObject.selectedColorIndex = this.selectedColorIndex;\n\n    return superSerialObject;\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/color.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 261,
    "kind": "class",
    "name": "Color",
    "memberof": "src/molecules/color.js",
    "static": true,
    "longname": "src/molecules/color.js~Color",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/color.js",
    "importStyle": "Color",
    "description": "This class creates the color atom which can be used to give a part a color.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 262,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/color.js~Color#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 263,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/color.js~Color",
    "static": false,
    "longname": "src/molecules/color.js~Color#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 264,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/color.js~Color",
    "static": false,
    "longname": "src/molecules/color.js~Color#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 265,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/color.js~Color",
    "static": false,
    "longname": "src/molecules/color.js~Color#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 266,
    "kind": "member",
    "name": "selectedColorIndex",
    "memberof": "src/molecules/color.js~Color",
    "static": false,
    "longname": "src/molecules/color.js~Color#selectedColorIndex",
    "access": "public",
    "description": "The index of the currently selected color option.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 267,
    "kind": "member",
    "name": "colorOptions",
    "memberof": "src/molecules/color.js~Color",
    "static": false,
    "longname": "src/molecules/color.js~Color#colorOptions",
    "access": "public",
    "description": "The color options to choose from",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/color.js~Color#draw",
    "access": "public",
    "description": "Draw the circle atom & icon.",
    "lineNumber": 78,
    "params": [],
    "return": null
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/color.js~Color#updateValue",
    "access": "public",
    "description": "Applies a color tag to the object in a worker thread.",
    "lineNumber": 101,
    "params": [],
    "return": null
  },
  {
    "__docId__": 270,
    "kind": "member",
    "name": "processing",
    "memberof": "src/molecules/color.js~Color",
    "static": false,
    "longname": "src/molecules/color.js~Color#processing",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "member",
    "name": "selectedValueColor",
    "memberof": "src/molecules/color.js~Color",
    "static": false,
    "longname": "src/molecules/color.js~Color#selectedValueColor",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "changeColor",
    "memberof": "src/molecules/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/color.js~Color#changeColor",
    "access": "public",
    "description": "Updates the value of the selected color and then the value.",
    "lineNumber": 123,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "createLevaInputs",
    "memberof": "src/molecules/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/color.js~Color#createLevaInputs",
    "access": "public",
    "description": "Create Leva Menu Inputs - returns to ParameterEditor",
    "lineNumber": 131,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/molecules/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/color.js~Color#serialize",
    "access": "public",
    "description": "Add the color choice to the object which is saved for this molecule",
    "lineNumber": 172,
    "params": [
      {
        "name": "offset",
        "optional": true,
        "types": [
          "{\"x\": number, \"y\": number}"
        ],
        "defaultRaw": {
          "x": 0,
          "y": 0
        },
        "defaultValue": "{\"x\":0,\"y\":0}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "file",
    "name": "src/molecules/constant.js",
    "content": "import Atom from \"../prototypes/atom\";\nimport GlobalVariables from \"../js/globalvariables.js\";\n\n/**\n * This class creates the constant atom instance which can be used to define a numerical constant.\n */\nexport default class Constant extends Atom {\n  /**\n   * Creates a new constant atom.\n   * @param {object} values - An object of values. Each of these values will be applied to the resulting atom.\n   */\n  constructor(values) {\n    super(values);\n\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.type = \"constant\";\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"Constant\";\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"Constant\";\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description = \"Defines a mathematical constant.\";\n    /**\n     * This atom's height as drawn on the screen\n     */\n    this.height = 16;\n    /**\n     * A flag to indicate if this constant should be evolved by genetic algorithms\n     * @type {boolean}\n     */\n    this.evolve = false;\n    /**\n     * Minimum value to be used when evolving constant\n     * @type {float}\n     */\n    this.min = 0;\n    /**\n     * Maximum value to be used when evolving constant\n     * @type {float}\n     */\n    this.max = 20;\n\n    /**\n     * The default value for the constant\n     * @type {float}\n     */\n    this.value = 10.0;\n\n    this.setValues(values);\n\n    this.addIO(\"output\", \"number\", this, \"number\", 10.0);\n\n    this.decreaseToProcessCountByOne(); //Since there is nothing upstream this needs to be removed from the list here\n  }\n\n  /**\n   * Draw the Bill of material atom which has a BOM icon.\n   */\n  draw() {\n    super.draw(\"rect\");\n    let pixelsX = GlobalVariables.widthToPixels(this.x);\n    let pixelsY = GlobalVariables.heightToPixels(this.y);\n    let pixelsRadius = GlobalVariables.widthToPixels(this.radius);\n    /**\n     * Relates height to radius\n     * @type {number}\n     */\n    this.height = pixelsRadius;\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#484848\";\n    GlobalVariables.c.font = `${pixelsRadius}px Work Sans Bold`;\n    const text = String.fromCharCode(0x039b);\n    const textHeight = pixelsRadius / 1.5;\n    const textWidth = GlobalVariables.c.measureText(text).width;\n    const textX = pixelsX - textWidth / 2;\n    const textY = pixelsY + this.height / 2 - textHeight / 2;\n    GlobalVariables.c.fillText(text, textX, textY);\n\n    GlobalVariables.c.fill();\n    GlobalVariables.c.closePath();\n  }\n  /**\n   * Create Leva Menu Input - returns to ParameterEditor\n   */\n  createLevaInputs() {\n    // Create the Leva input for the constant name\n    let outputParams = {};\n    outputParams[\"constant number\"] = {\n      value: this.name,\n      label: \"Constant Name\",\n      disabled: false,\n      onChange: (value) => {\n        this.name = value;\n      },\n    };\n    // Create the Leva input for the constant value\n    outputParams[this.uniqueID + this.name] = {\n      value: this.value,\n      label: this.name,\n      disabled: false,\n      onChange: (value) => {\n        if (this.value !== value) {\n          this.output.setValue(value);\n          this.updateValue();\n        }\n      },\n    };\n    return outputParams;\n  }\n  /**\n   * Set's the output value for constant\n   */\n  updateValue() {\n    this.value = this.output.getValue();\n    this.output.ready = true;\n    this.processing = false;\n  }\n  /**\n   * Send the value of this atom to the 3D display. Used to display the number\n   */\n  sendToRender() {\n    //Send code to jotcad to render\n    GlobalVariables.writeToDisplay(this.uniqueID);\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/constant.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 277,
    "kind": "class",
    "name": "Constant",
    "memberof": "src/molecules/constant.js",
    "static": true,
    "longname": "src/molecules/constant.js~Constant",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/constant.js",
    "importStyle": "Constant",
    "description": "This class creates the constant atom instance which can be used to define a numerical constant.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 278,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/constant.js~Constant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/constant.js~Constant#constructor",
    "access": "public",
    "description": "Creates a new constant atom.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An object of values. Each of these values will be applied to the resulting atom."
      }
    ]
  },
  {
    "__docId__": 279,
    "kind": "member",
    "name": "type",
    "memberof": "src/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/molecules/constant.js~Constant#type",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 280,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/molecules/constant.js~Constant#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 281,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/molecules/constant.js~Constant#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 282,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/molecules/constant.js~Constant#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 283,
    "kind": "member",
    "name": "height",
    "memberof": "src/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/molecules/constant.js~Constant#height",
    "access": "public",
    "description": "This atom's height as drawn on the screen",
    "lineNumber": 38,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "member",
    "name": "evolve",
    "memberof": "src/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/molecules/constant.js~Constant#evolve",
    "access": "public",
    "description": "A flag to indicate if this constant should be evolved by genetic algorithms",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 285,
    "kind": "member",
    "name": "min",
    "memberof": "src/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/molecules/constant.js~Constant#min",
    "access": "public",
    "description": "Minimum value to be used when evolving constant",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "float"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 286,
    "kind": "member",
    "name": "max",
    "memberof": "src/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/molecules/constant.js~Constant#max",
    "access": "public",
    "description": "Maximum value to be used when evolving constant",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "float"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 287,
    "kind": "member",
    "name": "value",
    "memberof": "src/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/molecules/constant.js~Constant#value",
    "access": "public",
    "description": "The default value for the constant",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "float"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/constant.js~Constant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/constant.js~Constant#draw",
    "access": "public",
    "description": "Draw the Bill of material atom which has a BOM icon.",
    "lineNumber": 71,
    "params": [],
    "return": null
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "createLevaInputs",
    "memberof": "src/molecules/constant.js~Constant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/constant.js~Constant#createLevaInputs",
    "access": "public",
    "description": "Create Leva Menu Input - returns to ParameterEditor",
    "lineNumber": 98,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/constant.js~Constant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/constant.js~Constant#updateValue",
    "access": "public",
    "description": "Set's the output value for constant",
    "lineNumber": 126,
    "params": [],
    "return": null
  },
  {
    "__docId__": 294,
    "kind": "member",
    "name": "processing",
    "memberof": "src/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/molecules/constant.js~Constant#processing",
    "access": "public",
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "sendToRender",
    "memberof": "src/molecules/constant.js~Constant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/constant.js~Constant#sendToRender",
    "access": "public",
    "description": "Send the value of this atom to the 3D display. Used to display the number",
    "lineNumber": 134,
    "params": [],
    "return": null
  },
  {
    "__docId__": 296,
    "kind": "file",
    "name": "src/molecules/cutlayout.js",
    "content": "import Atom from \"../prototypes/atom.js\";\nimport GlobalVariables from \"../js/globalvariables.js\";\n//import GlobalVariables from '../js/globalvariables.js'\nimport { proxy } from \"comlink\";\nimport { button, LevaInputs } from \"leva\";\n\n\n/**\n * The Cut Layout atom extracts a copy of each shape on the cutlist and places them optimally on a cut sheet.\n */\nexport default class CutLayout extends Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"Cut Layout\";\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.type = \"cutLayout\";\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"Cut Layout\";\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description =\n      \"Extracts all parts tagged for cutting and lays them out on a sheet to cut.\";\n    /**\n     * The array of placements returned by the layout function\n     * @type {array}\n     */\n    this.placements = [];\n\n    this.progress = 0.0;\n\n    this.cancelationHandle = undefined;\n\n    this.addIO(\"input\", \"geometry\", this, \"geometry\", null);\n\n    this.addIO(\n      \"input\",\n      \"Material Thickness\",\n      this,\n      \"number\",\n      GlobalVariables.topLevelMolecule.unitsKey == \"MM\" ? 19 : 0.75\n    );\n    this.addIO(\n      \"input\",\n      \"Sheet Width\",\n      this,\n      \"number\",\n      GlobalVariables.topLevelMolecule.unitsKey == \"MM\" ? 2438 : 96\n    );\n    this.addIO(\n      \"input\",\n      \"Sheet Height\",\n      this,\n      \"number\",\n      GlobalVariables.topLevelMolecule.unitsKey == \"MM\" ? 1219 : 48\n    );\n    this.addIO(\n      \"input\",\n      \"Part Padding\",\n      this,\n      \"number\",\n      GlobalVariables.topLevelMolecule.unitsKey == \"MM\" ? 6 : .25\n    );\n\n    this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\n\n    this.setValues(values);\n  }\n\n  /**\n   * Draw the cutlayout icon\n   */\n  draw() {\n    super.draw(); //Super call to draw the rest\n\n    const xInPixels = GlobalVariables.widthToPixels(this.x);\n    const yInPixels = GlobalVariables.heightToPixels(this.y);\n    const radiusInPixels = GlobalVariables.widthToPixels(this.radius);\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#949294\";\n    GlobalVariables.c.moveTo(\n      xInPixels - radiusInPixels / 2,\n      yInPixels + radiusInPixels / 2\n    );\n    GlobalVariables.c.lineTo(\n      xInPixels + radiusInPixels / 2,\n      yInPixels + radiusInPixels / 2\n    );\n    GlobalVariables.c.lineTo(xInPixels + radiusInPixels / 2, yInPixels);\n    GlobalVariables.c.lineTo(xInPixels - radiusInPixels / 2, yInPixels);\n    GlobalVariables.c.lineTo(\n      xInPixels - radiusInPixels / 2,\n      yInPixels + radiusInPixels / 2\n    );\n    //GlobalVariables.c.fill()\n    GlobalVariables.c.setLineDash([3, 3]);\n    GlobalVariables.c.stroke();\n    GlobalVariables.c.closePath();\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.lineTo(\n      xInPixels + radiusInPixels / 4,\n      yInPixels - radiusInPixels / 1.7\n    );\n    GlobalVariables.c.lineTo(\n      xInPixels - radiusInPixels / 4,\n      yInPixels - radiusInPixels / 2\n    );\n    GlobalVariables.c.lineTo(xInPixels - radiusInPixels / 4, yInPixels);\n    GlobalVariables.c.lineTo(xInPixels + radiusInPixels / 2, yInPixels);\n    GlobalVariables.c.lineTo(\n      xInPixels + radiusInPixels / 4,\n      yInPixels - radiusInPixels / 1.7\n    );\n\n    //GlobalVariables.c.fill()\n    GlobalVariables.c.lineWidth = 1;\n    GlobalVariables.c.lineJoin = \"round\";\n    GlobalVariables.c.stroke();\n    GlobalVariables.c.setLineDash([]);\n    GlobalVariables.c.closePath();\n\n\n    //draw progress circle in the middle\n    if (this.progress < 1.0) {\n      GlobalVariables.c.beginPath();\n      GlobalVariables.c.fillStyle = this.centerColor;\n      GlobalVariables.c.moveTo(\n        GlobalVariables.widthToPixels(this.x),\n        GlobalVariables.heightToPixels(this.y)\n      );\n      GlobalVariables.c.arc(\n        GlobalVariables.widthToPixels(this.x),\n        GlobalVariables.heightToPixels(this.y),\n        GlobalVariables.widthToPixels(this.radius) / 1.5,\n        0,\n        this.progress * Math.PI * 2,\n        false\n      );\n      GlobalVariables.c.closePath();\n      GlobalVariables.c.fill();\n    }\n  }\n  /**\n   * We only want the layout to update when the button is pressed not when the inputs update so we block the regular update value behavior\n   */\n  updateValue() {\n\n    super.updateValue();\n\n    if (this.inputs.every((x) => x.ready)) {\n      this.processing = true;\n      var inputID = this.findIOValue(\"geometry\");\n      var materialThickness = this.findIOValue(\"Material Thickness\");\n      var sheetWidth = this.findIOValue(\"Sheet Width\");\n      var sheetHeight = this.findIOValue(\"Sheet Height\");\n      var sheetPadding = 0;//this.findIOValue(\"Sheet Padding\"); //It's easier to just adjust the sheet size than to add padding\n      var partPadding = this.findIOValue(\"Part Padding\");\n      var tag = \"cutLayout\";\n\n      if (!inputID) {\n        this.setAlert('\"geometry\" input is missing');\n        return;\n      }\n      \n      GlobalVariables.cad\n        .displayLayout(\n          this.uniqueID,\n          inputID,\n          [this.placements],\n          tag,\n          {\n            thickness: materialThickness,\n            width: sheetWidth,\n            height: sheetHeight,\n            sheetPadding: sheetPadding,\n            partPadding: partPadding\n          })\n        .then((warning) => {\n          this.basicThreadValueProcessing();\n          if (warning != undefined) {\n            this.setAlert(warning);\n          }\n          this.progress = 1.0;\n          this.cancelationHandle = undefined;\n          this.processing = false;\n        })\n        .catch(this.alertingErrorHandler());\n    }\n  }\n\n  /**\n   * Pass the input geometry to a worker function to compute the translation.\n   */\n  updateValueButton() {\n    super.updateValue();\n\n    if (this.inputs.every((x) => x.ready)) {\n      if (this.cancelationHandle) {\n        // There's an in-progress nesting worker. Cancel it and start another nesting\n        // computation with the new inputs.\n        this.cancelationHandle();\n      }\n      this.processing = true;\n      var inputID = this.findIOValue(\"geometry\");\n      var materialThickness = this.findIOValue(\"Material Thickness\");\n      var sheetWidth = this.findIOValue(\"Sheet Width\");\n      var sheetHeight = this.findIOValue(\"Sheet Height\");\n      var sheetPadding = 0;//this.findIOValue(\"Sheet Padding\"); //It's easier to just adjust the sheet size than to add padding\n      var partPadding = this.findIOValue(\"Part Padding\");\n      var tag = \"cutLayout\";\n\n      if (!inputID) {\n        this.setAlert('\"geometry\" input is missing');\n        return;\n      }\n\n      GlobalVariables.cad\n        .layout(\n          this.uniqueID,\n          inputID,\n          tag,\n          proxy((progress, cancelationHandle) => {\n            this.progress = progress;\n            this.cancelationHandle = cancelationHandle;\n          }),\n          proxy((placements) => {\n            this.placements = placements[0];\n          }),\n          {\n            thickness: materialThickness,\n            width: sheetWidth,\n            height: sheetHeight,\n            sheetPadding: sheetPadding,\n            partPadding: partPadding\n          })\n        .then((warning) => {\n          this.basicThreadValueProcessing();\n          if (warning != undefined) {\n            this.setAlert(warning);\n          }\n          this.progress = 1.0;\n          this.cancelationHandle = undefined;\n          this.processing = false;\n        })\n        .catch(this.alertingErrorHandler());\n    }\n  }\n\n  /**\n   * Add the \"Compute Layout\" button to the leva inputs.\n   */\n  createLevaInputs() {\n      let inputParams = super.createLevaInputs();\n  \n      inputParams[\"Compute Layout\"] = button(() => {\n          this.updateValueButton();\n      });\n\n      //Expose the stored positions\n      this.placements.forEach((placement, index) => {\n        inputParams[this.uniqueID + \"position\" + index] = {\n          value: { x: placement.translate.x, y: placement.translate.y, z: placement.rotate },\n          label: \" \" + index,\n          onChange: (value, index) => {\n              const match = index.match(/position(\\d+)/);\n              const indexNumber = match ? parseInt(match[1], 10) : null;\n          \n              if (indexNumber !== null) {\n                  const placement = this.placements[indexNumber];\n                  //If anything has changed we need to update the value and recompute\n                  if (placement.translate.x !== value.x || placement.translate.y !== value.y || placement.rotate !== value.z) {\n                      placement.translate.x = value.x;\n                      placement.translate.y = value.y;\n                      placement.rotate = value.z;\n          \n                      this.updateValue();\n                  }\n              }\n          },\n        };\n      });\n\n\n      return inputParams;\n  }\n\n  /**\n   * Save the placements to be loaded next time\n   */\n  serialize(values) {\n    //Save the readme text to the serial stream\n    var valuesObj = super.serialize(values);\n    valuesObj.placements = this.placements;\n\n    return valuesObj;\n  }\n\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/cutlayout.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 297,
    "kind": "class",
    "name": "CutLayout",
    "memberof": "src/molecules/cutlayout.js",
    "static": true,
    "longname": "src/molecules/cutlayout.js~CutLayout",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/cutlayout.js",
    "importStyle": "CutLayout",
    "description": "The Cut Layout atom extracts a copy of each shape on the cutlist and places them optimally on a cut sheet.",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 298,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/cutlayout.js~CutLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/cutlayout.js~CutLayout#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 299,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/cutlayout.js~CutLayout",
    "static": false,
    "longname": "src/molecules/cutlayout.js~CutLayout#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 300,
    "kind": "member",
    "name": "type",
    "memberof": "src/molecules/cutlayout.js~CutLayout",
    "static": false,
    "longname": "src/molecules/cutlayout.js~CutLayout#type",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 301,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/cutlayout.js~CutLayout",
    "static": false,
    "longname": "src/molecules/cutlayout.js~CutLayout#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 302,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/cutlayout.js~CutLayout",
    "static": false,
    "longname": "src/molecules/cutlayout.js~CutLayout#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 303,
    "kind": "member",
    "name": "placements",
    "memberof": "src/molecules/cutlayout.js~CutLayout",
    "static": false,
    "longname": "src/molecules/cutlayout.js~CutLayout#placements",
    "access": "public",
    "description": "The array of placements returned by the layout function",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 304,
    "kind": "member",
    "name": "progress",
    "memberof": "src/molecules/cutlayout.js~CutLayout",
    "static": false,
    "longname": "src/molecules/cutlayout.js~CutLayout#progress",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 305,
    "kind": "member",
    "name": "cancelationHandle",
    "memberof": "src/molecules/cutlayout.js~CutLayout",
    "static": false,
    "longname": "src/molecules/cutlayout.js~CutLayout#cancelationHandle",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/cutlayout.js~CutLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/cutlayout.js~CutLayout#draw",
    "access": "public",
    "description": "Draw the cutlayout icon",
    "lineNumber": 89,
    "params": [],
    "return": null
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/cutlayout.js~CutLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/cutlayout.js~CutLayout#updateValue",
    "access": "public",
    "description": "We only want the layout to update when the button is pressed not when the inputs update so we block the regular update value behavior",
    "lineNumber": 163,
    "params": [],
    "return": null
  },
  {
    "__docId__": 308,
    "kind": "member",
    "name": "processing",
    "memberof": "src/molecules/cutlayout.js~CutLayout",
    "static": false,
    "longname": "src/molecules/cutlayout.js~CutLayout#processing",
    "access": "public",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "updateValueButton",
    "memberof": "src/molecules/cutlayout.js~CutLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/cutlayout.js~CutLayout#updateValueButton",
    "access": "public",
    "description": "Pass the input geometry to a worker function to compute the translation.",
    "lineNumber": 211,
    "params": [],
    "return": null
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "createLevaInputs",
    "memberof": "src/molecules/cutlayout.js~CutLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/cutlayout.js~CutLayout#createLevaInputs",
    "access": "public",
    "description": "Add the \"Compute Layout\" button to the leva inputs.",
    "lineNumber": 269,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 321,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/molecules/cutlayout.js~CutLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/cutlayout.js~CutLayout#serialize",
    "access": "public",
    "description": "Save the placements to be loaded next time",
    "lineNumber": 307,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 322,
    "kind": "file",
    "name": "src/molecules/difference.js",
    "content": "import Atom from \"../prototypes/atom\";\nimport GlobalVariables from \"../js/globalvariables.js\";\n\n/**\n * This class creates the Difference atom.\n */\nexport default class Difference extends Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    this.addIO(\"input\", \"geometry2\", this, \"geometry\", \"\");\n    this.addIO(\"input\", \"geometry1\", this, \"geometry\", \"\");\n    this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\n\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"Difference\";\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"Difference\";\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description = \"Subtracts shape two from shape one.\";\n\n    this.setValues(values);\n  }\n\n  /**\n   * Draw the code atom which has a code icon.\n   */\n  draw() {\n    super.draw(); //Super call to draw the rest\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#949294\";\n    GlobalVariables.c.arc(\n      GlobalVariables.widthToPixels(this.x),\n      GlobalVariables.heightToPixels(this.y),\n      GlobalVariables.widthToPixels(this.radius / 3),\n      0,\n      Math.PI * 2,\n      false\n    );\n    GlobalVariables.c.fill();\n    GlobalVariables.c.stroke();\n    GlobalVariables.c.closePath();\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#949294\";\n    GlobalVariables.c.rect(\n      GlobalVariables.widthToPixels(this.x - this.radius / 2),\n      GlobalVariables.heightToPixels(this.y - this.radius * 2),\n      GlobalVariables.widthToPixels(this.radius),\n      GlobalVariables.widthToPixels(this.radius)\n    );\n    //GlobalVariables.c.fill()\n    GlobalVariables.c.stroke();\n    GlobalVariables.c.closePath();\n  }\n  /**\n   * Pass the input values to the worker thread to do the actual processing.\n   */\n  updateValue() {\n    super.updateValue();\n\n    if (this.inputs.every((x) => x.ready)) {\n      this.processing = true;\n      const input1ID = this.findIOValue(\"geometry1\");\n      const input2ID = this.findIOValue(\"geometry2\");\n\n      GlobalVariables.cad\n        .difference(this.uniqueID, input1ID, input2ID)\n        .then(() => {\n          this.basicThreadValueProcessing();\n        })\n        .catch(this.alertingErrorHandler());\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/difference.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 323,
    "kind": "class",
    "name": "Difference",
    "memberof": "src/molecules/difference.js",
    "static": true,
    "longname": "src/molecules/difference.js~Difference",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/difference.js",
    "importStyle": "Difference",
    "description": "This class creates the Difference atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 324,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/difference.js~Difference",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/difference.js~Difference#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 325,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/difference.js~Difference",
    "static": false,
    "longname": "src/molecules/difference.js~Difference#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 326,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/difference.js~Difference",
    "static": false,
    "longname": "src/molecules/difference.js~Difference#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 327,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/difference.js~Difference",
    "static": false,
    "longname": "src/molecules/difference.js~Difference#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/difference.js~Difference",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/difference.js~Difference#draw",
    "access": "public",
    "description": "Draw the code atom which has a code icon.",
    "lineNumber": 41,
    "params": [],
    "return": null
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/difference.js~Difference",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/difference.js~Difference#updateValue",
    "access": "public",
    "description": "Pass the input values to the worker thread to do the actual processing.",
    "lineNumber": 73,
    "params": [],
    "return": null
  },
  {
    "__docId__": 330,
    "kind": "member",
    "name": "processing",
    "memberof": "src/molecules/difference.js~Difference",
    "static": false,
    "longname": "src/molecules/difference.js~Difference#processing",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 331,
    "kind": "file",
    "name": "src/molecules/equation.js",
    "content": "import Atom from \"../prototypes/atom\";\nimport GlobalVariables from \"../js/globalvariables.js\";\nimport { button } from \"leva\";\nimport { or } from \"mathjs\";\n\n/**\n * This class creates the Equation atom.\n */\nexport default class Equation extends Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    this.addIO(\"output\", \"result\", this, \"number\", 0);\n\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"Equation\";\n\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"Equation\";\n\n    /**\n     * Evaluate the equation adding and removing inputs as needed\n     */\n    this.value = 0;\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description =\n      \"Defines a mathematical equation. Edit the output field to add or remove inputs.\";\n\n    /**\n     * This atom's height as drawn on the screen\n     */\n    this.height;\n    /**\n     * The index number of the currently selected option\n     * @type {number}\n     */\n    this.currentEquation = \"x + y\";\n\n    this.setValues(values);\n    this.addAndRemoveInputs();\n    this.setValues(values); //Set values again to load input values which were saved\n  }\n\n  /**\n   * Draw the Bill of material atom which has a BOM icon.\n   */\n  draw() {\n    super.draw(\"rect\");\n\n    let pixelsX = GlobalVariables.widthToPixels(this.x);\n    let pixelsY = GlobalVariables.heightToPixels(this.y);\n    let pixelsRadius = GlobalVariables.widthToPixels(this.radius);\n    /**\n     * Relates height to radius\n     * @type {number}\n     */\n    this.height = pixelsRadius;\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#484848\";\n    GlobalVariables.c.font = `${pixelsRadius / 1.3}px Work Sans Bold`;\n\n    const text = \"\\u221A\" + \"(+)\";\n    const textHeight = pixelsRadius / 1.5;\n    const textWidth = GlobalVariables.c.measureText(text).width;\n    const textX = pixelsX - textWidth / 2;\n    const textY = pixelsY + this.height / 2 - textHeight / 2;\n    GlobalVariables.c.fillText(text, textX, textY);\n\n    GlobalVariables.c.fill();\n    GlobalVariables.c.closePath();\n  }\n\n  /**\n   * Add and remove inputs as needed from the atom\n   */\n  addAndRemoveInputs() {\n    //Find all the letters in this equation\n    var re = /[a-zA-Z]/g;\n    const variables = this.currentEquation.match(re);\n\n    //Remove any inputs which are not needed\n    const deleteExtraInputs = () => {\n      this.inputs.forEach((input) => {\n        if (!variables.includes(input.name)) {\n          this.removeIO(\"input\", input.name, this);\n          deleteExtraInputs(); //This needs to be called recursively to make sure all the inputs are deleted\n        }\n      });\n    };\n    deleteExtraInputs();\n\n    //Add any inputs which are needed\n    for (var variable in variables) {\n      if (!this.inputs.some((input) => input.Name === variables[variable])) {\n        this.addIO(\"input\", variables[variable], this, \"number\", 1);\n      }\n    }\n  }\n\n  /**\n   * Evaluate the equation\n   */\n  evaluateEquation() {\n    //Substitute numbers into the string\n    var substitutedEquation = this.currentEquation;\n    this.name = this.currentEquation;\n\n    //Find all the letters in this equation\n    var re = /[a-zA-Z]/g;\n    const variables = this.currentEquation.match(re);\n    for (var variable in variables) {\n      for (var i = 0; i < this.inputs.length; i++) {\n        if (this.inputs[i].name == variables[variable]) {\n          substitutedEquation = substitutedEquation.replace(\n            this.inputs[i].name,\n            this.findIOValue(this.inputs[i].name)\n          );\n        }\n      }\n    }\n    return GlobalVariables.limitedEvaluate(substitutedEquation);\n  }\n\n  /**\n   * Create Leva Menu Inputs - returns to ParameterEditor\n   */\n  createLevaInputs(setInputChanged) {\n    // recreate inputs\n    let inputParams = {};\n    /** Runs through active atom inputs and adds IO parameters to default param*/\n    if (this.inputs) {\n      this.inputs.map((input) => {\n        const checkConnector = () => {\n          return input.connectors.length > 0;\n        };\n\n        /* Make an input for the equation itself */\n        inputParams[\"equation\"] = {\n          value: this.currentEquation,\n          label: \"Current Equation\",\n          disabled: false,\n          onChange: (value) => {\n            if (this.currentEquation !== value) {\n              this.setEquation(value);\n              setInputChanged(this.currentEquation);\n            }\n\n            //;\n          },\n          order: -3,\n        };\n\n        /* Make an input for the equation itself */\n        inputParams[\"result\"] = {\n          value: this.output.value,\n          label: \"Result\",\n          disabled: true,\n        };\n\n        /* Makes inputs for Io's other than geometry */\n        if (input.valueType !== \"geometry\") {\n          inputParams[input.name] = {\n            value: input.value,\n            disabled: checkConnector(),\n            onChange: (value) => {\n              input.setValue(value);\n\n              //this.sendToRender();\n            },\n            order: -2,\n          };\n        }\n        inputParams[\"Save Equation\"] = button(\n          (get) => {\n            this.setEquation(get(\"equation\"));\n          },\n          { order: -1 }\n        );\n      });\n      return inputParams;\n    }\n  }\n\n  /**\n   * Evaluate the equation adding and removing inputs as needed\n   */\n  updateValue() {\n    // super.updateValue();\n    try {\n      this.addAndRemoveInputs();\n\n      if (this.inputs.every((x) => x.ready)) {\n        this.decreaseToProcessCountByOne();\n\n        //Evaluate the equation\n        this.value = this.evaluateEquation();\n\n        this.output.setValue(this.value);\n        this.output.ready = true;\n      }\n    } catch (err) {\n      console.warn(err);\n      this.setAlert(err);\n    }\n  }\n\n  /**\n   * Add the equation choice to the object which is saved for this molecule\n   */\n  serialize(offset = { x: 0, y: 0 }) {\n    var superSerialObject = super.serialize(offset);\n\n    //Write the current equation to the serialized object\n    superSerialObject.currentEquation = this.currentEquation;\n\n    return superSerialObject;\n  }\n\n  /**\n   * Set the current equation to be a new value.\n   */\n  setEquation(newEquation) {\n    this.currentEquation = newEquation.trim(); //remove leading and trailing whitespace\n    this.updateValue();\n  }\n\n  /**\n   * Send the value of this atom to the 3D display. Used to display the number\n   */\n  sendToRender() {\n    //Send code to jotcad to render\n    //GlobalVariables.writeToDisplay(this.uniqueID);\n    console.log(\"equation\");\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/equation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 332,
    "kind": "class",
    "name": "Equation",
    "memberof": "src/molecules/equation.js",
    "static": true,
    "longname": "src/molecules/equation.js~Equation",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/equation.js",
    "importStyle": "Equation",
    "description": "This class creates the Equation atom.",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 333,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/equation.js~Equation#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 334,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/equation.js~Equation",
    "static": false,
    "longname": "src/molecules/equation.js~Equation#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 335,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/equation.js~Equation",
    "static": false,
    "longname": "src/molecules/equation.js~Equation#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 336,
    "kind": "member",
    "name": "value",
    "memberof": "src/molecules/equation.js~Equation",
    "static": false,
    "longname": "src/molecules/equation.js~Equation#value",
    "access": "public",
    "description": "Evaluate the equation adding and removing inputs as needed",
    "lineNumber": 34,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 337,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/equation.js~Equation",
    "static": false,
    "longname": "src/molecules/equation.js~Equation#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 338,
    "kind": "member",
    "name": "currentEquation",
    "memberof": "src/molecules/equation.js~Equation",
    "static": false,
    "longname": "src/molecules/equation.js~Equation#currentEquation",
    "access": "public",
    "description": "The index number of the currently selected option",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/equation.js~Equation#draw",
    "access": "public",
    "description": "Draw the Bill of material atom which has a BOM icon.",
    "lineNumber": 60,
    "params": [],
    "return": null
  },
  {
    "__docId__": 340,
    "kind": "member",
    "name": "height",
    "memberof": "src/molecules/equation.js~Equation",
    "static": false,
    "longname": "src/molecules/equation.js~Equation#height",
    "access": "public",
    "description": "Relates height to radius",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "addAndRemoveInputs",
    "memberof": "src/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/equation.js~Equation#addAndRemoveInputs",
    "access": "public",
    "description": "Add and remove inputs as needed from the atom",
    "lineNumber": 90,
    "params": [],
    "return": null
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "evaluateEquation",
    "memberof": "src/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/equation.js~Equation#evaluateEquation",
    "access": "public",
    "description": "Evaluate the equation",
    "lineNumber": 117,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "createLevaInputs",
    "memberof": "src/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/equation.js~Equation#createLevaInputs",
    "access": "public",
    "description": "Create Leva Menu Inputs - returns to ParameterEditor",
    "lineNumber": 141,
    "params": [
      {
        "name": "setInputChanged",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/equation.js~Equation#updateValue",
    "access": "public",
    "description": "Evaluate the equation adding and removing inputs as needed",
    "lineNumber": 201,
    "params": [],
    "return": null
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/equation.js~Equation#serialize",
    "access": "public",
    "description": "Add the equation choice to the object which is saved for this molecule",
    "lineNumber": 224,
    "params": [
      {
        "name": "offset",
        "optional": true,
        "types": [
          "{\"x\": number, \"y\": number}"
        ],
        "defaultRaw": {
          "x": 0,
          "y": 0
        },
        "defaultValue": "{\"x\":0,\"y\":0}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "setEquation",
    "memberof": "src/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/equation.js~Equation#setEquation",
    "access": "public",
    "description": "Set the current equation to be a new value.",
    "lineNumber": 236,
    "params": [
      {
        "name": "newEquation",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "sendToRender",
    "memberof": "src/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/equation.js~Equation#sendToRender",
    "access": "public",
    "description": "Send the value of this atom to the 3D display. Used to display the number",
    "lineNumber": 244,
    "params": [],
    "return": null
  },
  {
    "__docId__": 351,
    "kind": "file",
    "name": "src/molecules/export.js",
    "content": "import Atom from \"../prototypes/atom.js\";\nimport GlobalVariables from \"../js/globalvariables.js\";\nimport { button, LevaInputs } from \"leva\";\nimport { Octokit } from \"https://esm.sh/octokit@2.0.19\";\nimport { saveAs } from \"file-saver\";\n\n/**\n * This class creates an atom which supports uploading a .svg file\n */\nexport default class Export extends Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"Export\";\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"Export\";\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description =\n      \"Export Atom, let's you choose a type of file to Export.\";\n    /**\n     * This atom's value. Contains the value of the input geometry, not the stl\n     * @type {string}\n     */\n    this.value = null;\n    /**\n     * The type of file to export\n     * @type {string}\n     */\n    this.type = null;\n\n    this.resolution = 72;\n\n    this.addIO(\"input\", \"geometry\", this, \"geometry\", \"\");\n    this.addIO(\"input\", \"Resolution (dpi)\", this, \"number\", 72);\n\n    this.addIO(\"input\", \"Part Name\", this, \"string\", \"Part Name\");\n\n    this.addIO(\"input\", \"File Type\", this, \"string\", \"SVG\");\n\n    this.setValues(values);\n\n    this.fileName = null;\n\n    this.importIndex = 0;\n  }\n\n  /**\n   * Draw the circle atom & icon.\n   */\n  draw() {\n    super.draw(); //Super call to draw the rest\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#484848\";\n    GlobalVariables.c.font = `${GlobalVariables.widthToPixels(\n      this.radius\n    )}px Work Sans Bold`;\n    GlobalVariables.c.fillText(\n      \"G\",\n      GlobalVariables.widthToPixels(this.x - this.radius / 3),\n      GlobalVariables.heightToPixels(this.y) + this.height / 3\n    );\n    GlobalVariables.c.fill();\n    GlobalVariables.c.closePath();\n  }\n\n  /**\n   * Update the displayed svg file\n   */\n  updateValue() {\n    super.updateValue();\n\n    if (this.inputs.every((x) => x.ready)) {\n      this.processing = true;\n      let inputID = this.findIOValue(\"geometry\");\n      let fileType = this.findIOValue(\"File Type\");\n\n      GlobalVariables.cad\n        .visExport(this.uniqueID, inputID, fileType)\n        .then((result) => {\n          this.basicThreadValueProcessing();\n        })\n        .catch(this.alertingErrorHandler());\n    }\n  }\n\n  createLevaInputs() {\n    let inputParams = {};\n    const exportOptions = [\"STL\", \"SVG\", \"STEP\"];\n\n    /** Runs through active atom inputs and adds IO parameters to default param*/\n\n    if (this.inputs) {\n      this.inputs.map((input) => {\n        const checkConnector = () => {\n          return input.connectors.length > 0;\n        };\n        if (input.name == \"File Type\") {\n          inputParams[this.uniqueID + \"file_ops\"] = {\n            value: input.value,\n            options: exportOptions,\n            disabled: checkConnector(),\n            label: \"File Type\",\n            onChange: (value) => {\n              if (input.value !== value) {\n                input.setValue(value);\n              }\n            },\n          };\n        }\n        /* Makes inputs for Io's other than geometry */\n        if (input.name == \"Resolution (dpi)\") {\n          inputParams[this.uniqueID + input.name] = {\n            value: input.value,\n            label: input.name,\n            disabled: this.findIOValue(\"File Type\") != \"SVG\" ? true : false,\n            onChange: (value) => {\n              if (input.value !== value) {\n                input.setValue(value);\n              }\n            },\n          };\n        }\n        if (input.name == \"Part Name\") {\n          inputParams[this.uniqueID + input.name] = {\n            value: input.value,\n            label: input.name,\n            disabled: checkConnector(),\n            onChange: (value) => {\n              if (input.value !== value) {\n                input.setValue(value);\n              }\n            },\n          };\n        }\n      });\n    }\n\n    inputParams[\"Download File\"] = button(() =>\n      //this.loadFile(importOptions[importIndex])\n      this.exportFile()\n    );\n\n    return inputParams;\n  }\n\n  /**\n   * The function which is called when you press the download button.\n   */\n  exportFile() {\n    let fileType = this.findIOValue(\"File Type\");\n    let resolution = this.findIOValue(\"Resolution (dpi)\");\n    let partName = this.findIOValue(\"Part Name\");\n\n    console.log(this);\n    GlobalVariables.cad\n      .downExport(\n        this.uniqueID,\n        fileType,\n        resolution,\n        GlobalVariables.topLevelMolecule.unitsKey\n      )\n      .then((result) => {\n        saveAs(result, partName + \".\" + fileType.toLowerCase());\n      })\n      .catch(this.alertingErrorHandler());\n  }\n  /**\n   * Add the file name to the object which is saved for this molecule\n   */\n  serialize(offset = { x: 0, y: 0 }) {\n    var superSerialObject = super.serialize(offset);\n    superSerialObject.type = this.type;\n    superSerialObject.resolution = this.resolution;\n    superSerialObject.importIndex = this.importIndex;\n    superSerialObject.fileName = this.fileName;\n\n    return superSerialObject;\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/export.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 352,
    "kind": "class",
    "name": "Export",
    "memberof": "src/molecules/export.js",
    "static": true,
    "longname": "src/molecules/export.js~Export",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/export.js",
    "importStyle": "Export",
    "description": "This class creates an atom which supports uploading a .svg file",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 353,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/export.js~Export",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/export.js~Export#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 354,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/export.js~Export",
    "static": false,
    "longname": "src/molecules/export.js~Export#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 355,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/export.js~Export",
    "static": false,
    "longname": "src/molecules/export.js~Export#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 356,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/export.js~Export",
    "static": false,
    "longname": "src/molecules/export.js~Export#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 357,
    "kind": "member",
    "name": "value",
    "memberof": "src/molecules/export.js~Export",
    "static": false,
    "longname": "src/molecules/export.js~Export#value",
    "access": "public",
    "description": "This atom's value. Contains the value of the input geometry, not the stl",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 358,
    "kind": "member",
    "name": "type",
    "memberof": "src/molecules/export.js~Export",
    "static": false,
    "longname": "src/molecules/export.js~Export#type",
    "access": "public",
    "description": "The type of file to export",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 359,
    "kind": "member",
    "name": "resolution",
    "memberof": "src/molecules/export.js~Export",
    "static": false,
    "longname": "src/molecules/export.js~Export#resolution",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 360,
    "kind": "member",
    "name": "fileName",
    "memberof": "src/molecules/export.js~Export",
    "static": false,
    "longname": "src/molecules/export.js~Export#fileName",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 361,
    "kind": "member",
    "name": "importIndex",
    "memberof": "src/molecules/export.js~Export",
    "static": false,
    "longname": "src/molecules/export.js~Export#importIndex",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 362,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/export.js~Export",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/export.js~Export#draw",
    "access": "public",
    "description": "Draw the circle atom & icon.",
    "lineNumber": 64,
    "params": [],
    "return": null
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/export.js~Export",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/export.js~Export#updateValue",
    "access": "public",
    "description": "Update the displayed svg file",
    "lineNumber": 84,
    "params": [],
    "return": null
  },
  {
    "__docId__": 364,
    "kind": "member",
    "name": "processing",
    "memberof": "src/molecules/export.js~Export",
    "static": false,
    "longname": "src/molecules/export.js~Export#processing",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 365,
    "kind": "method",
    "name": "createLevaInputs",
    "memberof": "src/molecules/export.js~Export",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/export.js~Export#createLevaInputs",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "exportFile",
    "memberof": "src/molecules/export.js~Export",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/export.js~Export#exportFile",
    "access": "public",
    "description": "The function which is called when you press the download button.",
    "lineNumber": 164,
    "params": [],
    "return": null
  },
  {
    "__docId__": 367,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/molecules/export.js~Export",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/export.js~Export#serialize",
    "access": "public",
    "description": "Add the file name to the object which is saved for this molecule",
    "lineNumber": 185,
    "params": [
      {
        "name": "offset",
        "optional": true,
        "types": [
          "{\"x\": number, \"y\": number}"
        ],
        "defaultRaw": {
          "x": 0,
          "y": 0
        },
        "defaultValue": "{\"x\":0,\"y\":0}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 368,
    "kind": "file",
    "name": "src/molecules/extracttag.js",
    "content": "import Atom from \"../prototypes/atom.js\";\nimport GlobalVariables from \"../js/globalvariables.js\";\n\n/**\n * The cut away tag adds a tag to a part indicating that it should be cut away from the rest of the model in the next assembly. Essentially it creates a negitive version of itself.\n */\nexport default class ExtractTag extends Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"Extract Tag\";\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.type = \"extractTag\";\n    /**\n     * This atom's height as drawn on the screen\n     */\n    this.height;\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"Extract Tag\";\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description = \"Extracts geometry containing the specified tag.\";\n\n    this.addIO(\"input\", \"geometry\", this, \"geometry\", null, false, true);\n    this.addIO(\"output\", \"geometry\", this, \"geometry\", null);\n\n    /** Index for initial tag dropdown\n     * @type {number}\n     */\n    this.tagIndex = 0;\n\n    /** Selected Tag\n     * @type {string}\n     */\n    this.tag;\n\n    this.setValues(values);\n  }\n\n  /**\n   * Draw the constant which is more rectangular than the regular shape.\n   */\n  draw() {\n    super.draw(\"rect\");\n    let pixelsX = GlobalVariables.widthToPixels(this.x);\n    let pixelsY = GlobalVariables.heightToPixels(this.y);\n    let pixelsRadius = GlobalVariables.widthToPixels(this.radius);\n    /**\n     * Relates height to radius\n     * @type {number}\n     */\n    this.height = pixelsRadius;\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#484848\";\n    GlobalVariables.c.font = `${pixelsRadius}px Work Sans Bold`;\n    GlobalVariables.c.fillText(\n      String.fromCharCode(0x2191, 0x0040, 0x2191),\n      pixelsX - pixelsRadius / 1,\n      pixelsY + this.height / 2\n    );\n    GlobalVariables.c.fill();\n    GlobalVariables.c.closePath();\n  }\n\n  createLevaInputs() {\n    let inputParams = {};\n    const tagOptions = GlobalVariables.topLevelMolecule.projectAvailableTags;\n\n    inputParams[this.uniqueID + \"tag_ops\"] = {\n      value: tagOptions[this.tagIndex],\n      options: tagOptions,\n      label: \"Extract Tag\",\n      onChange: (value) => {\n        this.tagIndex = tagOptions.indexOf(value);\n        if (this.tag != tagOptions[this.tagIndex]) {\n          this.tag = tagOptions[this.tagIndex];\n          this.updateValue();\n          //this.sendToRender();\n        }\n      },\n    };\n    return inputParams;\n  }\n\n  /**\n   * Adds the cutAway tag to the part\n   */\n  updateValue() {\n    super.updateValue();\n\n    if (this.inputs.every((x) => x.ready)) {\n      this.processing = true;\n      var inputID = this.findIOValue(\"geometry\");\n      var tag = this.tag;\n\n      GlobalVariables.cad\n        .extractTag(this.uniqueID, inputID, tag)\n        .then(() => {\n          this.basicThreadValueProcessing();\n        })\n        .catch(this.alertingErrorHandler());\n    }\n  }\n\n  /**\n   * Keeps track of tag to be extracted\n   */\n  serialize(offset = { x: 0, y: 0 }) {\n    var superSerialObject = super.serialize(offset);\n    superSerialObject.tag = this.tag;\n    superSerialObject.tagIndex = this.tagIndex;\n\n    return superSerialObject;\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/extracttag.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 369,
    "kind": "class",
    "name": "ExtractTag",
    "memberof": "src/molecules/extracttag.js",
    "static": true,
    "longname": "src/molecules/extracttag.js~ExtractTag",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/extracttag.js",
    "importStyle": "ExtractTag",
    "description": "The cut away tag adds a tag to a part indicating that it should be cut away from the rest of the model in the next assembly. Essentially it creates a negitive version of itself.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 370,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/extracttag.js~ExtractTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/extracttag.js~ExtractTag#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 371,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/extracttag.js~ExtractTag",
    "static": false,
    "longname": "src/molecules/extracttag.js~ExtractTag#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 372,
    "kind": "member",
    "name": "type",
    "memberof": "src/molecules/extracttag.js~ExtractTag",
    "static": false,
    "longname": "src/molecules/extracttag.js~ExtractTag#type",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 373,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/extracttag.js~ExtractTag",
    "static": false,
    "longname": "src/molecules/extracttag.js~ExtractTag#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 374,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/extracttag.js~ExtractTag",
    "static": false,
    "longname": "src/molecules/extracttag.js~ExtractTag#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 375,
    "kind": "member",
    "name": "tagIndex",
    "memberof": "src/molecules/extracttag.js~ExtractTag",
    "static": false,
    "longname": "src/molecules/extracttag.js~ExtractTag#tagIndex",
    "access": "public",
    "description": "Index for initial tag dropdown",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/extracttag.js~ExtractTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/extracttag.js~ExtractTag#draw",
    "access": "public",
    "description": "Draw the constant which is more rectangular than the regular shape.",
    "lineNumber": 59,
    "params": [],
    "return": null
  },
  {
    "__docId__": 377,
    "kind": "member",
    "name": "height",
    "memberof": "src/molecules/extracttag.js~ExtractTag",
    "static": false,
    "longname": "src/molecules/extracttag.js~ExtractTag#height",
    "access": "public",
    "description": "Relates height to radius",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "createLevaInputs",
    "memberof": "src/molecules/extracttag.js~ExtractTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/extracttag.js~ExtractTag#createLevaInputs",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 380,
    "kind": "member",
    "name": "tag",
    "memberof": "src/molecules/extracttag.js~ExtractTag",
    "static": false,
    "longname": "src/molecules/extracttag.js~ExtractTag#tag",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 381,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/extracttag.js~ExtractTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/extracttag.js~ExtractTag#updateValue",
    "access": "public",
    "description": "Adds the cutAway tag to the part",
    "lineNumber": 105,
    "params": [],
    "return": null
  },
  {
    "__docId__": 382,
    "kind": "member",
    "name": "processing",
    "memberof": "src/molecules/extracttag.js~ExtractTag",
    "static": false,
    "longname": "src/molecules/extracttag.js~ExtractTag#processing",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 383,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/molecules/extracttag.js~ExtractTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/extracttag.js~ExtractTag#serialize",
    "access": "public",
    "description": "Keeps track of tag to be extracted",
    "lineNumber": 125,
    "params": [
      {
        "name": "offset",
        "optional": true,
        "types": [
          "{\"x\": number, \"y\": number}"
        ],
        "defaultRaw": {
          "x": 0,
          "y": 0
        },
        "defaultValue": "{\"x\":0,\"y\":0}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 384,
    "kind": "file",
    "name": "src/molecules/extrude.js",
    "content": "import Atom from \"../prototypes/atom\";\nimport GlobalVariables from \"../js/globalvariables.js\";\n/**\n * This class creates the Extrude atom.\n */\nexport default class Extrude extends Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"Extrude\";\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"Extrude\";\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description = \"Extrudes a 2D shape. Input can be negitive. \";\n\n    this.addIO(\"input\", \"geometry\", this, \"geometry\", \"\", false, true);\n    this.addIO(\"input\", \"height\", this, \"number\", 10.0);\n    this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\n\n    this.setValues(values);\n  }\n\n  /**\n   * Draw the code atom which has a code icon.\n   */\n  draw() {\n    super.draw(); //Super call to draw the rest\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#949294\";\n    GlobalVariables.c.rect(\n      GlobalVariables.widthToPixels(this.x - this.radius / 2),\n      GlobalVariables.heightToPixels(this.y + this.radius),\n      GlobalVariables.widthToPixels(this.radius),\n      GlobalVariables.widthToPixels(this.radius / 3)\n    );\n    GlobalVariables.c.fill();\n    GlobalVariables.c.stroke();\n    GlobalVariables.c.closePath();\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#949294\";\n    GlobalVariables.c.rect(\n      GlobalVariables.widthToPixels(this.x - this.radius / 2),\n      GlobalVariables.heightToPixels(this.y - this.radius * 2),\n      GlobalVariables.widthToPixels(this.radius),\n      GlobalVariables.widthToPixels(this.radius)\n    );\n    //GlobalVariables.c.fill()\n    GlobalVariables.c.stroke();\n    GlobalVariables.c.closePath();\n  }\n  /**\n   * Pass the input shape to the worker thread to compute the extruded shape.\n   */\n  updateValue() {\n    super.updateValue();\n\n    if (this.inputs.every((x) => x.ready)) {\n      var inputID = this.findIOValue(\"geometry\");\n      var extrudeDistance = this.findIOValue(\"height\");\n\n      GlobalVariables.cad\n        .extrude(this.uniqueID, inputID, extrudeDistance)\n        .then(() => {\n          this.basicThreadValueProcessing();\n        })\n        .catch(this.alertingErrorHandler());\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/extrude.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 385,
    "kind": "class",
    "name": "Extrude",
    "memberof": "src/molecules/extrude.js",
    "static": true,
    "longname": "src/molecules/extrude.js~Extrude",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/extrude.js",
    "importStyle": "Extrude",
    "description": "This class creates the Extrude atom.",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 386,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/extrude.js~Extrude",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/extrude.js~Extrude#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 387,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/extrude.js~Extrude",
    "static": false,
    "longname": "src/molecules/extrude.js~Extrude#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 388,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/extrude.js~Extrude",
    "static": false,
    "longname": "src/molecules/extrude.js~Extrude#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 389,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/extrude.js~Extrude",
    "static": false,
    "longname": "src/molecules/extrude.js~Extrude#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 390,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/extrude.js~Extrude",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/extrude.js~Extrude#draw",
    "access": "public",
    "description": "Draw the code atom which has a code icon.",
    "lineNumber": 40,
    "params": [],
    "return": null
  },
  {
    "__docId__": 391,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/extrude.js~Extrude",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/extrude.js~Extrude#updateValue",
    "access": "public",
    "description": "Pass the input shape to the worker thread to compute the extruded shape.",
    "lineNumber": 70,
    "params": [],
    "return": null
  },
  {
    "__docId__": 392,
    "kind": "file",
    "name": "src/molecules/gcode.js",
    "content": "import Atom from \"../prototypes/atom.js\";\nimport GlobalVariables from \"../js/globalvariables.js\";\n//import saveAs from '../lib/FileSaver.js'\n\n/**\n * This class creates the circle atom.\n */\nexport default class Gcode extends Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"Gcode\";\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"Gcode\";\n    /**\n     * This atom's height as drawn on the screen\n     */\n\n    this.height = 16;\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description = \"Generates Maslow gcode from the input geometry.\";\n    /**\n     * The generated gcode string\n     * @type {string}\n     */\n    this.gcodeString = \"\";\n\n    this.addIO(\"input\", \"geometry\", this, \"geometry\", null);\n    this.addIO(\"input\", \"tool size\", this, \"number\", 6.35);\n    this.addIO(\"input\", \"passes\", this, \"number\", 6);\n    this.addIO(\"input\", \"speed\", this, \"number\", 500);\n    this.addIO(\"input\", \"tabs\", this, \"string\", \"true\");\n    this.addIO(\"input\", \"safe height\", this, \"number\", 6);\n\n    this.addIO(\"output\", \"gcode\", this, \"geometry\", \"\");\n\n    this.setValues(values);\n  }\n\n  /**\n   * Draw the circle atom & icon.\n   */\n  draw() {\n    super.draw(); //Super call to draw the rest\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#484848\";\n    GlobalVariables.c.font = `${GlobalVariables.widthToPixels(\n      this.radius\n    )}px Work Sans Bold`;\n    GlobalVariables.c.fillText(\n      \"G\",\n      GlobalVariables.widthToPixels(this.x - this.radius / 3),\n      GlobalVariables.heightToPixels(this.y) + this.height / 3\n    );\n    GlobalVariables.c.fill();\n    GlobalVariables.c.closePath();\n  }\n\n  /**\n   * Generate a layered outline of the part where the tool will cut\n   */\n  updateValue() {\n    super.updateValue();\n    try {\n      var geometry = this.findIOValue(\"geometry\");\n      var toolSize = this.findIOValue(\"tool size\");\n      var passes = this.findIOValue(\"passes\");\n      var speed = this.findIOValue(\"speed\");\n      var tabs = this.findIOValue(\"tabs\");\n      var safeHeight = this.findIOValue(\"safe height\");\n      const values = {\n        op: \"gcode\",\n        readPath: geometry,\n        toolSize: toolSize,\n        passes: passes,\n        speed: speed,\n        tabs: tabs,\n        safeHeight: safeHeight,\n        writePath: this.path,\n      };\n      this.gcodeString = this.basicThreadValueProcessing(values);\n    } catch (err) {\n      this.setAlert(err);\n    }\n  }\n\n  /**\n   * Create a button to download the .stl file.\n   */\n  updateSidebar() {\n    const list = super.updateSidebar();\n    this.createButton(list, this, \"Download G-Code\", () => {\n      this.downloadGCode();\n    });\n  }\n\n  /**\n   * The function which is called when you press the download button.\n   */\n  downloadGCode() {\n    try {\n      var geometry = this.findIOValue(\"geometry\");\n      var toolSize = this.findIOValue(\"tool size\");\n      var passes = this.findIOValue(\"passes\");\n      var speed = this.findIOValue(\"speed\");\n      var tabs = this.findIOValue(\"tabs\");\n      var safeHeight = this.findIOValue(\"safe height\");\n      const values = {\n        op: \"gcode\",\n        readPath: geometry,\n        toolSize: toolSize,\n        passes: passes,\n        speed: speed,\n        tabs: tabs,\n        safeHeight: safeHeight,\n        writePath: this.path,\n      };\n      const { answer } = window.ask(values);\n      // answer.then( returnedAnswer => {\n      //     const blob = new Blob([returnedAnswer])\n      //     saveAs(blob, GlobalVariables.currentMolecule.name+'.nc')\n      // })\n    } catch (err) {\n      this.setAlert(err);\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/gcode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 393,
    "kind": "class",
    "name": "Gcode",
    "memberof": "src/molecules/gcode.js",
    "static": true,
    "longname": "src/molecules/gcode.js~Gcode",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/gcode.js",
    "importStyle": "Gcode",
    "description": "This class creates the circle atom.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 394,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/gcode.js~Gcode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/gcode.js~Gcode#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 395,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/gcode.js~Gcode",
    "static": false,
    "longname": "src/molecules/gcode.js~Gcode#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 396,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/gcode.js~Gcode",
    "static": false,
    "longname": "src/molecules/gcode.js~Gcode#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 397,
    "kind": "member",
    "name": "height",
    "memberof": "src/molecules/gcode.js~Gcode",
    "static": false,
    "longname": "src/molecules/gcode.js~Gcode#height",
    "access": "public",
    "description": "This atom's height as drawn on the screen",
    "lineNumber": 30,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 398,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/gcode.js~Gcode",
    "static": false,
    "longname": "src/molecules/gcode.js~Gcode#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 399,
    "kind": "member",
    "name": "gcodeString",
    "memberof": "src/molecules/gcode.js~Gcode",
    "static": false,
    "longname": "src/molecules/gcode.js~Gcode#gcodeString",
    "access": "public",
    "description": "The generated gcode string",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 400,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/gcode.js~Gcode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/gcode.js~Gcode#draw",
    "access": "public",
    "description": "Draw the circle atom & icon.",
    "lineNumber": 57,
    "params": [],
    "return": null
  },
  {
    "__docId__": 401,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/gcode.js~Gcode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/gcode.js~Gcode#updateValue",
    "access": "public",
    "description": "Generate a layered outline of the part where the tool will cut",
    "lineNumber": 77,
    "params": [],
    "return": null
  },
  {
    "__docId__": 403,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/molecules/gcode.js~Gcode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/gcode.js~Gcode#updateSidebar",
    "access": "public",
    "description": "Create a button to download the .stl file.",
    "lineNumber": 105,
    "params": [],
    "return": null
  },
  {
    "__docId__": 404,
    "kind": "method",
    "name": "downloadGCode",
    "memberof": "src/molecules/gcode.js~Gcode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/gcode.js~Gcode#downloadGCode",
    "access": "public",
    "description": "The function which is called when you press the download button.",
    "lineNumber": 115,
    "params": [],
    "return": null
  },
  {
    "__docId__": 405,
    "kind": "file",
    "name": "src/molecules/geneticAlgorithm.js",
    "content": "import Atom from '../prototypes/atom.js'\nimport GlobalVariables from '../js/globalvariables.js'\n\n/**\n * This class creates the Genetic Algorithm atom.\n */\nexport default class GeneticAlgorithm extends Atom {\n    \n    /**\n     * The constructor function.\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\n     */ \n    constructor(values){\n        \n        super(values)\n        \n        /**\n         * This atom's name\n         * @type {string}\n         */\n        this.name = 'Genetic Algorithm'\n        \n        /**\n         * This atom's type\n         * @type {string}\n         */\n        this.atomType = 'Genetic Algorithm'\n        /** \n         * A description of this atom\n         * @type {string}\n         */\n        this.description = \"Defines a new genetic algorithm which will simulate evolution to maximize the fitness function using the input population size and number of generations. Only constants which are upstream of this atom with evolve checked will be changed.\"\n        \n        /**\n         * An array of constant objects which need to be evolved\n         * @type {array}\n         */\n        this.constantsToEvolve = []\n        \n        /**\n         * An array of objects representing the current population\n         * @type {array}\n         */\n        this.population = []\n        \n        /**\n         * Current individual being evaluated in this generation\n         * @type {integer}\n         */\n        this.individualIndex = 0\n         \n        /**\n         * Current generation\n         * @type {integer}\n         */\n        this.generation = 0\n        \n        /**\n         * Top fitness value for the current generation\n         * @type {float}\n         */\n        this.topFitness = 0\n        \n        /**\n         * A flag to indicate if evolution is in process\n         * @type {boolean}\n         */\n        this.evolutionInProcess = false\n        \n        this.addIO('input', 'fitness function', this, 'number', 0)\n        this.addIO('input', 'population size', this, 'number', 50)\n        this.addIO('input', 'number of generations', this, 'number', 10)\n        \n        this.setValues(values)\n        \n        this.updateValue()\n    }\n\n    /**\n     * Draw the code atom which has a code icon.\n     */ \n    draw(){\n\n        super.draw() //Super call to draw the rest\n         \n\n        const xInPixels = GlobalVariables.widthToPixels(this.x)\n        const yInPixels = GlobalVariables.heightToPixels(this.y)\n        const radiusInPixels = GlobalVariables.widthToPixels(this.radius)\n      \n       \n        GlobalVariables.c.beginPath()\n        GlobalVariables.c.arc(GlobalVariables.widthToPixels(this.x - this.radius/5), \n            GlobalVariables.heightToPixels(this.y), \n            GlobalVariables.widthToPixels(this.radius/2), Math.PI *3.4, Math.PI * 2.7, false) \n        GlobalVariables.c.stroke() \n        GlobalVariables.c.closePath()\n\n        GlobalVariables.c.beginPath()\n        GlobalVariables.c.arc(GlobalVariables.widthToPixels(this.x + this.radius/5), \n            GlobalVariables.heightToPixels(this.y ), \n            GlobalVariables.widthToPixels(this.radius/2), Math.PI *3.6, Math.PI * 2.3, true) \n        GlobalVariables.c.stroke() \n        GlobalVariables.c.closePath()  \n\n        GlobalVariables.c.beginPath()\n        GlobalVariables.c.fillStyle = '#949294'\n        GlobalVariables.c.moveTo(xInPixels - radiusInPixels/3, yInPixels )\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/3, yInPixels )\n        GlobalVariables.c.stroke()\n        GlobalVariables.c.closePath()\n\n        GlobalVariables.c.beginPath()\n        GlobalVariables.c.fillStyle = '#949294'\n        GlobalVariables.c.moveTo(xInPixels - radiusInPixels/3, yInPixels - radiusInPixels/5 )\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/3, yInPixels - radiusInPixels/5)\n        GlobalVariables.c.stroke()\n        GlobalVariables.c.closePath()\n\n        GlobalVariables.c.beginPath()\n        GlobalVariables.c.fillStyle = '#949294'\n        GlobalVariables.c.moveTo(xInPixels - radiusInPixels/3, yInPixels + radiusInPixels/5 )\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/3, yInPixels + radiusInPixels/5)\n        GlobalVariables.c.stroke()\n        GlobalVariables.c.closePath()\n\n\n\n    }\n    \n    /**\n     * Generate a layered outline of the part where the tool will cut\n     */ \n    updateValue(){\n        this.decreaseToProcessCountByOne()\n        if(this.evolutionInProcess){\n            this.updateSidebar()\n            /**\n             * Atom is processing\n            * @type {boolean}\n             */\n            this.processing = true\n            //Store the result from this individual in it's fitness value\n            this.population[this.individualIndex].fitness = this.findIOValue('fitness function')\n            \n            //Evaluate the next individual\n            this.individualIndex = this.individualIndex + 1\n            if(this.individualIndex < this.findIOValue('population size')){\n                //Evaluate the next individual by updating all of the inputs\n                this.beginEvaluatingIndividual()\n            }\n            else{\n                this.generation = this.generation + 1\n                if(this.generation < this.findIOValue('number of generations')){\n                    // Generate a new generation from the existing generation and start the process over\n                    this.breedAndCullPopulation()\n                    this.individualIndex = 0\n                    this.beginEvaluatingIndividual()\n                }\n                else{\n                    this.evolutionInProcess = false\n                    this.processing = false\n                    // Set the inputs to the prime candidate\n                    this.population = this.population.sort((a, b) => parseFloat(b.fitness) - parseFloat(a.fitness))\n                    this.individualIndex = 0\n                    this.generation = 0\n                    this.beginEvaluatingIndividual()\n                    \n                    this.updateSidebar()\n                }\n            }\n        }\n    }\n    \n    /**\n     * Add a button to trigger the evolution process\n     */ \n    updateSidebar(){\n        \n        if(this.evolutionInProcess){\n            \n            //Remove everything in the sidebar\n            let sideBar = document.querySelector('.sideBar')\n            while (sideBar.firstChild) {\n                sideBar.removeChild(sideBar.firstChild)\n            }\n            \n            //Generate the list\n            var sbList = document.createElement('ul')\n            sideBar.appendChild(sbList)\n            sbList.setAttribute('class', 'sidebar-list')\n            \n            //Add text to the list element\n            var listElement = document.createElement('LI')\n            sbList.appendChild(listElement)\n            \n            var labelDiv = document.createElement('div')\n            listElement.appendChild(labelDiv)\n            var labelText = document.createTextNode(\"Evolving...   Individual: \" + this.individualIndex + \",    Generation: \" + this.generation + \",    Best Fitness Value: \" + this.topFitness)\n            labelDiv.appendChild(labelText)\n            labelDiv.setAttribute('class', 'sidebar-subitem label-item')\n        }\n        else{\n            \n            var valueList =  super.updateSidebar() \n            \n            this.createButton(valueList,this,'Evolve',() => {\n                this.evolutionInProcess = true\n                \n                //Generate a list of all the constants to evolve\n                this.updateConstantsList()\n                \n                //Generate a population from those constants\n                this.initializePopulation()\n                \n                //Evaluate the first individual\n                this.beginEvaluatingIndividual()\n            })\n        }\n    }\n    \n    /**\n     * Trigger the process to evaluate the current individual\n     */ \n    beginEvaluatingIndividual(){\n        const individualToEvaluate = this.population[this.individualIndex]\n        \n        //Lock all the constants\n        individualToEvaluate.genome.forEach(gene => {\n            gene.constantAtom.output.waitOnComingInformation()\n        })\n        \n        //Set all of their values\n        individualToEvaluate.genome.forEach(gene => {\n            gene.constantAtom.output.value = gene.newValue\n        })\n        \n        //Trigger them to update\n        individualToEvaluate.genome.forEach(gene => {\n            gene.constantAtom.updateValue()\n        })\n    }\n    \n    /**\n     * Generate a random number between min and max\n     */ \n    getRandomValue(min, max) {\n        const randomVal = Math.random() * (max - min) + min\n        return randomVal\n    }\n    \n    /**\n     * Generate an initial population\n     */ \n    initializePopulation(){\n        this.population = []\n        this.individualIndex = 0\n        this.generation = 0\n        this.topFitness = 0\n        \n        var i = 0\n        while(i < this.findIOValue('population size')){\n            var genome = []\n            this.constantsToEvolve.forEach(constant => {\n                var gene = {\n                    newValue: this.getRandomValue(constant.min, constant.max),\n                    constantAtom: constant\n                }\n                genome.push(gene)\n            })\n            \n            //Generate an individual with a random value for each input\n            var individual = {\n                genome: genome,\n                fitness: null\n            }\n            this.population.push(individual)\n            \n            i++\n        }\n    }\n    \n    /**\n     * Take two individuals and breed them to form a new individual with a mix of their genes and mutations\n     */ \n    breedTwo(A, B){\n        const lengthOfGenome = A.genome.length\n        \n        var child = {\n            fitness: null,\n            genome: []\n        }\n        \n        var geneIndex = 0\n        while(geneIndex < lengthOfGenome){\n            var newGene = {\n                newValue: null,\n                constantAtom: A.genome[geneIndex].constantAtom\n            }\n            \n            \n            const maxVal         = A.genome[geneIndex].constantAtom.max\n            const minVal         = A.genome[geneIndex].constantAtom.min\n            const mutationAmount = 0.1*(maxVal-minVal)*(Math.random()-.5) //Mutate by at most +-.5%\n            \n            var newGeneVal = null\n            if(Math.random() > 0.5){\n                newGeneVal = A.genome[geneIndex].newValue+mutationAmount\n            }else{\n                newGeneVal = B.genome[geneIndex].newValue+mutationAmount\n            }\n            \n            //Constrain to within bounds\n            newGene.newValue = Math.min(Math.max(newGeneVal, minVal), maxVal)\n            \n            child.genome.push(newGene)\n            \n            geneIndex++\n        }\n        return child\n    }\n    \n    /**\n     * Breed the best performers in the population, cull the rest\n     */ \n    breedAndCullPopulation(){\n        this.population = this.population.sort((a, b) => parseFloat(b.fitness) - parseFloat(a.fitness))\n        \n        this.topFitness = this.population[0].fitness\n        \n        // Create a new population by taking the top 1/5th of the original population\n        const keptPopulationNumber = Math.round(this.population.length / 5)\n        \n        const breeders = this.population.slice(0,keptPopulationNumber)\n        \n        //Generate a new population of individuals by breading from the last generation\n        var newGeneration = []\n        var index = 0\n        while(index < this.population.length - keptPopulationNumber){\n            const individualOneIndex = Math.round(Math.random()*(breeders.length-1))\n            const individualTwoIndex = Math.round(Math.random()*(breeders.length-1))\n            const newIndividual = this.breedTwo(breeders[individualOneIndex], breeders[individualTwoIndex])\n            newGeneration.push(newIndividual)\n            index = index + 1\n        }\n        \n        this.population = breeders.concat(newGeneration)\n    }\n    \n    /**\n     * Regenerate the list of constants we are evolving\n     */ \n    updateConstantsList(){\n        //Create an array of the inputs by walking up stream\n        this.constantsToEvolve = []\n        this.inputs.forEach(input => {\n            input.connectors.forEach(connector => {\n                connector.walkBackForConstants(constantObject => {this.addToConstantsList(constantObject)})\n            })\n        })\n    }\n    \n    /**\n     * Add a constant to the list. Used as a callback from passing up the tree.\n     */ \n    addToConstantsList(constantObject){\n        this.constantsToEvolve.push(constantObject)\n    }\n    \n}",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/geneticAlgorithm.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 406,
    "kind": "class",
    "name": "GeneticAlgorithm",
    "memberof": "src/molecules/geneticAlgorithm.js",
    "static": true,
    "longname": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/geneticAlgorithm.js",
    "importStyle": "GeneticAlgorithm",
    "description": "This class creates the Genetic Algorithm atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 407,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 408,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "static": false,
    "longname": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 409,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "static": false,
    "longname": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 410,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "static": false,
    "longname": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 411,
    "kind": "member",
    "name": "constantsToEvolve",
    "memberof": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "static": false,
    "longname": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm#constantsToEvolve",
    "access": "public",
    "description": "An array of constant objects which need to be evolved",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 412,
    "kind": "member",
    "name": "population",
    "memberof": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "static": false,
    "longname": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm#population",
    "access": "public",
    "description": "An array of objects representing the current population",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 413,
    "kind": "member",
    "name": "individualIndex",
    "memberof": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "static": false,
    "longname": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm#individualIndex",
    "access": "public",
    "description": "Current individual being evaluated in this generation",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 414,
    "kind": "member",
    "name": "generation",
    "memberof": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "static": false,
    "longname": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm#generation",
    "access": "public",
    "description": "Current generation",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 415,
    "kind": "member",
    "name": "topFitness",
    "memberof": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "static": false,
    "longname": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm#topFitness",
    "access": "public",
    "description": "Top fitness value for the current generation",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "float"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 416,
    "kind": "member",
    "name": "evolutionInProcess",
    "memberof": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "static": false,
    "longname": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm#evolutionInProcess",
    "access": "public",
    "description": "A flag to indicate if evolution is in process",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 417,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm#draw",
    "access": "public",
    "description": "Draw the code atom which has a code icon.",
    "lineNumber": 82,
    "params": [],
    "return": null
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm#updateValue",
    "access": "public",
    "description": "Generate a layered outline of the part where the tool will cut",
    "lineNumber": 134,
    "params": [],
    "return": null
  },
  {
    "__docId__": 419,
    "kind": "member",
    "name": "processing",
    "memberof": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "static": false,
    "longname": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm#processing",
    "access": "public",
    "description": "Atom is processing",
    "lineNumber": 142,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 428,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm#updateSidebar",
    "access": "public",
    "description": "Add a button to trigger the evolution process",
    "lineNumber": 178,
    "params": [],
    "return": null
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "beginEvaluatingIndividual",
    "memberof": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm#beginEvaluatingIndividual",
    "access": "public",
    "description": "Trigger the process to evaluate the current individual",
    "lineNumber": 225,
    "params": [],
    "return": null
  },
  {
    "__docId__": 431,
    "kind": "method",
    "name": "getRandomValue",
    "memberof": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm#getRandomValue",
    "access": "public",
    "description": "Generate a random number between min and max",
    "lineNumber": 247,
    "params": [
      {
        "name": "min",
        "types": [
          "*"
        ]
      },
      {
        "name": "max",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 432,
    "kind": "method",
    "name": "initializePopulation",
    "memberof": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm#initializePopulation",
    "access": "public",
    "description": "Generate an initial population",
    "lineNumber": 255,
    "params": [],
    "return": null
  },
  {
    "__docId__": 437,
    "kind": "method",
    "name": "breedTwo",
    "memberof": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm#breedTwo",
    "access": "public",
    "description": "Take two individuals and breed them to form a new individual with a mix of their genes and mutations",
    "lineNumber": 286,
    "params": [
      {
        "name": "A",
        "types": [
          "*"
        ]
      },
      {
        "name": "B",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 438,
    "kind": "method",
    "name": "breedAndCullPopulation",
    "memberof": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm#breedAndCullPopulation",
    "access": "public",
    "description": "Breed the best performers in the population, cull the rest",
    "lineNumber": 326,
    "params": [],
    "return": null
  },
  {
    "__docId__": 442,
    "kind": "method",
    "name": "updateConstantsList",
    "memberof": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm#updateConstantsList",
    "access": "public",
    "description": "Regenerate the list of constants we are evolving",
    "lineNumber": 353,
    "params": [],
    "return": null
  },
  {
    "__docId__": 444,
    "kind": "method",
    "name": "addToConstantsList",
    "memberof": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/geneticAlgorithm.js~GeneticAlgorithm#addToConstantsList",
    "access": "public",
    "description": "Add a constant to the list. Used as a callback from passing up the tree.",
    "lineNumber": 366,
    "params": [
      {
        "name": "constantObject",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 445,
    "kind": "file",
    "name": "src/molecules/githubmolecule.js",
    "content": "import Molecule from \"../molecules/molecule\";\nimport GlobalVariables from \"../js/globalvariables.js\";\nimport { Octokit } from \"https://esm.sh/octokit@2.0.19\";\nimport { button } from \"leva\";\nimport { re } from \"mathjs\";\nimport { LevaInputs } from \"leva\";\n\n/**\n * This class creates the GitHubMolecule atom.\n */\nexport default class GitHubMolecule extends Molecule {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"Github Molecule\";\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"GitHubMolecule\";\n    /**\n     * A flag to signal if this node is the top level node\n     * @type {boolean}\n     */\n    this.topLevel = false;\n    /**\n     * The color for the whole in the center of the drawing...probably doesn't need to be in this scope\n     * @type {string}\n     */\n    this.centerColor = \"black\";\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description = \"Project imported from GitHub\";\n\n    this.gitHubUniqueID;\n\n    this.setValues(values);\n  }\n\n  /**\n     * This replaces the default Molecule double click behavior to prevent you from being able to double click into a github molecule\n     * @param {number} x - The x coordinate of the click\n     * @param {number} y - The y coordinate of the click\n     // */\n  doubleClick(x, y) {\n    var clickProcessed = false;\n    var distFromClick = GlobalVariables.distBetweenPoints(x, this.x, y, this.y);\n    if (distFromClick < this.radius) {\n      clickProcessed = true;\n    }\n    return clickProcessed;\n  }\n\n  /**\n   * Create Leva Menu Input - returns to ParameterEditor\n   */\n  createLevaInputs() {\n    let inputParams = {};\n\n    /** Runs through active atom inputs and adds IO parameters to default param*/\n    if (this.inputs) {\n      this.inputs.map((input) => {\n        const checkConnector = () => {\n          return input.connectors.length > 0;\n        };\n\n        /* Makes inputs for Io's other than geometry */\n        if (input.valueType !== \"geometry\") {\n          inputParams[this.uniqueID + input.name] = {\n            value: input.value,\n            label: input.name,\n            disabled: checkConnector(),\n            onChange: (value) => {\n              if (input.value !== value) {\n                input.setValue(value);\n                //this.sendToRender();\n              }\n            },\n          };\n          if (input.type && input.valueType) {\n            inputParams[this.uniqueID + input.name].type =\n              LevaInputs[input.valueType.toUpperCase()];\n          }\n        }\n        if (input.type && input.valueType) {\n          inputParams[this.uniqueID + input.name].type =\n            LevaInputs[input.valueType.toUpperCase()];\n        }\n      });\n      inputParams[\"Reload From Github\"] = button(() =>\n        this.reloadMoleculeFromGithub()\n      );\n      return inputParams;\n    }\n  }\n\n  /**\n   * Reload this github molecule from github\n   */\n  reloadMoleculeFromGithub() {\n    var githubMoleculeObjectPreReload = this.serialize();\n    var githubMoleculeParentObjectConnectorsPreReload =\n      this.parent.serialize().allConnectors;\n\n    const copyOfNodeToBeDeleted = this;\n    copyOfNodeToBeDeleted.deleteNode(false, false, true);\n\n    let item = this.parentRepo;\n\n    this.loadGithubMoleculeByName(\n      /*old way > keeping until i fix reload -- this.gitHubUniqueID*/\n      item,\n      githubMoleculeObjectPreReload,\n      githubMoleculeParentObjectConnectorsPreReload\n    );\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/githubmolecule.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 446,
    "kind": "class",
    "name": "GitHubMolecule",
    "memberof": "src/molecules/githubmolecule.js",
    "static": true,
    "longname": "src/molecules/githubmolecule.js~GitHubMolecule",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/githubmolecule.js",
    "importStyle": "GitHubMolecule",
    "description": "This class creates the GitHubMolecule atom.",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "src/molecules/molecule.js~Molecule"
    ]
  },
  {
    "__docId__": 447,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/githubmolecule.js~GitHubMolecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/githubmolecule.js~GitHubMolecule#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 448,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/githubmolecule.js~GitHubMolecule",
    "static": false,
    "longname": "src/molecules/githubmolecule.js~GitHubMolecule#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 449,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/githubmolecule.js~GitHubMolecule",
    "static": false,
    "longname": "src/molecules/githubmolecule.js~GitHubMolecule#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 450,
    "kind": "member",
    "name": "topLevel",
    "memberof": "src/molecules/githubmolecule.js~GitHubMolecule",
    "static": false,
    "longname": "src/molecules/githubmolecule.js~GitHubMolecule#topLevel",
    "access": "public",
    "description": "A flag to signal if this node is the top level node",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 451,
    "kind": "member",
    "name": "centerColor",
    "memberof": "src/molecules/githubmolecule.js~GitHubMolecule",
    "static": false,
    "longname": "src/molecules/githubmolecule.js~GitHubMolecule#centerColor",
    "access": "public",
    "description": "The color for the whole in the center of the drawing...probably doesn't need to be in this scope",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 452,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/githubmolecule.js~GitHubMolecule",
    "static": false,
    "longname": "src/molecules/githubmolecule.js~GitHubMolecule#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 453,
    "kind": "method",
    "name": "doubleClick",
    "memberof": "src/molecules/githubmolecule.js~GitHubMolecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/githubmolecule.js~GitHubMolecule#doubleClick",
    "access": "public",
    "description": "This replaces the default Molecule double click behavior to prevent you from being able to double click into a github molecule",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x coordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y coordinate of the click\n//"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 454,
    "kind": "method",
    "name": "createLevaInputs",
    "memberof": "src/molecules/githubmolecule.js~GitHubMolecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/githubmolecule.js~GitHubMolecule#createLevaInputs",
    "access": "public",
    "description": "Create Leva Menu Input - returns to ParameterEditor",
    "lineNumber": 67,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "reloadMoleculeFromGithub",
    "memberof": "src/molecules/githubmolecule.js~GitHubMolecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/githubmolecule.js~GitHubMolecule#reloadMoleculeFromGithub",
    "access": "public",
    "description": "Reload this github molecule from github",
    "lineNumber": 110,
    "params": [],
    "return": null
  },
  {
    "__docId__": 456,
    "kind": "file",
    "name": "src/molecules/group.js",
    "content": "import Atom from '../prototypes/atom.js'\nimport { addOrDeletePorts } from '../js/alwaysOneFreeInput.js'\nimport GlobalVariables from '../js/globalvariables.js'\n\n/**\n * This class creates the group atom instance.\n */\nexport default class Group extends Atom{\n    /**\n    * Creates a new group atom.\n    * @param {object} values - An object of values. Each of these values will be applied to the resulting atom.\n    */\n    constructor(values){\n        super(values)\n        \n        this.addIO('output', 'geometry', this, 'geometry', '')\n        \n        /**\n         * This atom's name\n         * @type {string}\n         */\n        this.name = 'Group'\n        /**\n         * This atom's type\n         * @type {string}\n         */\n        this.atomType = 'Group'\n        /**\n         * A list of all of the inputs to this molecule. May be loaded when the molecule is created.\n         * @type {array}\n         */\n        this.ioValues = []\n        /**\n         * A flag to determine if cutaway geometry is removed.\n         * @type {boolean}\n         */\n        this.removeCutawayGeometry = true\n        /** \n         * A description of this atom\n         * @type {string}\n         */\n        this.description = \"Groups shapes together into one. Shapes are allowed to overlap.\"\n        \n        this.setValues(values)\n        \n        //This loads any inputs which this atom had when last saved.\n        if (typeof this.ioValues !== 'undefined'){\n            this.ioValues.forEach(ioValue => { //for each saved value\n                this.addIO('input', ioValue.name, this, 'geometry', '')\n            })\n        }\n\n        this.setValues([])\n    }\n    \n    /**\n     * Add or delete ports as needed in addition to the normal begin propogation stuff\n     */ \n    beginPropagation(){\n        \n        addOrDeletePorts(this)  //Add or remove ports as needed\n        \n        super.beginPropagation()\n    }\n    \n    /**\n     * Draw the group icon\n     */ \n    draw(){\n\n        super.draw() //Super call to draw the rest\n\n        const xInPixels = GlobalVariables.widthToPixels(this.x)\n        const yInPixels = GlobalVariables.heightToPixels(this.y)\n        const radiusInPixels = GlobalVariables.widthToPixels(this.radius)\n\n        GlobalVariables.c.beginPath()\n        GlobalVariables.c.fillStyle = '#949294'\n        GlobalVariables.c.moveTo(xInPixels - radiusInPixels/2, yInPixels + radiusInPixels/2)\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/2, yInPixels + radiusInPixels/2)\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/2, yInPixels)\n        GlobalVariables.c.lineTo(xInPixels - radiusInPixels/2, yInPixels)\n        GlobalVariables.c.lineTo(xInPixels - radiusInPixels/2, yInPixels + radiusInPixels/2)\n        //GlobalVariables.c.fill()\n        GlobalVariables.c.stroke()\n        GlobalVariables.c.closePath()\n        GlobalVariables.c.beginPath()\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/4, yInPixels - radiusInPixels/2)\n        GlobalVariables.c.lineTo(xInPixels - radiusInPixels/4, yInPixels - radiusInPixels/2)\n        GlobalVariables.c.lineTo(xInPixels - radiusInPixels/4, yInPixels)\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/2, yInPixels)\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/4, yInPixels - radiusInPixels/2)\n\n        //GlobalVariables.c.fill()\n        GlobalVariables.c.lineWidth = 1\n        GlobalVariables.c.lineJoin = \"round\"\n        GlobalVariables.c.stroke()\n        GlobalVariables.c.closePath()\n\n    }\n\n    /**\n    * Super class the default update value function. This function computes creates an array of all of the input values and then passes that array to a worker thread to create the group.\n    */ \n    updateValue(){\n        if(this.inputs.every(x => x.ready)){\n            try{\n                var inputValues = []\n                this.inputs.forEach( io => {\n                    if(io.connectors.length > 0 && io.type == 'input'){\n                        inputValues.push(io.getValue())\n                    }\n                })\n                \n                const values = { op: \"group\",paths: inputValues, writePath: this.path }\n                \n                this.basicThreadValueProcessing(values, \"group\")\n                this.clearAlert()\n            }catch(err){this.setAlert(err)}\n            \n            //Delete or add ports as needed\n            addOrDeletePorts(this)\n        }\n    }\n    \n    /**\n    * Super class the default serialize function to save the inputs since this atom has variable numbers of inputs.\n    */ \n    serialize(savedObject){\n        var thisAsObject = super.serialize(savedObject)\n        \n        var ioValues = []\n        this.inputs.forEach(io => {\n            if (io.connectors.length > 0){\n                var saveIO = {\n                    name: io.name,\n                    ioValue: io.getValue()\n                }\n                ioValues.push(saveIO)\n            }\n        })\n        \n        thisAsObject.ioValues = ioValues\n        \n        return thisAsObject\n    }\n}",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/group.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 457,
    "kind": "class",
    "name": "Group",
    "memberof": "src/molecules/group.js",
    "static": true,
    "longname": "src/molecules/group.js~Group",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/group.js",
    "importStyle": "Group",
    "description": "This class creates the group atom instance.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 458,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/group.js~Group",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/group.js~Group#constructor",
    "access": "public",
    "description": "Creates a new group atom.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An object of values. Each of these values will be applied to the resulting atom."
      }
    ]
  },
  {
    "__docId__": 459,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/group.js~Group",
    "static": false,
    "longname": "src/molecules/group.js~Group#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 460,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/group.js~Group",
    "static": false,
    "longname": "src/molecules/group.js~Group#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 461,
    "kind": "member",
    "name": "ioValues",
    "memberof": "src/molecules/group.js~Group",
    "static": false,
    "longname": "src/molecules/group.js~Group#ioValues",
    "access": "public",
    "description": "A list of all of the inputs to this molecule. May be loaded when the molecule is created.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 462,
    "kind": "member",
    "name": "removeCutawayGeometry",
    "memberof": "src/molecules/group.js~Group",
    "static": false,
    "longname": "src/molecules/group.js~Group#removeCutawayGeometry",
    "access": "public",
    "description": "A flag to determine if cutaway geometry is removed.",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 463,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/group.js~Group",
    "static": false,
    "longname": "src/molecules/group.js~Group#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 464,
    "kind": "method",
    "name": "beginPropagation",
    "memberof": "src/molecules/group.js~Group",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/group.js~Group#beginPropagation",
    "access": "public",
    "description": "Add or delete ports as needed in addition to the normal begin propogation stuff",
    "lineNumber": 59,
    "params": [],
    "return": null
  },
  {
    "__docId__": 465,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/group.js~Group",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/group.js~Group#draw",
    "access": "public",
    "description": "Draw the group icon",
    "lineNumber": 69,
    "params": [],
    "return": null
  },
  {
    "__docId__": 466,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/group.js~Group",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/group.js~Group#updateValue",
    "access": "public",
    "description": "Super class the default update value function. This function computes creates an array of all of the input values and then passes that array to a worker thread to create the group.",
    "lineNumber": 105,
    "params": [],
    "return": null
  },
  {
    "__docId__": 467,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/molecules/group.js~Group",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/group.js~Group#serialize",
    "access": "public",
    "description": "Super class the default serialize function to save the inputs since this atom has variable numbers of inputs.",
    "lineNumber": 129,
    "params": [
      {
        "name": "savedObject",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 468,
    "kind": "file",
    "name": "src/molecules/input.js",
    "content": "import Atom from \"../prototypes/atom\";\nimport GlobalVariables from \"../js/globalvariables.js\";\n\n/**\n * This class creates the input atom.\n */\nexport default class Input extends Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name;\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description =\n      \"Adds an input to the parent molecule. If the parent molecule is the top level of the project then the input will be available when the project is shared or imported into another project. Name is editable\";\n    /**\n     * The value the input is set to, defaults to 10. Is this still used or are we using the value of the attachmentPoint now?\n     * @type {number}\n     */\n    this.value = 10;\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"Input\";\n    /**\n     * This atom's height for drawing\n     * @type {number}\n     */\n    this.height;\n\n    this.type = \"number\";\n    /**\n     * This atom's old name, used during name changes\n     * @type {string}\n     */\n    this.oldName = this.name;\n\n    this.radius = this.radius * 1.3;\n\n    this.addIO(\"output\", \"number or geometry\", this, this.type, this.value);\n\n    //Add a new input to the current molecule\n    if (typeof this.parent !== \"undefined\") {\n      this.parent.addIO(\"input\", this.name, this.parent, this.type, this.value);\n    }\n\n    this.setValues(values);\n  }\n\n  /** Solution to canvas overflow https://stackoverflow.com/questions/10508988/html-canvas-text-overflow-ellipsis*/\n  fittingString(c, str, maxWidth) {\n    var width = c.measureText(str).width;\n    var ellipsis = \"…\";\n    var ellipsisWidth = c.measureText(ellipsis).width;\n    if (width <= maxWidth || width <= ellipsisWidth) {\n      return str;\n    } else {\n      var len = str.length;\n      while (width >= maxWidth - ellipsisWidth && len-- > 0) {\n        str = str.substring(0, len);\n        width = c.measureText(str).width;\n      }\n      return str + ellipsis;\n    }\n  }\n\n  /**\n   * Draws the atom on the screen.\n   */\n  draw() {\n    // //Snap the inputs to the far right side\n    /**\n     * The x position of the atom\n     * @type {number}\n     */\n    this.x = 0.04;\n\n    let xInPixels = GlobalVariables.widthToPixels(this.x);\n    let yInPixels = GlobalVariables.heightToPixels(this.y);\n    let radiusInPixels = GlobalVariables.widthToPixels(this.radius);\n    /**\n     * Relates height to radius\n     * @type {number}\n     */\n    this.height = radiusInPixels;\n    //Check if the name has been updated\n    if (this.name != this.oldName) {\n      this.updateParentName();\n    }\n\n    //Set colors\n    if (this.processing) {\n      GlobalVariables.c.fillStyle = \"blue\";\n    } else if (this.selected) {\n      GlobalVariables.c.fillStyle = this.selectedColor;\n      GlobalVariables.c.strokeStyle = this.defaultColor;\n      /**\n       * This background color\n       * @type {string}\n       */\n      this.color = this.selectedColor;\n      /**\n       * This atoms accent color\n       * @type {string}\n       */\n      this.strokeColor = this.defaultColor;\n    } else {\n      GlobalVariables.c.fillStyle = this.defaultColor;\n      GlobalVariables.c.strokeStyle = this.selectedColor;\n      this.color = this.defaultColor;\n      this.strokeColor = this.selectedColor;\n    }\n\n    this.inputs.forEach((input) => {\n      input.draw();\n    });\n    if (this.output) {\n      this.output.draw();\n    }\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.moveTo(0, yInPixels + this.height / 2);\n    GlobalVariables.c.lineTo(55, yInPixels + this.height / 2);\n    GlobalVariables.c.lineTo(xInPixels + radiusInPixels, yInPixels);\n    GlobalVariables.c.lineTo(55, yInPixels - this.height / 2);\n    GlobalVariables.c.lineTo(0, yInPixels - this.height / 2);\n    GlobalVariables.c.lineWidth = 1;\n    GlobalVariables.c.fill();\n    GlobalVariables.c.closePath();\n    GlobalVariables.c.stroke();\n    GlobalVariables.c.font = \"11px Work Sans\";\n    GlobalVariables.c.textAlign = \"start\";\n    GlobalVariables.c.fillStyle = \"black\";\n    GlobalVariables.c.width = 20;\n    GlobalVariables.c.textOverflow = \"ellipsis\";\n\n    GlobalVariables.c.fillText(\n      this.fittingString(GlobalVariables.c, this.name, 50),\n      5,\n      yInPixels + 3\n    );\n  }\n\n  /**\n   * Remove the input from the parent molecule, then delete the atom normally.\n   */\n  deleteNode(backgroundClickAfter = true, deletePath = true, silent = false) {\n    //Remove this input from the parent molecule\n    if (typeof this.parent !== \"undefined\") {\n      this.parent.removeIO(\"input\", this.name, this.parent, silent);\n    }\n\n    super.deleteNode(backgroundClickAfter, deletePath, silent);\n  }\n\n  /**\n   * Called when the name has changed to updated the name of the parent molecule IO\n   */\n  updateParentName() {\n    //Run through the parent molecule and find the input with the same name\n    this.parent.inputs.forEach((child) => {\n      if (child.name == this.oldName) {\n        child.name = this.name;\n      }\n    });\n    this.oldName = this.name;\n  }\n\n  /**\n   * Grabs the new value from the parent molecule's input, sets this atoms value, then propagates.\n   */\n  updateValue() {\n    this.parent.inputs.forEach((input) => {\n      //Grab the value for this input from the parent's inputs list\n      if (input.name == this.name) {\n        //If we have found the matching input\n        this.decreaseToProcessCountByOne();\n        this.value = input.getValue();\n        this.output.waitOnComingInformation(); //Lock all of the dependents\n        this.output.setValue(this.value);\n        this.parent.updateIO(\n          \"input\",\n          this.name,\n          this.parent,\n          this.type,\n          this.value\n        );\n      }\n    });\n  }\n  /**\n   * Create Leva Menu Inputs for Editable Input Names - returns to ParameterEditor\n   */\n  createLevaInputs() {\n    let inputNames = {};\n    inputNames[this.uniqueID] = {\n      value: this.name,\n      label: \"Input Name\",\n      disabled: false,\n      onChange: (value) => {\n        if (this.name !== value) {\n          this.name = value;\n        }\n      },\n    };\n    inputNames[this.uniqueID + \"type\"] = {\n      value: this.type,\n      label: \"Input Type\",\n      disabled: false,\n      options: [\"number\", \"string\", \"geometry\", \"array\"],\n      onChange: (value) => {\n        if (this.type !== value) {\n          this.type = value;\n          this.output.valueType = value;\n          //Add a new input to the current molecule\n          if (typeof this.parent !== \"undefined\") {\n            this.parent.updateIO(\n              \"input\",\n              this.name,\n              this.parent,\n              this.type,\n              this.value\n            );\n          }\n        }\n      },\n    };\n    return inputNames;\n  }\n  /**\n   * Returns the current value being output\n   */\n  getOutput() {\n    return this.output.getValue();\n  }\n\n  /**\n   * Add the input Type choice to the object which is saved for this molecule\n   */\n  serialize(offset = { x: 0, y: 0 }) {\n    var superSerialObject = super.serialize(offset);\n\n    //Write the current color selection to the serialized object\n    superSerialObject.type = this.type;\n\n    return superSerialObject;\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/input.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 469,
    "kind": "class",
    "name": "Input",
    "memberof": "src/molecules/input.js",
    "static": true,
    "longname": "src/molecules/input.js~Input",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/input.js",
    "importStyle": "Input",
    "description": "This class creates the input atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 470,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/input.js~Input#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 471,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/input.js~Input",
    "static": false,
    "longname": "src/molecules/input.js~Input#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 472,
    "kind": "member",
    "name": "value",
    "memberof": "src/molecules/input.js~Input",
    "static": false,
    "longname": "src/molecules/input.js~Input#value",
    "access": "public",
    "description": "The value the input is set to, defaults to 10. Is this still used or are we using the value of the attachmentPoint now?",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 473,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/input.js~Input",
    "static": false,
    "longname": "src/molecules/input.js~Input#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 474,
    "kind": "member",
    "name": "type",
    "memberof": "src/molecules/input.js~Input",
    "static": false,
    "longname": "src/molecules/input.js~Input#type",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 475,
    "kind": "member",
    "name": "oldName",
    "memberof": "src/molecules/input.js~Input",
    "static": false,
    "longname": "src/molecules/input.js~Input#oldName",
    "access": "public",
    "description": "This atom's old name, used during name changes",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 476,
    "kind": "member",
    "name": "radius",
    "memberof": "src/molecules/input.js~Input",
    "static": false,
    "longname": "src/molecules/input.js~Input#radius",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 477,
    "kind": "method",
    "name": "fittingString",
    "memberof": "src/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/input.js~Input#fittingString",
    "access": "public",
    "description": "Solution to canvas overflow https://stackoverflow.com/questions/10508988/html-canvas-text-overflow-ellipsis",
    "lineNumber": 62,
    "params": [
      {
        "name": "c",
        "types": [
          "*"
        ]
      },
      {
        "name": "str",
        "types": [
          "*"
        ]
      },
      {
        "name": "maxWidth",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 478,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/input.js~Input#draw",
    "access": "public",
    "description": "Draws the atom on the screen.",
    "lineNumber": 81,
    "params": [],
    "return": null
  },
  {
    "__docId__": 479,
    "kind": "member",
    "name": "x",
    "memberof": "src/molecules/input.js~Input",
    "static": false,
    "longname": "src/molecules/input.js~Input#x",
    "access": "public",
    "description": "The x position of the atom",
    "lineNumber": 87,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 480,
    "kind": "member",
    "name": "height",
    "memberof": "src/molecules/input.js~Input",
    "static": false,
    "longname": "src/molecules/input.js~Input#height",
    "access": "public",
    "description": "Relates height to radius",
    "lineNumber": 96,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 481,
    "kind": "member",
    "name": "color",
    "memberof": "src/molecules/input.js~Input",
    "static": false,
    "longname": "src/molecules/input.js~Input#color",
    "access": "public",
    "description": "This background color",
    "lineNumber": 112,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 482,
    "kind": "member",
    "name": "strokeColor",
    "memberof": "src/molecules/input.js~Input",
    "static": false,
    "longname": "src/molecules/input.js~Input#strokeColor",
    "access": "public",
    "description": "This atoms accent color",
    "lineNumber": 117,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 485,
    "kind": "method",
    "name": "deleteNode",
    "memberof": "src/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/input.js~Input#deleteNode",
    "access": "public",
    "description": "Remove the input from the parent molecule, then delete the atom normally.",
    "lineNumber": 157,
    "params": [
      {
        "name": "backgroundClickAfter",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      },
      {
        "name": "deletePath",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      },
      {
        "name": "silent",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 486,
    "kind": "method",
    "name": "updateParentName",
    "memberof": "src/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/input.js~Input#updateParentName",
    "access": "public",
    "description": "Called when the name has changed to updated the name of the parent molecule IO",
    "lineNumber": 169,
    "params": [],
    "return": null
  },
  {
    "__docId__": 488,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/input.js~Input#updateValue",
    "access": "public",
    "description": "Grabs the new value from the parent molecule's input, sets this atoms value, then propagates.",
    "lineNumber": 182,
    "params": [],
    "return": null
  },
  {
    "__docId__": 490,
    "kind": "method",
    "name": "createLevaInputs",
    "memberof": "src/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/input.js~Input#createLevaInputs",
    "access": "public",
    "description": "Create Leva Menu Inputs for Editable Input Names - returns to ParameterEditor",
    "lineNumber": 204,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 491,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/input.js~Input",
    "static": false,
    "longname": "src/molecules/input.js~Input#name",
    "access": "public",
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 493,
    "kind": "method",
    "name": "getOutput",
    "memberof": "src/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/input.js~Input#getOutput",
    "access": "public",
    "description": "Returns the current value being output",
    "lineNumber": 243,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 494,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/input.js~Input#serialize",
    "access": "public",
    "description": "Add the input Type choice to the object which is saved for this molecule",
    "lineNumber": 250,
    "params": [
      {
        "name": "offset",
        "optional": true,
        "types": [
          "{\"x\": number, \"y\": number}"
        ],
        "defaultRaw": {
          "x": 0,
          "y": 0
        },
        "defaultValue": "{\"x\":0,\"y\":0}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 495,
    "kind": "file",
    "name": "src/molecules/intersection.js",
    "content": "import Atom from \"../prototypes/atom\";\nimport GlobalVariables from \"../js/globalvariables.js\";\n\n/**\n * This class creates the intersection atom.\n */\nexport default class Intersection extends Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    this.addIO(\"input\", \"geometry1\", this, \"geometry\", \"\");\n    this.addIO(\"input\", \"geometry2\", this, \"geometry\", \"\");\n    this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"Intersection\";\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"Intersection\";\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description = \"The space shared by two shapes.\";\n\n    this.setValues(values);\n  }\n\n  /**\n   * Draw the rectangle atom & icon.\n   */\n  draw() {\n    super.draw(); //Super call to draw the rest\n\n    const xInPixels = GlobalVariables.widthToPixels(this.x);\n    const yInPixels = GlobalVariables.heightToPixels(this.y);\n    const radiusInPixels = GlobalVariables.widthToPixels(this.radius);\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#949294\";\n    GlobalVariables.c.moveTo(\n      xInPixels - radiusInPixels / 2,\n      yInPixels + radiusInPixels / 2\n    );\n    GlobalVariables.c.lineTo(\n      xInPixels + radiusInPixels / 2,\n      yInPixels + radiusInPixels / 2\n    );\n    GlobalVariables.c.lineTo(xInPixels + radiusInPixels / 2, yInPixels);\n    GlobalVariables.c.lineTo(xInPixels + radiusInPixels / 4, yInPixels);\n    GlobalVariables.c.lineTo(\n      xInPixels + radiusInPixels / 4,\n      yInPixels - radiusInPixels / 2\n    );\n    GlobalVariables.c.lineTo(\n      xInPixels - radiusInPixels / 4,\n      yInPixels - radiusInPixels / 2\n    );\n    GlobalVariables.c.lineTo(xInPixels - radiusInPixels / 4, yInPixels);\n    GlobalVariables.c.lineTo(xInPixels - radiusInPixels / 2, yInPixels);\n    GlobalVariables.c.lineTo(\n      xInPixels - radiusInPixels / 2,\n      yInPixels + radiusInPixels / 2\n    );\n    GlobalVariables.c.fill();\n    GlobalVariables.c.lineWidth = 1;\n    GlobalVariables.c.lineJoin = \"round\";\n    GlobalVariables.c.stroke();\n    GlobalVariables.c.closePath();\n  }\n\n  /**\n   * Grab the input geometries and pass them to a worker thread for computation.\n   */\n  updateValue() {\n    super.updateValue();\n\n    if (this.inputs.every((x) => x.ready)) {\n      this.processing = true;\n      const input1ID = this.findIOValue(\"geometry1\");\n      const input2ID = this.findIOValue(\"geometry2\");\n\n      GlobalVariables.cad\n        .intersect(this.uniqueID, input1ID, input2ID)\n        .then(() => {\n          this.basicThreadValueProcessing();\n        })\n        .catch(this.alertingErrorHandler());\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/intersection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 496,
    "kind": "class",
    "name": "Intersection",
    "memberof": "src/molecules/intersection.js",
    "static": true,
    "longname": "src/molecules/intersection.js~Intersection",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/intersection.js",
    "importStyle": "Intersection",
    "description": "This class creates the intersection atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 497,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/intersection.js~Intersection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/intersection.js~Intersection#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 498,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/intersection.js~Intersection",
    "static": false,
    "longname": "src/molecules/intersection.js~Intersection#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 499,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/intersection.js~Intersection",
    "static": false,
    "longname": "src/molecules/intersection.js~Intersection#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 500,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/intersection.js~Intersection",
    "static": false,
    "longname": "src/molecules/intersection.js~Intersection#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 501,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/intersection.js~Intersection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/intersection.js~Intersection#draw",
    "access": "public",
    "description": "Draw the rectangle atom & icon.",
    "lineNumber": 40,
    "params": [],
    "return": null
  },
  {
    "__docId__": 502,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/intersection.js~Intersection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/intersection.js~Intersection#updateValue",
    "access": "public",
    "description": "Grab the input geometries and pass them to a worker thread for computation.",
    "lineNumber": 83,
    "params": [],
    "return": null
  },
  {
    "__docId__": 503,
    "kind": "member",
    "name": "processing",
    "memberof": "src/molecules/intersection.js~Intersection",
    "static": false,
    "longname": "src/molecules/intersection.js~Intersection#processing",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 504,
    "kind": "file",
    "name": "src/molecules/join.js",
    "content": "import Atom from \"../prototypes/atom.js\";\nimport { addOrDeletePorts } from \"../js/alwaysOneFreeInput.js\";\nimport GlobalVariables from \"../js/globalvariables.js\";\n\n/**\n * This class creates the Join atom instance.\n */\nexport default class Join extends Atom {\n  /**\n   * Creates a new join atom.\n   * @param {object} values - An object of values. Each of these values will be applied to the resulting atom.\n   */\n  constructor(values) {\n    super(values);\n\n    this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\n\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"Join\";\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"Join\";\n    /**\n     * A list of all of the inputs to this molecule. May be loaded when the molecule is created.\n     * @type {array}\n     */\n    this.ioValues = [];\n    /**\n     * A flag to determine if cutaway geometry is removed....not used anymore?\n     * @type {boolean}\n     */\n    this.removeCutawayGeometry = true;\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description =\n      \"Pick between assembly and fusion to join input geometries. Assembly takes multiple shapes together into one, shapes higher in the inputs list will cut into shapes lower on the input list where they overlap. Fusion takes all shapes or sketches and fuses them permanently into a single shape\";\n\n    this.setValues(values);\n\n    //This loads any inputs which this atom had when last saved.\n    if (typeof this.ioValues !== \"undefined\") {\n      this.ioValues.forEach((ioValue) => {\n        //for each saved value\n        this.addIO(\"input\", ioValue.name, this, \"geometry\", \"\");\n      });\n    }\n\n    this.unionType = \"Assembly\";\n\n    this.unionIndex;\n\n    this.setValues([]);\n  }\n\n  /**\n   * Add or delete ports as needed in addition to the normal begin propogation stuff\n   */\n  beginPropagation() {\n    //addOrDeletePorts(this); //Add or remove ports as needed\n\n    super.beginPropagation();\n  }\n\n  /**\n   * Draw the join icon\n   */\n  draw() {\n    super.draw(); //Super call to draw the rest\n\n    const xInPixels = GlobalVariables.widthToPixels(this.x);\n    const yInPixels = GlobalVariables.heightToPixels(this.y);\n    const radiusInPixels = GlobalVariables.widthToPixels(this.radius);\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#949294\";\n    GlobalVariables.c.moveTo(\n      xInPixels - radiusInPixels / 2,\n      yInPixels + radiusInPixels / 2\n    );\n    GlobalVariables.c.lineTo(\n      xInPixels + radiusInPixels / 2,\n      yInPixels + radiusInPixels / 2\n    );\n    GlobalVariables.c.lineTo(xInPixels + radiusInPixels / 2, yInPixels);\n    GlobalVariables.c.lineTo(xInPixels - radiusInPixels / 2, yInPixels);\n    GlobalVariables.c.lineTo(\n      xInPixels - radiusInPixels / 2,\n      yInPixels + radiusInPixels / 2\n    );\n    //GlobalVariables.c.fill()\n    GlobalVariables.c.stroke();\n    GlobalVariables.c.closePath();\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.lineTo(\n      xInPixels + radiusInPixels / 4,\n      yInPixels - radiusInPixels / 2\n    );\n    GlobalVariables.c.lineTo(\n      xInPixels - radiusInPixels / 4,\n      yInPixels - radiusInPixels / 2\n    );\n    GlobalVariables.c.lineTo(xInPixels - radiusInPixels / 4, yInPixels);\n    GlobalVariables.c.lineTo(xInPixels + radiusInPixels / 2, yInPixels);\n    GlobalVariables.c.lineTo(\n      xInPixels + radiusInPixels / 4,\n      yInPixels - radiusInPixels / 2\n    );\n\n    //GlobalVariables.c.fill()\n    GlobalVariables.c.lineWidth = 1;\n    GlobalVariables.c.lineJoin = \"round\";\n    GlobalVariables.c.stroke();\n    GlobalVariables.c.closePath();\n  }\n\n  updateValue() {\n    super.updateValue();\n\n    if (this.inputs.every((x) => x.ready)) {\n      this.processing = true;\n      var inputValues = [];\n      this.inputs.forEach((io) => {\n        if (io.connectors.length > 0 && io.type == \"input\") {\n          inputValues.push(io.getValue());\n        }\n      });\n      if (this.unionType === \"Fusion\") {\n        GlobalVariables.cad\n          .fusion(this.uniqueID, inputValues)\n          .then(() => {\n            this.basicThreadValueProcessing();\n          })\n          .catch(this.alertingErrorHandler());\n      } else if (this.unionType === \"Assembly\") {\n        GlobalVariables.cad\n          .assembly(inputValues, this.uniqueID)\n          .then(() => {\n            this.basicThreadValueProcessing();\n          })\n          .catch(this.alertingErrorHandler());\n      }\n\n      //Delete or add ports as needed\n      addOrDeletePorts(this);\n    }\n  }\n\n  createLevaInputs() {\n    let inputParams = {};\n    const importOptions = [\"Assembly\", \"Fusion\"];\n\n    inputParams[this.uniqueID + \"union_ops\"] = {\n      value: this.unionIndex\n        ? importOptions[this.unionIndex]\n        : importOptions[0],\n      options: importOptions,\n      label: \"Union Type\",\n      onChange: (value) => {\n        this.unionIndex = importOptions.indexOf(value);\n        this.unionType = importOptions[this.unionIndex];\n        this.name = this.unionType;\n        this.updateValue();\n      },\n    };\n    return inputParams;\n  }\n\n  /**\n   * Super class the default serialize function to save the inputs since this atom has variable numbers of inputs.\n   */\n  serialize(savedObject) {\n    var thisAsObject = super.serialize(savedObject);\n\n    var ioValues = [];\n    this.inputs.forEach((io) => {\n      if (io.connectors.length > 0) {\n        var saveIO = {\n          name: io.name,\n          ioValue: io.getValue(),\n        };\n        ioValues.push(saveIO);\n      }\n    });\n\n    thisAsObject.ioValues = ioValues;\n    thisAsObject.unionType = this.unionType;\n    thisAsObject.unionIndex = this.unionIndex;\n\n    return thisAsObject;\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/join.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 505,
    "kind": "class",
    "name": "Join",
    "memberof": "src/molecules/join.js",
    "static": true,
    "longname": "src/molecules/join.js~Join",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/join.js",
    "importStyle": "Join",
    "description": "This class creates the Join atom instance.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 506,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/join.js~Join",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/join.js~Join#constructor",
    "access": "public",
    "description": "Creates a new join atom.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An object of values. Each of these values will be applied to the resulting atom."
      }
    ]
  },
  {
    "__docId__": 507,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/join.js~Join",
    "static": false,
    "longname": "src/molecules/join.js~Join#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 508,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/join.js~Join",
    "static": false,
    "longname": "src/molecules/join.js~Join#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 509,
    "kind": "member",
    "name": "ioValues",
    "memberof": "src/molecules/join.js~Join",
    "static": false,
    "longname": "src/molecules/join.js~Join#ioValues",
    "access": "public",
    "description": "A list of all of the inputs to this molecule. May be loaded when the molecule is created.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 510,
    "kind": "member",
    "name": "removeCutawayGeometry",
    "memberof": "src/molecules/join.js~Join",
    "static": false,
    "longname": "src/molecules/join.js~Join#removeCutawayGeometry",
    "access": "public",
    "description": "A flag to determine if cutaway geometry is removed....not used anymore?",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 511,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/join.js~Join",
    "static": false,
    "longname": "src/molecules/join.js~Join#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 512,
    "kind": "member",
    "name": "unionType",
    "memberof": "src/molecules/join.js~Join",
    "static": false,
    "longname": "src/molecules/join.js~Join#unionType",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 513,
    "kind": "method",
    "name": "beginPropagation",
    "memberof": "src/molecules/join.js~Join",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/join.js~Join#beginPropagation",
    "access": "public",
    "description": "Add or delete ports as needed in addition to the normal begin propogation stuff",
    "lineNumber": 65,
    "params": [],
    "return": null
  },
  {
    "__docId__": 514,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/join.js~Join",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/join.js~Join#draw",
    "access": "public",
    "description": "Draw the join icon",
    "lineNumber": 74,
    "params": [],
    "return": null
  },
  {
    "__docId__": 515,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/join.js~Join",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/join.js~Join#updateValue",
    "access": "public",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 516,
    "kind": "member",
    "name": "processing",
    "memberof": "src/molecules/join.js~Join",
    "static": false,
    "longname": "src/molecules/join.js~Join#processing",
    "access": "public",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 517,
    "kind": "method",
    "name": "createLevaInputs",
    "memberof": "src/molecules/join.js~Join",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/join.js~Join#createLevaInputs",
    "access": "public",
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 518,
    "kind": "member",
    "name": "unionIndex",
    "memberof": "src/molecules/join.js~Join",
    "static": false,
    "longname": "src/molecules/join.js~Join#unionIndex",
    "access": "public",
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 521,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/molecules/join.js~Join",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/join.js~Join#serialize",
    "access": "public",
    "description": "Super class the default serialize function to save the inputs since this atom has variable numbers of inputs.",
    "lineNumber": 178,
    "params": [
      {
        "name": "savedObject",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 522,
    "kind": "file",
    "name": "src/molecules/loft.js",
    "content": "import Atom from \"../prototypes/atom.js\";\nimport { addOrDeletePorts } from \"../js/alwaysOneFreeInput.js\";\nimport GlobalVariables from \"../js/globalvariables.js\";\n\n/**\n * This class creates the shrinkwrap atom. This behavior can also be called 'hull'\n */\nexport default class ShrinkWrap extends Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\n\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"Loft\";\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"Loft\";\n    /**\n     * A list of all of the inputs to this molecule. May be passed to the constructor and loaded.\n     * @type {array}\n     */\n    this.ioValues = [];\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description =\n      \"Joins two or more shapes into a single solid by filling in the space between them. Also called 'hull'\";\n\n    /**\n     * This was used when there was a drop down to select closed...may be deleted\n     * @type {number}\n     */\n    this.closedSelection = 0;\n    /**\n     * I believe this is no longer used alzatin - is that right?\n     * @type {boolean}\n     */\n    this.addedIO = false;\n\n    this.setValues(values);\n\n    if (typeof this.ioValues !== \"undefined\") {\n      this.ioValues.forEach((ioValue) => {\n        //for each saved value\n        this.addIO(\"input\", ioValue.name, this, \"geometry\", \"\");\n      });\n    }\n\n    this.setValues([]);\n  }\n\n  /**\n   * Draw the translate icon.\n   */\n  draw() {\n    super.draw(); //Super call to draw the rest\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#949294\";\n    GlobalVariables.c.arc(\n      GlobalVariables.widthToPixels(this.x + this.radius / 4),\n      GlobalVariables.heightToPixels(this.y),\n      GlobalVariables.widthToPixels(this.radius / 2.5),\n      0,\n      Math.PI * 2,\n      false\n    );\n    GlobalVariables.c.fill();\n    GlobalVariables.c.closePath();\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#949294\";\n    GlobalVariables.c.arc(\n      GlobalVariables.widthToPixels(this.x - this.radius / 4),\n      GlobalVariables.heightToPixels(this.y),\n      GlobalVariables.widthToPixels(this.radius / 2.5),\n      0,\n      Math.PI * 2,\n      false\n    );\n    GlobalVariables.c.fill();\n    GlobalVariables.c.closePath();\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#949294\";\n    GlobalVariables.c.rect(\n      GlobalVariables.widthToPixels(this.x - this.radius / 4),\n      GlobalVariables.heightToPixels(this.y - this.radius),\n      GlobalVariables.widthToPixels(this.radius / 2),\n      GlobalVariables.widthToPixels(this.radius / 2)\n    );\n    GlobalVariables.c.fill();\n    GlobalVariables.c.closePath();\n  }\n\n  /**\n   * Generates a list of all of the input shapes, then passees them to a worker thread to compute the hull\n   */\n  updateValue() {\n    super.updateValue();\n\n    if (this.inputs.every((x) => x.ready)) {\n      this.processing = true;\n      var inputsList = [];\n      this.inputs.forEach((io) => {\n        if (io.connectors.length > 0) {\n          inputsList.push(io.getValue());\n        }\n      });\n\n      GlobalVariables.cad\n        .loftShapes(this.uniqueID, inputsList)\n        .then(() => {\n          this.basicThreadValueProcessing();\n        })\n        .catch(this.alertingErrorHandler());\n\n      //Delete or add ports as needed\n      addOrDeletePorts(this);\n    }\n  }\n\n  /**\n   * Add the names of the inputs to the saved object so that they can be loaded later\n   */\n  serialize(savedObject) {\n    var thisAsObject = super.serialize(savedObject);\n\n    var ioValues = [];\n    this.inputs.forEach((io) => {\n      if (io.type == \"input\") {\n        var saveIO = {\n          name: io.name,\n          ioValue: io.getValue(),\n        };\n        ioValues.push(saveIO);\n      }\n    });\n\n    ioValues.forEach((ioValue) => {\n      thisAsObject.ioValues.push(ioValue);\n    });\n\n    //Write the selection for if the chain is closed\n    thisAsObject.closedSelection = this.closedSelection;\n\n    return thisAsObject;\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/loft.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 523,
    "kind": "class",
    "name": "ShrinkWrap",
    "memberof": "src/molecules/loft.js",
    "static": true,
    "longname": "src/molecules/loft.js~ShrinkWrap",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/loft.js",
    "importStyle": "ShrinkWrap",
    "description": "This class creates the shrinkwrap atom. This behavior can also be called 'hull'",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 524,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/loft.js~ShrinkWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/loft.js~ShrinkWrap#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 525,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/loft.js~ShrinkWrap",
    "static": false,
    "longname": "src/molecules/loft.js~ShrinkWrap#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 526,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/loft.js~ShrinkWrap",
    "static": false,
    "longname": "src/molecules/loft.js~ShrinkWrap#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 527,
    "kind": "member",
    "name": "ioValues",
    "memberof": "src/molecules/loft.js~ShrinkWrap",
    "static": false,
    "longname": "src/molecules/loft.js~ShrinkWrap#ioValues",
    "access": "public",
    "description": "A list of all of the inputs to this molecule. May be passed to the constructor and loaded.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 528,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/loft.js~ShrinkWrap",
    "static": false,
    "longname": "src/molecules/loft.js~ShrinkWrap#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 529,
    "kind": "member",
    "name": "closedSelection",
    "memberof": "src/molecules/loft.js~ShrinkWrap",
    "static": false,
    "longname": "src/molecules/loft.js~ShrinkWrap#closedSelection",
    "access": "public",
    "description": "This was used when there was a drop down to select closed...may be deleted",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 530,
    "kind": "member",
    "name": "addedIO",
    "memberof": "src/molecules/loft.js~ShrinkWrap",
    "static": false,
    "longname": "src/molecules/loft.js~ShrinkWrap#addedIO",
    "access": "public",
    "description": "I believe this is no longer used alzatin - is that right?",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 531,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/loft.js~ShrinkWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/loft.js~ShrinkWrap#draw",
    "access": "public",
    "description": "Draw the translate icon.",
    "lineNumber": 66,
    "params": [],
    "return": null
  },
  {
    "__docId__": 532,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/loft.js~ShrinkWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/loft.js~ShrinkWrap#updateValue",
    "access": "public",
    "description": "Generates a list of all of the input shapes, then passees them to a worker thread to compute the hull",
    "lineNumber": 110,
    "params": [],
    "return": null
  },
  {
    "__docId__": 533,
    "kind": "member",
    "name": "processing",
    "memberof": "src/molecules/loft.js~ShrinkWrap",
    "static": false,
    "longname": "src/molecules/loft.js~ShrinkWrap#processing",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 534,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/molecules/loft.js~ShrinkWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/loft.js~ShrinkWrap#serialize",
    "access": "public",
    "description": "Add the names of the inputs to the saved object so that they can be loaded later",
    "lineNumber": 137,
    "params": [
      {
        "name": "savedObject",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 535,
    "kind": "file",
    "name": "src/molecules/molecule.js",
    "content": "import Atom from \"../prototypes/atom.js\";\nimport Connector from \"../prototypes/connector.js\";\nimport GlobalVariables from \"../js/globalvariables.js\";\nimport { button } from \"leva\";\nimport { Octokit } from \"https://esm.sh/octokit@2.0.19\";\nimport { BOMEntry } from \"../js/BOM\";\nimport globalvariables from \"../js/globalvariables.js\";\nimport { LevaInputs } from \"leva\";\n\n/**\n * This class creates the Molecule atom.\n */\nexport default class Molecule extends Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    /**\n     * A list of all of the atoms within this Molecule which should be drawn on the screen as objects.\n     * @type {array}\n     */\n    this.nodesOnTheScreen = [];\n    /**\n     * An array of the molecules inputs. Is this not inherited from atom?\n     * @type {array}\n     */\n    this.inputs = [];\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.name = \"Molecule\";\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description =\n      \"Molecules provide an organizational structure to contain atoms. Double click on a molecule to enter it. Use the up arrow in the upper right hand corner of the screen to go up one level.\";\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"Molecule\";\n    /**\n     * The color for the middle dot in the molecule\n     * @type {string}\n     */\n    this.centerColor = \"#949294\";\n    /**\n     * A flag to indicate if this molecule is the top level molecule.\n     * @type {boolean}\n     */\n    this.topLevel = false;\n    /**\n     * A flag to indicate if this molecule is currently processing.\n     * @type {boolean}\n     */\n    this.processing = false; //Should be pulled from atom. Docs made me put this here\n\n    /**\n     * The total number of atoms contained in this molecule\n     * @type {integer}\n     */\n    this.totalAtomCount = 1;\n    /**\n     * The total number of atoms contained in this molecule which are waiting to process\n     * @type {integer}\n     */\n    this.toProcess = 0;\n    /**\n     * A flag to indicate if this molecule was waiting propagation. If it is it will take place\n     *the next time we go up one level.\n     * @type {number}\n     */\n    this.awaitingPropagationFlag = false;\n    /**\n     * A list of available units with corresponding scaling numbers.\n     * @type {object}\n     */\n    this.units = { MM: \"MM\", Inches: \"Inches\" };\n    /**\n     * The key of the currently selected unit.\n     * @type {string}\n     */\n    this.unitsKey;\n    /**\n     * List of BOM items.\n     * @type {array}\n     */\n    this.BOMlist;\n\n    this.compiledBom = {};\n\n    this.partToExport = null;\n\n    /**\n     * List of all available tags in project.\n     * @type {array}\n     */\n    this.projectAvailableTags = [];\n\n    this.setValues(values);\n\n    this.color;\n  }\n\n  /**\n   * Gives this molecule inputs with the same names as all of it's parent's inputs\n   */\n  copyInputsFromParent() {\n    if (this.parent) {\n      this.parent.nodesOnTheScreen.forEach((node) => {\n        if (node.atomType == \"Input\") {\n          this.placeAtom(\n            {\n              parentMolecule: this,\n              y: node.y,\n              parent: this,\n              name: node.name,\n              atomType: \"Input\",\n              uniqueID: GlobalVariables.generateUniqueID(),\n            },\n            null,\n            GlobalVariables.availableTypes,\n            true\n          );\n        }\n      });\n    }\n  }\n\n  /**\n   * Add the center dot to the molecule\n   */\n  draw() {\n    const percentLoaded = 1 - this.toProcess / this.totalAtomCount;\n    if (this.toProcess > 1) {\n      this.processing = true;\n    } else {\n      this.processing = false;\n    }\n\n    super.draw(); //Super call to draw the rest\n\n    //draw the circle in the middle\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = this.centerColor;\n    GlobalVariables.c.moveTo(\n      GlobalVariables.widthToPixels(this.x),\n      GlobalVariables.heightToPixels(this.y)\n    );\n    GlobalVariables.c.arc(\n      GlobalVariables.widthToPixels(this.x),\n      GlobalVariables.heightToPixels(this.y),\n      GlobalVariables.widthToPixels(this.radius) / 2,\n      0,\n      percentLoaded * Math.PI * 2,\n      false\n    );\n    GlobalVariables.c.closePath();\n    GlobalVariables.c.fill();\n  }\n\n  /**\n   * Create Leva Menu Input - returns to ParameterEditor\n   */\n  createLevaInputs() {\n    let inputParams = {};\n    inputParams[\"molecule name\" + this.uniqueID] = {\n      value: this.topLevel ? GlobalVariables.currentRepoName : this.name,\n      label: \"Molecule Name\",\n      disabled: this.topLevel ? true : false,\n      onChange: (value) => {\n        this.name = value;\n      },\n    };\n    if (this.topLevel == true) {\n      inputParams[\"molecule name\" + this.uniqueID + \"units\"] = {\n        value: this.unitsKey,\n        label: \"Project Units\",\n        options: Object.keys(this.units),\n        disabled: false,\n        onChange: (value) => {\n          this.unitsKey = this.units[value];\n        },\n      };\n    }\n    /** Runs through active atom inputs and adds IO parameters to default param*/\n    if (this.inputs) {\n      this.inputs.map((input) => {\n        const checkConnector = () => {\n          return input.connectors.length > 0;\n        };\n\n        /* Makes inputs for Io's other than geometry */\n\n        inputParams[this.uniqueID + input.name] = {\n          value: input.value,\n          label: input.name,\n          disabled: checkConnector(),\n          onChange: (value) => {\n            if (input.value !== value) {\n              input.setValue(value);\n            }\n          },\n        };\n        if (input.type && input.valueType) {\n          inputParams[this.uniqueID + input.name].type =\n            LevaInputs[input.valueType.toUpperCase()];\n        }\n        if (input.valueType == \"geometry\") {\n          inputParams[this.uniqueID + input.name].disabled = true;\n        }\n      });\n    }\n\n    if (GlobalVariables.currentRepo.parentRepo != null && this.topLevel) {\n      inputParams[\"Reload from Github\"] = button(() => {\n        //Future compare to main branch\n        this.reloadFork();\n      });\n    }\n\n    return inputParams;\n  }\n\n  createLevaExport() {\n    let exportParams = {};\n    const exportOptions = [\"STL\", \"SVG\", \"STEP\"];\n    const exportAtoms = this.nodesOnTheScreen.filter(\n      (node) => node.atomType === \"Export\"\n    );\n\n    exportParams[this.uniqueID + \"part_ops\"] = {\n      value: this.partToExport\n        ? this.partToExport.fileName\n        : \"Pick a part to export\",\n      options: exportAtoms.map(\n        (option) =>\n          option.inputs.filter((input) => input.name === \"Part Name\")[0].value\n      ),\n      label: \"Part\",\n      onChange: (value) => {\n        this.partToExport = exportAtoms.find(\n          (atom) =>\n            atom.inputs.filter((input) => input.name === \"Part Name\")[0]\n              .value === value\n        );\n\n        this.updateValue();\n      },\n    };\n\n    exportParams[this.uniqueID + \"file_ops\"] = {\n      value: this.partToExport\n        ? this.partToExport.fileType\n        : \"Pick a file type\",\n      options: exportOptions,\n      label: \"File Type\",\n      onChange: (value) => {\n        if (this.partToExport) {\n          this.partToExport.type = value;\n        }\n        //atom.exportFile()\n      },\n    };\n\n    exportParams[\"Export As\"] = button(() => {\n      this.partToExport.exportFile();\n    });\n\n    return exportParams;\n  }\n\n  async reloadFork() {\n    const octokit = new Octokit();\n    let parent = GlobalVariables.currentRepo.parentRepo.split(\"/\");\n    let parentOwner = parent[0];\n    let parentRepo = parent[1];\n    octokit\n      .request(\"GET /repos/{owner}/{repo}\", {\n        owner: parentOwner,\n        repo: parentRepo,\n      })\n      .then((response) => {\n        octokit.rest.repos\n          .getContent({\n            owner: response.data.owner.login,\n            repo: response.data.name,\n            path: \"project.abundance\",\n          })\n          .then((response) => {\n            // Delete nodes so deserialize doesn't repeat, could be useful to not delete for a diff in the future\n\n            GlobalVariables.topLevelMolecule.nodesOnTheScreen.forEach(\n              (atom) => {\n                atom.deleteNode();\n              }\n            );\n            let rawFile = JSON.parse(atob(response.data.content));\n\n            if (rawFile.filetypeVersion == 1) {\n              GlobalVariables.topLevelMolecule.deserialize(rawFile);\n            }\n            GlobalVariables.currentMolecule.selected = true;\n          });\n      });\n  }\n\n  /**\n   * Computes and returns an array of BOMEntry objects after looking at the tags of a geometry.*/\n  async extractBomTags() {\n    var tag = \"BOMitem\";\n    let bomlist = await GlobalVariables.cad.extractBomList(this.output.value);\n    return bomlist;\n  }\n\n  /**\n   * Set the atom's response to a mouse click up. If the atom is moving this makes it stop moving.\n   * @param {number} x - The X coordinate of the click\n   * @param {number} y - The Y coordinate of the click\n   */\n  clickUp(x, y) {\n    super.clickUp(x, y);\n    GlobalVariables.currentMolecule.nodesOnTheScreen.forEach((atom) => {\n      atom.isMoving = false;\n    });\n  }\n\n  /**\n   * Delineates bounds for selection box.\n   */\n  selectBox(x, y, xEnd, yEnd) {\n    let xIn = Math.min(x, xEnd);\n    let xOut = Math.max(x, xEnd);\n    let yIn = Math.min(y, yEnd);\n    let yOut = Math.max(y, yEnd);\n    let xInPixels = GlobalVariables.widthToPixels(this.x);\n    let yInPixels = GlobalVariables.heightToPixels(this.y);\n    if (xInPixels >= xIn && xInPixels <= xOut) {\n      if (yInPixels >= yIn && yInPixels <= yOut) {\n        //this.isMoving = true\n        this.selected = true;\n      }\n    }\n  }\n\n  /**\n   * Handle double clicks by replacing the molecule currently on the screen with this one, esentially diving into it.\n   * @param {number} x - The x coordinate of the click\n   * @param {number} y - The y coordinate of the click\n   *\n   */\n  doubleClick(x, y) {\n    //returns true if something was done with the click\n    x = GlobalVariables.pixelsToWidth(x);\n    y = GlobalVariables.pixelsToHeight(y);\n\n    var clickProcessed = false;\n\n    var distFromClick = GlobalVariables.distBetweenPoints(x, this.x, y, this.y);\n\n    if (distFromClick < this.radius * 2) {\n      GlobalVariables.currentMolecule = this; //set this to be the currently displayed molecule\n\n      /**\n       * Deselects Atom\n       * @type {boolean}\n       */\n      this.selected = false;\n      clickProcessed = true;\n    }\n\n    return clickProcessed;\n  }\n\n  /**\n   * Pushes serialized atoms into array if selected\n   */\n  copy() {\n    this.nodesOnTheScreen.forEach((atom) => {\n      if (atom.selected) {\n        GlobalVariables.atomsSelected.push(\n          atom.serialize({ x: 0.05, y: 0.05 })\n        );\n      }\n    });\n  }\n  /**\n   * Takes an array of recently deleted atoms\n   */\n  undo() {\n    if (GlobalVariables.recentMoleculeRepresentation.length > 0) {\n      let rawFile = JSON.parse(\n        GlobalVariables.recentMoleculeRepresentation.pop()\n      );\n      const nodesCopy = [...GlobalVariables.topLevelMolecule.nodesOnTheScreen];\n      // Delete nodes so deserialize doesn't repeat, could be useful to not delete for a diff in the future\n      nodesCopy.forEach((atom, index) => {\n        atom.deleteNode();\n      });\n\n      if (rawFile.fileTypeVersion == 1) {\n        GlobalVariables.topLevelMolecule.deserialize(rawFile);\n      }\n      GlobalVariables.currentMolecule.selected = true;\n    }\n  }\n\n  /**\n   * Unselect this molecule\n   */\n  deselect() {\n    this.selected = false;\n  }\n\n  /**\n   * Grab values from the inputs and push them out to the input atoms.\n   */\n  updateValue(targetName) {\n    //Molecules are fully transparent so we don't wait for all of the inputs to begin processing the things inside\n    this.nodesOnTheScreen.forEach((atom) => {\n      //Scan all the input atoms\n      if (atom.atomType == \"Input\" && atom.name == targetName) {\n        atom.updateValue(); //Tell that input to update it's value\n      }\n    });\n  }\n\n  compileBom() {\n    let compiled = this.extractBomTags().then((result) => {\n      let bomList = [];\n      let compileBomItems = [];\n      if (result) {\n        result.forEach(function (bomElement) {\n          if (bomElement.BOMitemName) {\n            if (!bomList[bomElement.BOMitemName]) {\n              //If the list of items doesn't already have one of these\n              bomList[bomElement.BOMitemName] = new BOMEntry(); //Create one\n              bomList[bomElement.BOMitemName].numberNeeded = 0; //Set the number needed to zerio initially\n              bomList[bomElement.BOMitemName].BOMitemName =\n                bomElement.BOMitemName; //With the information from the item\n              bomList[bomElement.BOMitemName].source = bomElement.source;\n              compileBomItems.push(bomList[bomElement.BOMitemName]);\n            }\n            bomList[bomElement.BOMitemName].numberNeeded +=\n              bomElement.numberNeeded;\n            bomList[bomElement.BOMitemName].costUSD += bomElement.costUSD;\n          }\n        });\n\n        // Alphabetize by source\n        compileBomItems = compileBomItems.sort((a, b) =>\n          a.source > b.source ? 1 : b.source > a.source ? -1 : 0\n        );\n        return compileBomItems;\n      }\n    });\n    return compiled;\n  }\n\n  formatBom() {\n    /**\n     * Takes a link and converts it to be an affiliate link if it should be.\n     * @param {string} link - The link to check.\n     */\n    const convertLinks = function (link) {\n      if (link.toLowerCase().includes(\"amazon\")) {\n        return \"[Amazon](\" + link + \"?tag=maslowcnc01-20)\";\n      }\n      return link;\n    };\n\n    // format and compile the BOM\n    var bomHeader =\n      \"###### Note: Do not edit this file directly, it is automatically generated from the CAD model \\n# Bill Of Materials \\n |Part|Number Needed|Price|Source| \\n |----|----------|-----|-----|\";\n\n    var bomItems = GlobalVariables.topLevelMolecule.compiledBom;\n    var bomContent = bomHeader;\n    var totalParts = 0;\n    var totalCost = 0;\n    if (bomItems.length > 0) {\n      bomItems.forEach((item) => {\n        totalParts += item.numberNeeded;\n        totalCost += item.costUSD;\n        bomContent =\n          bomContent +\n          \"\\n|\" +\n          item.BOMitemName +\n          \"|\" +\n          item.numberNeeded +\n          \"|$\" +\n          item.costUSD.toFixed(2) +\n          \"|\" +\n          convertLinks(item.source) +\n          \"|\";\n      });\n    }\n    bomContent =\n      bomContent +\n      \"\\n|\" +\n      \"Total: \" +\n      \"|\" +\n      totalParts +\n      \"|$\" +\n      totalCost.toFixed(2) +\n      \"|\" +\n      \" \" +\n      \"|\";\n    bomContent = bomContent + \"\\n\\n 3xCOG MSRP: $\" + (3 * totalCost).toFixed(2);\n    return bomContent;\n  }\n\n  createLevaBom() {\n    let bomParams = {};\n    if (this.compiledBom) {\n      if (this.compiledBom.length > 0) {\n        this.compiledBom.map((item) => {\n          bomParams[item.BOMitemName] = {\n            value: item.numberNeeded,\n            label: item.BOMitemName + \" x\",\n            disabled: true,\n          };\n        });\n        bomParams[\"Download List of Materials\"] = button(() => {\n          var fileName =\n            GlobalVariables.currentRepoName + \"-Bill-of-Materials.txt\";\n          var fileContent = this.formatBom();\n          var myFile = new Blob([fileContent], { type: \"text/plain\" });\n\n          saveAs(myFile, fileName + \".\" + \"txt\");\n        });\n\n        return bomParams;\n      }\n    }\n  }\n\n  /**\n   * Reads molecule's output atom ID to recompute the molecule in worker\n   */\n  recomputeMolecule(outputID) {\n    //super.updateValue();\n\n    console.log(\"recompute molecule in molecule\" + this.name);\n    try {\n      GlobalVariables.cad.molecule(this.uniqueID, outputID).then(() => {\n        this.basicThreadValueProcessing();\n        this.compileBom().then((result) => {\n          this.compiledBom = result;\n        });\n        if (this.selected) {\n          this.sendToRender();\n        }\n      });\n    } catch (err) {\n      this.setAlert(err);\n    }\n  }\n\n  /**\n   * Sets atoms to wait on coming information.\n   */\n  waitOnComingInformation(inputName) {\n    this.nodesOnTheScreen.forEach((atom) => {\n      if (atom.name == inputName) {\n        atom.waitOnComingInformation();\n      }\n    });\n  }\n\n  /**\n   * Called when this molecules value changes\n   */\n  propagate() {\n    try {\n      this.updateValue();\n    } catch (err) {\n      this.setAlert(err);\n    }\n  }\n\n  /**\n   * Walks through each of the atoms in this molecule and begins Propagation from them if they have no inputs to wait for\n   */\n  beginPropagation(force = false) {\n    //Tell every atom inside this molecule to begin Propagation\n    this.nodesOnTheScreen.forEach((node) => {\n      node.beginPropagation(force);\n    });\n    this.inputs.forEach((input) => {\n      input.beginPropagation();\n    });\n  }\n\n  /**\n   * Walks through each of the atoms in this molecule and takes a census of how many there are and how many are currently waiting to be processed.\n   */\n  census() {\n    this.totalAtomCount = 0;\n    this.toProcess = 0;\n\n    this.nodesOnTheScreen.forEach((atom) => {\n      const newInformation = atom.census();\n      this.totalAtomCount = this.totalAtomCount + newInformation[0];\n      this.toProcess = this.toProcess + newInformation[1];\n    });\n\n    return [this.totalAtomCount, this.toProcess];\n  }\n\n  changeUnits(newUnitsIndex) {\n    this.unitsIndex = newUnitsIndex;\n  }\n\n  /**\n   * Replace the currently displayed molecule with the parent of this molecule...moves the user up one level.\n   */\n  goToParentMolecule() {\n    //Go to the parent molecule if there is one\n    if (!GlobalVariables.currentMolecule.topLevel) {\n      GlobalVariables.currentMolecule.nodesOnTheScreen.forEach((atom) => {\n        atom.selected = false;\n      });\n      //Push any changes up to the next level if there are any changes waiting in the output\n      if (GlobalVariables.currentMolecule.awaitingPropagationFlag == true) {\n        GlobalVariables.currentMolecule.propagate();\n        GlobalVariables.currentMolecule.awaitingPropagationFlag = false;\n      }\n\n      GlobalVariables.currentMolecule = GlobalVariables.currentMolecule.parent; //set parent this to be the currently displayed molecule\n    }\n  }\n\n  async generateProjectThumbnail() {\n    //Generate a thumbnail for the project\n    return GlobalVariables.cad.generateThumbnail(this.uniqueID);\n  }\n\n  /**\n   * Check to see if any of this molecules children have contributions to make to the README file. Children closer to the top left will be applied first. TODO: No contribution should be made if it's just a title.\n   */\n  async requestReadme() {\n    var sortableAtomsList = this.nodesOnTheScreen;\n    sortableAtomsList = sortableAtomsList\n      .filter(\n        (atom) => atom.atomType == \"Molecule\" || atom.atomType == \"Readme\"\n      )\n      .sort(function (a, b) {\n        return (\n          GlobalVariables.distBetweenPoints(a.x, 0, a.y, 0) -\n          GlobalVariables.distBetweenPoints(b.x, 0, b.y, 0)\n        );\n      });\n    const promiseArray = sortableAtomsList.map((atom) => {\n      return atom.requestReadme();\n    });\n    let finalReadMe = [];\n\n    await Promise.all(promiseArray).then((values) => {\n      values.forEach((value) => {\n        let text;\n        if (value instanceof Array) {\n          value.forEach((arrayItem) => {\n            text = arrayItem.readMeText;\n            finalReadMe.push({\n              uniqueID: arrayItem.uniqueID,\n              readMeText: text,\n              svg: arrayItem.svg,\n            });\n          });\n        } else {\n          text = value.readMeText;\n          if (value.svg) {\n            text = text.concat(\n              \" \\n\\n![readme](/readme\" + value.uniqueID + \".svg)\\n\\n\"\n            );\n          }\n          finalReadMe.push({\n            uniqueID: value.uniqueID,\n            readMeText: text,\n            svg: value.svg,\n          });\n        }\n      });\n    });\n    return finalReadMe;\n  }\n\n  /**\n   * Generates and returns a object representation of this molecule and all of its children.\n   */\n  serialize(offset = { x: 0, y: 0 }) {\n    var allAtoms = []; //An array of all the atoms contained in this molecule\n    var allConnectors = []; //An array of all the connectors contained in this molecule\n\n    this.nodesOnTheScreen.forEach((atom) => {\n      //Store a representation of the atom\n      allAtoms.push(atom.serialize());\n      //Store a representation of the atom's connectors\n      if (atom.output) {\n        atom.output.connectors.forEach((connector) => {\n          allConnectors.push(connector.serialize());\n        });\n      }\n    });\n\n    var thisAsObject = super.serialize(offset); //Do the atom serialization to create an object, then add all the bits of this one to it\n    thisAsObject.topLevel = this.topLevel;\n    thisAsObject.allAtoms = allAtoms;\n    thisAsObject.allConnectors = allConnectors;\n    thisAsObject.parentRepo = this.parentRepo;\n    thisAsObject.unitsKey = this.unitsKey;\n    thisAsObject.fileTypeVersion = 1;\n    thisAsObject.compiledBom = this.compiledBom;\n\n    return thisAsObject;\n  }\n\n  /**\n   * Load the children of this from a JSON representation\n   * @param {object} json - A json representation of the molecule\n   * @param {object} values - An array of values to apply to this molecule before de-serializing it's contents. Used by githubmolecules to set top level correctly\n   */\n  deserialize(json, values = {}, forceBeginPropagation = false) {\n    //Find the target molecule in the list\n    let promiseArray = [];\n\n    //Try to place molecule's output\n    this.placeAtom(\n      {\n        parentMolecule: this,\n        x: 0.98,\n        y: 0.5,\n        parent: this,\n        name: \"Output\",\n        atomType: \"Output\",\n        uniqueID: GlobalVariables.generateUniqueID(),\n      },\n      false\n    );\n\n    this.setValues(json); //Grab the values of everything from the passed object\n    this.setValues(values); //Over write those values with the passed ones where needed\n\n    if (json.allAtoms) {\n      json.allAtoms.forEach((atom) => {\n        //Place the atoms\n        const promise = this.placeAtom(atom, false);\n        promiseArray.push(promise);\n\n        this.setValues([]); //Call set values again with an empty list to trigger loading of IO values from memory\n      });\n    }\n    return Promise.all(promiseArray).then(() => {\n      //Once all the atoms are placed we can finish\n      this.setValues([]); //Call set values again with an empty list to trigger loading of IO values from memory\n\n      if (this.topLevel) {\n        GlobalVariables.totalAtomCount = GlobalVariables.numberOfAtomsToLoad;\n\n        this.census();\n\n        this.beginPropagation(forceBeginPropagation);\n      }\n\n      //Place the connectors\n      if (json.allConnectors) {\n        json.allConnectors.forEach((connector) => {\n          this.placeConnector(connector);\n        });\n      }\n    });\n  }\n  /**\n   * Loads a project into this GitHub molecule from github based on the passed github ID. This function is async and execution time depends on project complexity, and network speed.\n   * @param {number} id - The GitHub project ID for the project to be loaded.\n   */\n  async loadGithubMoleculeByName(\n    item,\n    oldObject = {},\n    oldParentObjectConnectors = {}\n  ) {\n    let octokit = new Octokit();\n    await octokit\n      .request(\"GET /repos/{owner}/{repo}/contents/project.abundance\", {\n        owner: item.owner,\n        repo: item.repoName,\n      })\n      .then((response) => {\n        let rawFile = JSON.parse(atob(response.data.content));\n        let rawFileWithNewIds = this.remapIDs(rawFile);\n        rawFileWithNewIds.atomType = \"GitHubMolecule\";\n\n        //content will be base64 encoded\n        let valuesToOverwriteInLoadedVersion = {};\n        let newMoleculeUniqueID = GlobalVariables.generateUniqueID();\n\n        //If there are stored io values to recover\n        if (oldObject.ioValues != undefined) {\n          valuesToOverwriteInLoadedVersion = {\n            uniqueID: newMoleculeUniqueID,\n            x: this.x,\n            y: this.y,\n            parentRepo: item,\n            topLevel: false,\n            ioValues: oldObject.ioValues,\n          };\n        } else {\n          valuesToOverwriteInLoadedVersion = {\n            uniqueID: newMoleculeUniqueID,\n            parentRepo: item,\n            x: GlobalVariables.pixelsToWidth(GlobalVariables.lastClick[0]),\n            y: GlobalVariables.pixelsToHeight(GlobalVariables.lastClick[1]),\n            topLevel: false,\n          };\n        }\n\n        GlobalVariables.currentMolecule\n          .placeAtom(rawFileWithNewIds, true, valuesToOverwriteInLoadedVersion)\n          .then(() => {\n            oldParentObjectConnectors.forEach((connector) => {\n              if (connector.ap1ID == oldObject.uniqueID) {\n                connector.ap1ID = newMoleculeUniqueID;\n                this.parent.placeConnector(connector);\n              }\n              if (connector.ap2ID == oldObject.uniqueID) {\n                connector.ap2ID = newMoleculeUniqueID;\n                this.parent.placeConnector(connector);\n              }\n            });\n          });\n      });\n  }\n\n  /** Gives new unique IDs to all atoms in a json object and remaps the connections with the attachment points */\n  remapIDs(json) {\n    let idPairs = {};\n    if (json.allAtoms) {\n      json.allAtoms.forEach((atom) => {\n        let oldID = atom.uniqueID;\n        let newID = GlobalVariables.generateUniqueID();\n        idPairs[oldID] = newID;\n        atom.uniqueID = newID;\n      });\n      json.allConnectors.forEach((connector) => {\n        if (connector.ap1ID && idPairs[connector.ap1ID]) {\n          connector.ap1ID = idPairs[connector.ap1ID];\n        }\n        if (connector.ap2ID && idPairs[connector.ap2ID]) {\n          connector.ap2ID = idPairs[connector.ap2ID];\n        }\n        if (connector.ap2ID && idPairs[connector.ap2ID]) {\n          connector.ap2ID = idPairs[connector.ap2ID];\n        }\n      });\n\n      return json;\n    }\n  }\n\n  /**\n   * Delete this molecule and everything in it.\n   */\n  deleteNode(backgroundClickAfter = true, deletePath = true, silent = false) {\n    //make a copy of the nodes on the screen array since we will be modifying it\n    const copyOfNodesOnTheScreen = [...this.nodesOnTheScreen];\n\n    copyOfNodesOnTheScreen.forEach((atom) => {\n      atom.deleteNode(backgroundClickAfter, deletePath, silent);\n    });\n    super.deleteNode(backgroundClickAfter, deletePath, silent);\n  }\n\n  /**\n   * Places a new atom inside the molecule\n   * @param {object} newAtomObj - An object defining the new atom to be placed\n   * @param {array} moleculeList - Only passed if we are placing an instance of Molecule.\n   * @param {object} typesList - A dictionary of all of the available types with references to their constructors\n   * @param {boolean} unlock - A flag to indicate if this atom should spawn in the unlocked state.\n   */\n  async placeAtom(newAtomObj, unlock, values) {\n    try {\n      GlobalVariables.numberOfAtomsToLoad =\n        GlobalVariables.numberOfAtomsToLoad + 1; //Indicate that one more atom needs to be loaded\n\n      let promise = null;\n\n      for (var key in GlobalVariables.availableTypes) {\n        if (\n          GlobalVariables.availableTypes[key].atomType == newAtomObj.atomType\n        ) {\n          newAtomObj.parent = this;\n          var atom = new GlobalVariables.availableTypes[key].creator(\n            newAtomObj\n          );\n          //If this is a molecule, de-serialize it\n          if (\n            atom.atomType == \"Molecule\" ||\n            atom.atomType == \"GitHubMolecule\"\n          ) {\n            promise = atom.deserialize(newAtomObj, values, true);\n\n            if (unlock) {\n              atom.beginPropagation();\n            }\n          }\n\n          //reassign the name of the Inputs to preserve linking\n          if (\n            atom.atomType == \"Input\" &&\n            typeof newAtomObj.name !== \"undefined\"\n          ) {\n            atom.name = newAtomObj.name;\n            atom.type = newAtomObj.type;\n            atom.draw(); //The poling happens in draw :roll_eyes:\n          } else if (atom.atomType == \"Input\") {\n            atom.name = GlobalVariables.incrementVariableName(atom.name, this);\n          }\n\n          //If this is an output, check to make sure there are no existing outputs, and if there are delete the existing one because there can only be one\n          if (atom.atomType == \"Output\") {\n            //Check for existing outputs\n            this.nodesOnTheScreen.forEach((atom) => {\n              if (atom.atomType == \"Output\") {\n                atom.deleteOutputAtom(false); //Remove them\n              }\n            });\n          }\n\n          //Add the atom to the list to display\n          this.nodesOnTheScreen.push(atom);\n          // fakes a click on newly placed atom\n          //atom.selected = false;\n\n          if (unlock) {\n            //Make this molecule spawn with all of it's parent's inputs\n            if (atom.atomType == \"Molecule\") {\n              //Not GitHubMolecule\n              atom.copyInputsFromParent();\n\n              //Make begin propagation from an atom when it is placed. This is used when copy and pasting molecules.\n              if (promise != null) {\n                promise.then(() => {\n                  atom.beginPropagation();\n                });\n              } else {\n                atom.beginPropagation();\n              }\n            }\n\n            atom.updateValue();\n          }\n        }\n      }\n      return promise;\n    } catch (err) {\n      console.warn(\"Unable to place: \" + newAtomObj);\n      console.warn(err);\n      return Promise.resolve();\n    }\n  }\n  /**\n   * Places a new connector within the molecule\n   * @param {object} connectorObj - An object representation of the connector specifying its inputs and outputs.\n   */\n  placeConnector(connectorObj) {\n    var outputAttachmentPoint = false;\n    var inputAttachmentPoint = false;\n\n    this.nodesOnTheScreen.forEach((atom) => {\n      //Check each atom on the screen\n      if (atom.uniqueID == connectorObj.ap1ID) {\n        //When we have found the output atom\n        outputAttachmentPoint = atom.output;\n      }\n      if (atom.uniqueID == connectorObj.ap2ID) {\n        //When we have found the input atom\n        atom.inputs.forEach((input) => {\n          //Check each of its inputs\n          if (input.name == connectorObj.ap2Name) {\n            inputAttachmentPoint = input; //Until we find the one with the right name\n          }\n        });\n      }\n    });\n\n    if (outputAttachmentPoint && inputAttachmentPoint) {\n      //If we have found the output and input\n      new Connector({\n        atomType: \"Connector\",\n        attachmentPoint1: outputAttachmentPoint,\n        attachmentPoint2: inputAttachmentPoint,\n      });\n    } else {\n      console.warn(\"Unable to place connector\");\n    }\n  }\n\n  sendToRender() {\n    //Send code to JSxCAD to render\n    GlobalVariables.writeToDisplay(this.uniqueID);\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/molecule.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 536,
    "kind": "class",
    "name": "Molecule",
    "memberof": "src/molecules/molecule.js",
    "static": true,
    "longname": "src/molecules/molecule.js~Molecule",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/molecule.js",
    "importStyle": "Molecule",
    "description": "This class creates the Molecule atom.",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 537,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 538,
    "kind": "member",
    "name": "nodesOnTheScreen",
    "memberof": "src/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#nodesOnTheScreen",
    "access": "public",
    "description": "A list of all of the atoms within this Molecule which should be drawn on the screen as objects.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 539,
    "kind": "member",
    "name": "inputs",
    "memberof": "src/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#inputs",
    "access": "public",
    "description": "An array of the molecules inputs. Is this not inherited from atom?",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 540,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#name",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 541,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 542,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 543,
    "kind": "member",
    "name": "centerColor",
    "memberof": "src/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#centerColor",
    "access": "public",
    "description": "The color for the middle dot in the molecule",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 544,
    "kind": "member",
    "name": "topLevel",
    "memberof": "src/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#topLevel",
    "access": "public",
    "description": "A flag to indicate if this molecule is the top level molecule.",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 545,
    "kind": "member",
    "name": "processing",
    "memberof": "src/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#processing",
    "access": "public",
    "description": "A flag to indicate if this molecule is currently processing.",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 546,
    "kind": "member",
    "name": "totalAtomCount",
    "memberof": "src/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#totalAtomCount",
    "access": "public",
    "description": "The total number of atoms contained in this molecule",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 547,
    "kind": "member",
    "name": "toProcess",
    "memberof": "src/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#toProcess",
    "access": "public",
    "description": "The total number of atoms contained in this molecule which are waiting to process",
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 548,
    "kind": "member",
    "name": "awaitingPropagationFlag",
    "memberof": "src/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#awaitingPropagationFlag",
    "access": "public",
    "description": "A flag to indicate if this molecule was waiting propagation. If it is it will take place\nthe next time we go up one level.",
    "lineNumber": 78,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 549,
    "kind": "member",
    "name": "units",
    "memberof": "src/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#units",
    "access": "public",
    "description": "A list of available units with corresponding scaling numbers.",
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 550,
    "kind": "member",
    "name": "compiledBom",
    "memberof": "src/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#compiledBom",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 551,
    "kind": "member",
    "name": "partToExport",
    "memberof": "src/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#partToExport",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 552,
    "kind": "member",
    "name": "projectAvailableTags",
    "memberof": "src/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#projectAvailableTags",
    "access": "public",
    "description": "List of all available tags in project.",
    "lineNumber": 103,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 553,
    "kind": "method",
    "name": "copyInputsFromParent",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#copyInputsFromParent",
    "access": "public",
    "description": "Gives this molecule inputs with the same names as all of it's parent's inputs",
    "lineNumber": 113,
    "params": [],
    "return": null
  },
  {
    "__docId__": 554,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#draw",
    "access": "public",
    "description": "Add the center dot to the molecule",
    "lineNumber": 138,
    "params": [],
    "return": null
  },
  {
    "__docId__": 557,
    "kind": "method",
    "name": "createLevaInputs",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#createLevaInputs",
    "access": "public",
    "description": "Create Leva Menu Input - returns to ParameterEditor",
    "lineNumber": 170,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 559,
    "kind": "member",
    "name": "unitsKey",
    "memberof": "src/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#unitsKey",
    "access": "public",
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 560,
    "kind": "method",
    "name": "createLevaExport",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#createLevaExport",
    "access": "public",
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 562,
    "kind": "method",
    "name": "reloadFork",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#reloadFork",
    "access": "public",
    "description": null,
    "lineNumber": 278,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 563,
    "kind": "method",
    "name": "extractBomTags",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#extractBomTags",
    "access": "public",
    "description": "Computes and returns an array of BOMEntry objects after looking at the tags of a geometry.",
    "lineNumber": 315,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 564,
    "kind": "method",
    "name": "clickUp",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#clickUp",
    "access": "public",
    "description": "Set the atom's response to a mouse click up. If the atom is moving this makes it stop moving.",
    "lineNumber": 326,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The X coordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The Y coordinate of the click"
      }
    ],
    "return": null
  },
  {
    "__docId__": 565,
    "kind": "method",
    "name": "selectBox",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#selectBox",
    "access": "public",
    "description": "Delineates bounds for selection box.",
    "lineNumber": 336,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "xEnd",
        "types": [
          "*"
        ]
      },
      {
        "name": "yEnd",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 566,
    "kind": "member",
    "name": "selected",
    "memberof": "src/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#selected",
    "access": "public",
    "description": null,
    "lineNumber": 346,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 567,
    "kind": "method",
    "name": "doubleClick",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#doubleClick",
    "access": "public",
    "description": "Handle double clicks by replacing the molecule currently on the screen with this one, esentially diving into it.",
    "lineNumber": 357,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x coordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y coordinate of the click"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 569,
    "kind": "method",
    "name": "copy",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#copy",
    "access": "public",
    "description": "Pushes serialized atoms into array if selected",
    "lineNumber": 383,
    "params": [],
    "return": null
  },
  {
    "__docId__": 570,
    "kind": "method",
    "name": "undo",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#undo",
    "access": "public",
    "description": "Takes an array of recently deleted atoms",
    "lineNumber": 395,
    "params": [],
    "return": null
  },
  {
    "__docId__": 571,
    "kind": "method",
    "name": "deselect",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#deselect",
    "access": "public",
    "description": "Unselect this molecule",
    "lineNumber": 416,
    "params": [],
    "return": null
  },
  {
    "__docId__": 573,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#updateValue",
    "access": "public",
    "description": "Grab values from the inputs and push them out to the input atoms.",
    "lineNumber": 423,
    "params": [
      {
        "name": "targetName",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 574,
    "kind": "method",
    "name": "compileBom",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#compileBom",
    "access": "public",
    "description": null,
    "lineNumber": 433,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 575,
    "kind": "method",
    "name": "formatBom",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#formatBom",
    "access": "public",
    "description": null,
    "lineNumber": 465,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 576,
    "kind": "method",
    "name": "createLevaBom",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#createLevaBom",
    "access": "public",
    "description": null,
    "lineNumber": 517,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 577,
    "kind": "method",
    "name": "recomputeMolecule",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#recomputeMolecule",
    "access": "public",
    "description": "Reads molecule's output atom ID to recompute the molecule in worker",
    "lineNumber": 545,
    "params": [
      {
        "name": "outputID",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 579,
    "kind": "method",
    "name": "waitOnComingInformation",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#waitOnComingInformation",
    "access": "public",
    "description": "Sets atoms to wait on coming information.",
    "lineNumber": 567,
    "params": [
      {
        "name": "inputName",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 580,
    "kind": "method",
    "name": "propagate",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#propagate",
    "access": "public",
    "description": "Called when this molecules value changes",
    "lineNumber": 578,
    "params": [],
    "return": null
  },
  {
    "__docId__": 581,
    "kind": "method",
    "name": "beginPropagation",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#beginPropagation",
    "access": "public",
    "description": "Walks through each of the atoms in this molecule and begins Propagation from them if they have no inputs to wait for",
    "lineNumber": 589,
    "params": [
      {
        "name": "force",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 582,
    "kind": "method",
    "name": "census",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#census",
    "access": "public",
    "description": "Walks through each of the atoms in this molecule and takes a census of how many there are and how many are currently waiting to be processed.",
    "lineNumber": 602,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 587,
    "kind": "method",
    "name": "changeUnits",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#changeUnits",
    "access": "public",
    "description": null,
    "lineNumber": 615,
    "undocument": true,
    "params": [
      {
        "name": "newUnitsIndex",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 588,
    "kind": "member",
    "name": "unitsIndex",
    "memberof": "src/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#unitsIndex",
    "access": "public",
    "description": null,
    "lineNumber": 616,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 589,
    "kind": "method",
    "name": "goToParentMolecule",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#goToParentMolecule",
    "access": "public",
    "description": "Replace the currently displayed molecule with the parent of this molecule...moves the user up one level.",
    "lineNumber": 622,
    "params": [],
    "return": null
  },
  {
    "__docId__": 590,
    "kind": "method",
    "name": "generateProjectThumbnail",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#generateProjectThumbnail",
    "access": "public",
    "description": null,
    "lineNumber": 638,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 591,
    "kind": "method",
    "name": "requestReadme",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#requestReadme",
    "access": "public",
    "description": "Check to see if any of this molecules children have contributions to make to the README file. Children closer to the top left will be applied first. TODO: No contribution should be made if it's just a title.",
    "lineNumber": 646,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 592,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#serialize",
    "access": "public",
    "description": "Generates and returns a object representation of this molecule and all of its children.",
    "lineNumber": 696,
    "params": [
      {
        "name": "offset",
        "optional": true,
        "types": [
          "{\"x\": number, \"y\": number}"
        ],
        "defaultRaw": {
          "x": 0,
          "y": 0
        },
        "defaultValue": "{\"x\":0,\"y\":0}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 593,
    "kind": "method",
    "name": "deserialize",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#deserialize",
    "access": "public",
    "description": "Load the children of this from a JSON representation",
    "lineNumber": 728,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "A json representation of the molecule"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values to apply to this molecule before de-serializing it's contents. Used by githubmolecules to set top level correctly"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 594,
    "kind": "method",
    "name": "loadGithubMoleculeByName",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#loadGithubMoleculeByName",
    "access": "public",
    "description": "Loads a project into this GitHub molecule from github based on the passed github ID. This function is async and execution time depends on project complexity, and network speed.",
    "lineNumber": 782,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The GitHub project ID for the project to be loaded."
      }
    ],
    "return": null
  },
  {
    "__docId__": 595,
    "kind": "method",
    "name": "remapIDs",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#remapIDs",
    "access": "public",
    "description": "Gives new unique IDs to all atoms in a json object and remaps the connections with the attachment points",
    "lineNumber": 840,
    "params": [
      {
        "name": "json",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 596,
    "kind": "method",
    "name": "deleteNode",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#deleteNode",
    "access": "public",
    "description": "Delete this molecule and everything in it.",
    "lineNumber": 868,
    "params": [
      {
        "name": "backgroundClickAfter",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      },
      {
        "name": "deletePath",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      },
      {
        "name": "silent",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 597,
    "kind": "method",
    "name": "placeAtom",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#placeAtom",
    "access": "public",
    "description": "Places a new atom inside the molecule",
    "lineNumber": 885,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "newAtomObj",
        "description": "An object defining the new atom to be placed"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "moleculeList",
        "description": "Only passed if we are placing an instance of Molecule."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "typesList",
        "description": "A dictionary of all of the available types with references to their constructors"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "unlock",
        "description": "A flag to indicate if this atom should spawn in the unlocked state."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 598,
    "kind": "method",
    "name": "placeConnector",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#placeConnector",
    "access": "public",
    "description": "Places a new connector within the molecule",
    "lineNumber": 970,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "connectorObj",
        "description": "An object representation of the connector specifying its inputs and outputs."
      }
    ],
    "return": null
  },
  {
    "__docId__": 599,
    "kind": "method",
    "name": "sendToRender",
    "memberof": "src/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/molecule.js~Molecule#sendToRender",
    "access": "public",
    "description": null,
    "lineNumber": 1003,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 600,
    "kind": "file",
    "name": "src/molecules/move.js",
    "content": "import Atom from \"../prototypes/atom\";\nimport GlobalVariables from \"../js/globalvariables.js\";\n\n/**\n * This class creates the move atom.\n */\nexport default class Move extends Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    this.addIO(\"input\", \"geometry\", this, \"geometry\", \"\", false, true);\n    this.addIO(\"input\", \"xDist\", this, \"number\", 0.0);\n    this.addIO(\"input\", \"yDist\", this, \"number\", 0.0);\n    this.addIO(\"input\", \"zDist\", this, \"number\", 0.0);\n    this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\n\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"Move\";\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"Move\";\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description = \"Moves a shape laterally in X, Y, Z.\";\n\n    this.setValues(values);\n  }\n\n  /**\n   * Draw the move icon.\n   */\n  draw() {\n    super.draw(); //Super call to draw the rest\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#949294\";\n    GlobalVariables.c.arc(\n      GlobalVariables.widthToPixels(this.x + this.radius / 5),\n      GlobalVariables.heightToPixels(this.y),\n      GlobalVariables.widthToPixels(this.radius / 2.5),\n      0,\n      Math.PI * 2,\n      false\n    );\n    //GlobalVariables.c.fill()\n    GlobalVariables.c.stroke();\n    GlobalVariables.c.closePath();\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#949294\";\n    GlobalVariables.c.arc(\n      GlobalVariables.widthToPixels(this.x - this.radius / 5),\n      GlobalVariables.heightToPixels(this.y),\n      GlobalVariables.widthToPixels(this.radius / 2.5),\n      0,\n      Math.PI * 2,\n      false\n    );\n    GlobalVariables.c.fill();\n    GlobalVariables.c.stroke();\n    GlobalVariables.c.closePath();\n  }\n  /**\n   * Pass the input geometry to a worker function to compute the translation.\n   */\n  updateValue() {\n    super.updateValue();\n\n    if (this.inputs.every((x) => x.ready)) {\n      this.processing = true;\n      var inputID = this.findIOValue(\"geometry\");\n\n      var x = this.findIOValue(\"xDist\");\n      var y = this.findIOValue(\"yDist\");\n      var z = this.findIOValue(\"zDist\");\n      GlobalVariables.cad\n        .move(this.uniqueID, inputID, x, y, z)\n        .then(() => {\n          this.basicThreadValueProcessing();\n        })\n        .catch(this.alertingErrorHandler());\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/move.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 601,
    "kind": "class",
    "name": "Move",
    "memberof": "src/molecules/move.js",
    "static": true,
    "longname": "src/molecules/move.js~Move",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/move.js",
    "importStyle": "Move",
    "description": "This class creates the move atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 602,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/move.js~Move",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/move.js~Move#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 603,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/move.js~Move",
    "static": false,
    "longname": "src/molecules/move.js~Move#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 604,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/move.js~Move",
    "static": false,
    "longname": "src/molecules/move.js~Move#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 605,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/move.js~Move",
    "static": false,
    "longname": "src/molecules/move.js~Move#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 606,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/move.js~Move",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/move.js~Move#draw",
    "access": "public",
    "description": "Draw the move icon.",
    "lineNumber": 43,
    "params": [],
    "return": null
  },
  {
    "__docId__": 607,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/move.js~Move",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/move.js~Move#updateValue",
    "access": "public",
    "description": "Pass the input geometry to a worker function to compute the translation.",
    "lineNumber": 76,
    "params": [],
    "return": null
  },
  {
    "__docId__": 608,
    "kind": "member",
    "name": "processing",
    "memberof": "src/molecules/move.js~Move",
    "static": false,
    "longname": "src/molecules/move.js~Move#processing",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 609,
    "kind": "file",
    "name": "src/molecules/nest.js",
    "content": "import Atom from \"../prototypes/atom\";\nimport GlobalVariables from \"../js/globalvariables.js\";\nimport saveAs from \"../lib/FileSaver.js\";\n\nimport * as svgNest from \"../lib/svgnest.js\";\n\n/**\n * This class creates the nest atom which lets you download a nested .svg file.\n */\nexport default class Nest extends Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"Nest\";\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"Nest\";\n\n    /**\n     * This atom's value. Contains the value of the input geometry, not the stl\n     * @type {string}\n     */\n    this.value = null;\n\n    /**\n     * This atom's height as drawn on the screen\n     */\n    this.height = 0;\n\n    this.addIO(\"input\", \"geometry\", this, \"geometry\", null);\n    this.addIO(\"input\", \"spacing\", this, \"number\", 0.3);\n    this.addIO(\"input\", \"curveTolerance\", this, \"number\", 0.3);\n\n    this.setValues(values);\n\n    /**\n     * Number of times nesting has been tried\n     */\n    this.iterations = 0;\n    /**\n     * Boolean to determine wether nesting process is ongoing\n     */\n    this.isworking = false;\n    /**\n     * Length and width inputs for svg placement\n     */\n    this.material = { width: 121, length: 243 };\n  }\n\n  /**\n   * Draw the svg atom which has a SVG icon.\n   */\n  draw() {\n    super.draw(\"rect\");\n\n    let pixelsRadius = GlobalVariables.widthToPixels(this.radius);\n    this.height = pixelsRadius * 1.5;\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#484848\";\n    GlobalVariables.c.font = `${pixelsRadius / 1.2}px Work Sans Bold`;\n    GlobalVariables.c.fillText(\n      \"SVG\",\n      GlobalVariables.widthToPixels(this.x - this.radius / 1.3),\n      GlobalVariables.heightToPixels(this.y) + this.height / 6\n    );\n    GlobalVariables.c.fill();\n    GlobalVariables.c.closePath();\n  }\n  /**\n   * Re excecutes configure function for nesting if values are updated by user\n   */\n  setValue() {\n    this.setConfig();\n  }\n\n  /**\n   * Set the value to be the input geometry, then call super updateValue()\n   */\n  updateValue() {\n    try {\n      const values = [this.findIOValue(\"geometry\")];\n      this.basicThreadValueProcessing(values, \"outline\");\n    } catch (err) {\n      this.setAlert(err);\n    }\n    //Saves new config values for nesting (Stops any nesting in progress)\n    this.setConfig();\n  }\n\n  /**\n   * Create buttons to start nest, to download the .svg file and checkbox \"Part in Part\".\n   */\n  updateSidebar() {\n    const list = super.updateSidebar();\n    this.createEditableValueListItem(\n      list,\n      this.material,\n      \"width\",\n      \"Width of Material\",\n      true,\n      () => this.setConfig()\n    );\n    this.createEditableValueListItem(\n      list,\n      this.material,\n      \"length\",\n      \"Length of Material\",\n      true,\n      () => this.setConfig()\n    );\n\n    //this.createEditableValueListItem(list,this.BOMitem,'costUSD', 'Price', true, () => this.updateValue())\n    this.createCheckbox(list, \"Part in Part\", false, () => {\n      this.setConfig();\n    });\n    this.createButton(list, this, \"Start Nest\", () => {\n      this.svgToNest();\n    });\n    //remember to disable until svg is nested\n    this.createButton(list, this, \"Download SVG\", () => {\n      this.downloadSvg();\n    });\n\n    var svgButton = document.getElementById(\"DownloadSVG-button\");\n    svgButton.disabled = true;\n    svgButton.classList.add(\"disabled\");\n  }\n\n  /**\n   * Update values for config(). Called when the values on sidebar have been edited.\n   */\n  setConfig() {\n    // config = [distance, curve tolerance,rotations, population size, mutation rate, use holes, concave]\n    const configKeys = [\"spacing\", \"curveTolerance\"];\n    var c = {\n      useholes: false,\n      exploreConcave: false,\n      rotations: 4,\n      mutationRate: 10,\n      populationSize: 10,\n    };\n    for (var i = 0; i < configKeys.length; i++) {\n      var key = configKeys[i];\n      c[key] = this.findIOValue(key);\n    }\n    var check1 = document.getElementById(\"Part in Part\");\n    if (check1 !== null) {\n      if (check1.checked) {\n        c[check1] = true;\n      } else {\n        c[check1] = false;\n      }\n    }\n\n    window.SvgNest.config(c);\n\n    var svgButton = document.getElementById(\"DownloadSVG-button\");\n    if (svgButton !== null) {\n      svgButton.disabled = true;\n      svgButton.classList.add(\"disabled\");\n    }\n\n    // new configs will invalidate current nest\n    if (this.isworking) {\n      this.stopnest();\n    }\n    return false;\n  }\n\n  /**\n   * Turns geometry values into svg then starts nest and returns nested SVG\n   */\n  svgToNest() {\n    //turn into svg\n    const values = [this.findIOValue(\"geometry\")];\n\n    const computeValue = async (values, key) => {\n      try {\n        return await GlobalVariables.ask({ values: values, op: key });\n      } catch (err) {\n        this.setAlert(err);\n      }\n    };\n    var unestedSVG;\n\n    computeValue(values, \"svg\")\n      .then((result) => {\n        if (result != -1) {\n          var decoder = new TextDecoder(\"utf8\");\n          unestedSVG = decoder.decode(result);\n\n          return unestedSVG;\n        } else {\n          this.setAlert(\"Unable to compute\");\n        }\n      })\n      .then((result) => {\n        try {\n          var svg = SvgNest.parsesvg(result);\n          var display = document.getElementById(\"select\");\n          {\n            var wholeSVG = document.createElementNS(\n              \"http://www.w3.org/2000/svg\",\n              \"svg\"\n            );\n            // Copy relevant scaling info\n            wholeSVG.setAttribute(\"width\", this.material[\"width\"]);\n            wholeSVG.setAttribute(\"height\", this.material[\"length\"]);\n            wholeSVG.setAttribute(\"viewBox\", svg.getAttribute(\"viewBox\"));\n            var rect = document.createElementNS(wholeSVG.namespaceURI, \"rect\");\n            rect.setAttribute(\"x\", wholeSVG.viewBox.baseVal.x);\n            rect.setAttribute(\"y\", wholeSVG.viewBox.baseVal.x);\n            rect.setAttribute(\"width\", \"100%\");\n            rect.setAttribute(\"height\", \"100%\");\n            rect.setAttribute(\"class\", \"fullRect\");\n\n            wholeSVG.appendChild(rect);\n          }\n          display.innerHTML = \"\";\n          display.appendChild(wholeSVG); // As a default bin in background\n          display.appendChild(svg);\n        } catch (e) {\n          console.warn(e);\n          //message.innerHTML = e;\n          //message.className = 'error animated bounce';\n          return;\n        }\n\n        //hideSplash();\n        //message.className = 'active animated bounce';\n        //start.className = 'button start disabled';\n\n        //attachSvgListeners(svg);\n\n        //set the bin to wholeSVG\n        this.attachSvgListeners(wholeSVG);\n      });\n  }\n  /**\n   * Defines bin which will be used to place parts for nested svg\n   */\n  attachSvgListeners(svg) {\n    // auto set bin to be whole svg\n    for (var i = 0; i < svg.childNodes.length; i++) {\n      var node = svg.childNodes[i];\n\n      if (node.nodeType == 1) {\n        node.setAttribute(\"class\", \"active\");\n\n        //if(display.className == 'disabled'){\n        //    return;\n        //}\n\n        var currentbin = document.querySelector(\"#select .active\");\n        if (currentbin) {\n          var className = currentbin\n            .getAttribute(\"class\")\n            .replace(\"active\", \"\")\n            .trim();\n          if (!className) currentbin.removeAttribute(\"class\");\n          else currentbin.setAttribute(\"class\", className);\n        }\n        SvgNest.setbin(node);\n        node.setAttribute(\n          \"class\",\n          (node.getAttribute(\"class\") ? node.getAttribute(\"class\") + \" \" : \"\") +\n            \"active\"\n        );\n\n        //start.className = 'button start animated bounce';\n        //message.className = '';\n        this.startnest();\n      }\n    }\n  }\n  /**\n   * Starts nesting, replaces html svg for nested svg\n   */\n  async startnest() {\n    // Once started, don't allow this anymore\n    SvgNest.start(this.progress, this.renderSvg);\n    //remember to change label so nest can stop\n    //startlabel.innerHTML = 'Stop Nest';\n    //start.className = 'button spinner';\n    //configbutton.className = 'button config disabled';\n    //config.className = '';\n\n    var svg = document.querySelector(\"#select svg\");\n    if (svg) {\n      svg.removeAttribute(\"style\");\n    }\n    this.isworking = true;\n  }\n\n  /**\n   * Stops nest and changes flag to not working\n   */\n  stopnest() {\n    SvgNest.stop();\n    //startlabel.innerHTML = 'Start Nest'\n    //start.className = 'button start'\n    //configbutton.className = 'button config'\n\n    this.isworking = false;\n  }\n\n  /**\n     * NOT WORKING Defines percentage of nesting and estimates time and iterations\n              \n    progress(percent, prevpercent = 0){\n        \n        var transition = percent > prevpercent //? '; transition: width 0.1s' : ''\n        //document.getElementById('info_progress').setAttribute('style','width: '+Math.round(percent*100)+'% ' + transition)\n        //document.getElementById('info').setAttribute('style','display: block')\n                \n        prevpercent = percent\n                \n        var now = new Date().getTime()\n        if(startTime && now){\n            var diff = now-startTime\n            // show a time estimate for long-running placements\n\n            var estimate = (diff/percent)*(1-percent)\n            //document.getElementById('info_time').innerHTML = millisecondsToStr(estimate)+' remaining'\n            console.log(estimate)        \n            if(diff > 5000 && percent < 0.3 && percent > 0.02 && estimate > 10000){\n                document.getElementById('info_time').setAttribute('style','display: block')\n            }\n        }\n                \n        if(percent > 0.95 || percent < 0.02){\n            document.getElementById('info_time').setAttribute('style','display: none')\n        }\n        if(percent < 0.02){\n            startTime = new Date().getTime()\n        }\n    }\n    */\n\n  /**\n   * NOT WORKING Defines HTML bit and defines svg list\n   */\n  renderSvg(svglist, efficiency, placed, total) {\n    //this.iterations++;\n\n    //document.getElementById('info_iterations').innerHTML = iterations;\n    //Enable download button if all parts have been placed\n\n    if (placed == total) {\n      var svgButton = document.getElementById(\"DownloadSVG-button\");\n      svgButton.disabled = false;\n      svgButton.classList.remove(\"disabled\");\n    }\n    if (!svglist || svglist.length == 0) {\n      return;\n    }\n    var bins = document.getElementById(\"bins\");\n    bins.innerHTML = \"\";\n\n    for (var i = 0; i < svglist.length; i++) {\n      if (svglist.length > 2) {\n        svglist[i].setAttribute(\"class\", \"grid\");\n      }\n      bins.appendChild(svglist[i]);\n    }\n\n    if (efficiency || efficiency === 0) {\n      // document.getElementById('info_efficiency').innerHTML = Math.round(efficiency*100);\n    }\n\n    //document.getElementById('info_placed').innerHTML = placed+'/'+total;\n    //document.getElementById('info_placement').setAttribute('style','display: block');\n    //display.setAttribute('style','display: none');\n    //download.className = 'button download animated bounce';\n  }\n\n  /**\n   * The function which is called when you press the download button.\n   * Stops nest in progress and downloads file to computer. Only enabled if svg has been nested at least once\n   */\n  downloadSvg() {\n    //if it is still trying iterations stop nest\n    this.stopnest();\n    var bins = document.getElementById(\"bins\");\n\n    if (bins.children.length == 0) {\n      console.warn(\"No SVG to export\");\n      return;\n    }\n\n    var svg;\n\n    var display = document.getElementById(\"select\");\n    svg = display.querySelector(\"svg\");\n\n    if (!svg) {\n      svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    }\n\n    svg = svg.cloneNode(false);\n\n    // maintain stroke, fill etc of input\n    if (SvgNest.style) {\n      svg.appendChild(SvgNest.style);\n    }\n\n    var binHeight = parseInt(bins.children[0].getAttribute(\"height\"));\n\n    for (var i = 0; i < bins.children.length; i++) {\n      var b = bins.children[i];\n\n      var group = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n      group.setAttribute(\"fill\", \"none\");\n      group.setAttribute(\"stroke-width\", \".1\");\n      group.setAttribute(\"fill\", \"none\");\n      group.setAttribute(\n        \"transform\",\n        \"translate(0 \" + binHeight * 1.1 * i + \")\"\n      );\n      for (var j = 0; j < b.children.length; j++) {\n        group.appendChild(b.children[j].cloneNode(true));\n      }\n      svg.appendChild(group);\n    }\n\n    var output;\n    if (typeof XMLSerializer != \"undefined\") {\n      output = new XMLSerializer().serializeToString(svg);\n    } else {\n      output = svg.outerHTML;\n    }\n    var blob = new Blob([output], { type: \"image/svg+xml;charset=utf-8\" });\n    saveAs(blob, \"SVGnest-output.svg\");\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/nest.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 610,
    "kind": "class",
    "name": "Nest",
    "memberof": "src/molecules/nest.js",
    "static": true,
    "longname": "src/molecules/nest.js~Nest",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/nest.js",
    "importStyle": "Nest",
    "description": "This class creates the nest atom which lets you download a nested .svg file.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 611,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/nest.js~Nest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/nest.js~Nest#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 612,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/nest.js~Nest",
    "static": false,
    "longname": "src/molecules/nest.js~Nest#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 613,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/nest.js~Nest",
    "static": false,
    "longname": "src/molecules/nest.js~Nest#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 614,
    "kind": "member",
    "name": "value",
    "memberof": "src/molecules/nest.js~Nest",
    "static": false,
    "longname": "src/molecules/nest.js~Nest#value",
    "access": "public",
    "description": "This atom's value. Contains the value of the input geometry, not the stl",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 615,
    "kind": "member",
    "name": "height",
    "memberof": "src/molecules/nest.js~Nest",
    "static": false,
    "longname": "src/molecules/nest.js~Nest#height",
    "access": "public",
    "description": "This atom's height as drawn on the screen",
    "lineNumber": 38,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 616,
    "kind": "member",
    "name": "iterations",
    "memberof": "src/molecules/nest.js~Nest",
    "static": false,
    "longname": "src/molecules/nest.js~Nest#iterations",
    "access": "public",
    "description": "Number of times nesting has been tried",
    "lineNumber": 49,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 617,
    "kind": "member",
    "name": "isworking",
    "memberof": "src/molecules/nest.js~Nest",
    "static": false,
    "longname": "src/molecules/nest.js~Nest#isworking",
    "access": "public",
    "description": "Boolean to determine wether nesting process is ongoing",
    "lineNumber": 53,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 618,
    "kind": "member",
    "name": "material",
    "memberof": "src/molecules/nest.js~Nest",
    "static": false,
    "longname": "src/molecules/nest.js~Nest#material",
    "access": "public",
    "description": "Length and width inputs for svg placement",
    "lineNumber": 57,
    "type": {
      "types": [
        "{\"width\": number, \"length\": number}"
      ]
    }
  },
  {
    "__docId__": 619,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/nest.js~Nest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/nest.js~Nest#draw",
    "access": "public",
    "description": "Draw the svg atom which has a SVG icon.",
    "lineNumber": 63,
    "params": [],
    "return": null
  },
  {
    "__docId__": 621,
    "kind": "method",
    "name": "setValue",
    "memberof": "src/molecules/nest.js~Nest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/nest.js~Nest#setValue",
    "access": "public",
    "description": "Re excecutes configure function for nesting if values are updated by user",
    "lineNumber": 83,
    "params": [],
    "return": null
  },
  {
    "__docId__": 622,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/nest.js~Nest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/nest.js~Nest#updateValue",
    "access": "public",
    "description": "Set the value to be the input geometry, then call super updateValue()",
    "lineNumber": 90,
    "params": [],
    "return": null
  },
  {
    "__docId__": 623,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/molecules/nest.js~Nest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/nest.js~Nest#updateSidebar",
    "access": "public",
    "description": "Create buttons to start nest, to download the .svg file and checkbox \"Part in Part\".",
    "lineNumber": 104,
    "params": [],
    "return": null
  },
  {
    "__docId__": 624,
    "kind": "method",
    "name": "setConfig",
    "memberof": "src/molecules/nest.js~Nest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/nest.js~Nest#setConfig",
    "access": "public",
    "description": "Update values for config(). Called when the values on sidebar have been edited.",
    "lineNumber": 143,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 625,
    "kind": "method",
    "name": "svgToNest",
    "memberof": "src/molecules/nest.js~Nest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/nest.js~Nest#svgToNest",
    "access": "public",
    "description": "Turns geometry values into svg then starts nest and returns nested SVG",
    "lineNumber": 184,
    "params": [],
    "return": null
  },
  {
    "__docId__": 626,
    "kind": "method",
    "name": "attachSvgListeners",
    "memberof": "src/molecules/nest.js~Nest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/nest.js~Nest#attachSvgListeners",
    "access": "public",
    "description": "Defines bin which will be used to place parts for nested svg",
    "lineNumber": 253,
    "params": [
      {
        "name": "svg",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 627,
    "kind": "method",
    "name": "startnest",
    "memberof": "src/molecules/nest.js~Nest",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/molecules/nest.js~Nest#startnest",
    "access": "public",
    "description": "Starts nesting, replaces html svg for nested svg",
    "lineNumber": 290,
    "params": [],
    "return": null
  },
  {
    "__docId__": 629,
    "kind": "method",
    "name": "stopnest",
    "memberof": "src/molecules/nest.js~Nest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/nest.js~Nest#stopnest",
    "access": "public",
    "description": "Stops nest and changes flag to not working",
    "lineNumber": 309,
    "params": [],
    "return": null
  },
  {
    "__docId__": 631,
    "kind": "method",
    "name": "renderSvg",
    "memberof": "src/molecules/nest.js~Nest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/nest.js~Nest#renderSvg",
    "access": "public",
    "description": "NOT WORKING Defines HTML bit and defines svg list",
    "lineNumber": 354,
    "params": [
      {
        "name": "svglist",
        "types": [
          "*"
        ]
      },
      {
        "name": "efficiency",
        "types": [
          "*"
        ]
      },
      {
        "name": "placed",
        "types": [
          "*"
        ]
      },
      {
        "name": "total",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 632,
    "kind": "method",
    "name": "downloadSvg",
    "memberof": "src/molecules/nest.js~Nest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/nest.js~Nest#downloadSvg",
    "access": "public",
    "description": "The function which is called when you press the download button.\nStops nest in progress and downloads file to computer. Only enabled if svg has been nested at least once",
    "lineNumber": 392,
    "params": [],
    "return": null
  },
  {
    "__docId__": 633,
    "kind": "file",
    "name": "src/molecules/output.js",
    "content": "import Atom from \"../prototypes/atom\";\nimport GlobalVariables from \"../js/globalvariables.js\";\n\n/**\n * This class creates the output atom. The goal is that the output atom is fully transparent to the molecule which contains it\n */\nexport default class Output extends Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    //Add a new output to the current molecule\n    if (typeof this.parent !== \"undefined\") {\n      this.parent.addIO(\n        \"output\",\n        \"Geometry\",\n        this.parent,\n        \"geometry\",\n        this.parent.path\n      );\n    }\n\n    /**\n     * This atom's type...not used?\n     * @type {string}\n     */\n    this.type = \"output\";\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"Output\";\n    /**\n     * This atom's value\n     * @type {object}\n     */\n    this.value = null;\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"Output\";\n    /**\n     * This atom's height\n     * @type {number}\n     */\n    this.height = 16;\n    /**\n     * This atom's radius\n     * @type {number}\n     */\n    this.radius = 1 / 75;\n    /**\n     * This atom's path\n     * @type {string}\n     */\n    this.path = \"\"; //Not sure why documentation made me put this hear instead of pulling it from atom\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description =\n      \"Connect geometry here to make it available in the next level up. \";\n\n    this.setValues(values);\n\n    this.addIO(\"input\", \"number or geometry\", this, \"geometry\", undefined);\n  }\n\n  /**\n   * Take the input value of this function and pass it to the parent Molecule to go up one level.\n   */\n  updateValue() {\n    super.updateValue();\n    if (this.inputs.every((x) => x.ready)) {\n      //still need to understand this\n      this.decreaseToProcessCountByOne();\n\n      var inputID = this.findIOValue(\"number or geometry\");\n      GlobalVariables.cad\n        .output(this.uniqueID, inputID)\n        .then(() => {\n          this.basicThreadValueProcessing();\n          //Recompute molecule gets called if we have successfully updated the value of output\n          this.parent.recomputeMolecule(this.uniqueID);\n        })\n        .catch(this.alertingErrorHandler());\n\n      //Propagate passes the updated value on while parent.updateValue is called when one of the molecule inputs changes\n      this.parent.propagate();\n    }\n  }\n\n  /**\n   * Sends output value to render instead of uniqueID\n   */\n  sendToRender() {\n    //Send code to JSxCAD to render\n    try {\n      GlobalVariables.writeToDisplay(this.uniqueID);\n    } catch (err) {\n      this.setAlert(err);\n    }\n  }\n\n  /**\n   * Sets the parent molecule output to wait on coming information\n   */\n  waitOnComingInformation() {\n    this.parent.output.waitOnComingInformation();\n  }\n\n  /**\n   * Override super delete function to prevent output from being deleted\n   */\n  deleteNode() {}\n\n  /**\n   * A function to allow you to still call the delete function if needed.\n   */\n  deleteOutputAtom(deletePath = true) {\n    super.deleteNode(false, deletePath);\n  }\n\n  /**\n   * Draw the output shape on the screen.\n   */\n  draw() {\n    const xInPixels = GlobalVariables.widthToPixels(this.x);\n    const yInPixels = GlobalVariables.heightToPixels(this.y);\n    const radiusInPixels = GlobalVariables.widthToPixels(this.radius);\n\n    this.height = radiusInPixels;\n\n    //Set colors\n    if (this.processing) {\n      GlobalVariables.c.fillStyle = \"blue\";\n    } else if (this.selected) {\n      GlobalVariables.c.fillStyle = this.selectedColor;\n      GlobalVariables.c.strokeStyle = this.defaultColor;\n      /**\n       * This background color\n       * @type {string}\n       */\n      this.color = this.selectedColor;\n      /**\n       * This atoms accent color\n       * @type {string}\n       */\n      this.strokeColor = this.defaultColor;\n    } else {\n      GlobalVariables.c.fillStyle = this.defaultColor;\n      GlobalVariables.c.strokeStyle = this.selectedColor;\n      this.color = this.defaultColor;\n      this.strokeColor = this.selectedColor;\n    }\n\n    this.inputs.forEach((child) => {\n      child.draw();\n    });\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.font = \"10px Work Sans\";\n    GlobalVariables.c.textAlign = \"start\";\n    GlobalVariables.c.fillText(\n      this.name,\n      xInPixels - radiusInPixels,\n      yInPixels - radiusInPixels * 1.5\n    );\n    GlobalVariables.c.moveTo(\n      xInPixels + radiusInPixels - radiusInPixels * 2,\n      yInPixels - this.height\n    );\n    GlobalVariables.c.lineTo(xInPixels + radiusInPixels - 5, yInPixels);\n    GlobalVariables.c.lineTo(\n      xInPixels + radiusInPixels - radiusInPixels * 2,\n      yInPixels + this.height\n    );\n    GlobalVariables.c.lineTo(\n      xInPixels + radiusInPixels - radiusInPixels * 2,\n      yInPixels - this.height\n    );\n    GlobalVariables.c.fillStyle = this.color;\n    GlobalVariables.c.fill();\n    GlobalVariables.c.lineWidth = 3;\n    GlobalVariables.c.lineJoin = \"round\";\n    GlobalVariables.c.stroke();\n    GlobalVariables.c.closePath();\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/output.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 634,
    "kind": "class",
    "name": "Output",
    "memberof": "src/molecules/output.js",
    "static": true,
    "longname": "src/molecules/output.js~Output",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/output.js",
    "importStyle": "Output",
    "description": "This class creates the output atom. The goal is that the output atom is fully transparent to the molecule which contains it",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 635,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/output.js~Output",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/output.js~Output#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 636,
    "kind": "member",
    "name": "type",
    "memberof": "src/molecules/output.js~Output",
    "static": false,
    "longname": "src/molecules/output.js~Output#type",
    "access": "public",
    "description": "This atom's type...not used?",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 637,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/output.js~Output",
    "static": false,
    "longname": "src/molecules/output.js~Output#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 638,
    "kind": "member",
    "name": "value",
    "memberof": "src/molecules/output.js~Output",
    "static": false,
    "longname": "src/molecules/output.js~Output#value",
    "access": "public",
    "description": "This atom's value",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 639,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/output.js~Output",
    "static": false,
    "longname": "src/molecules/output.js~Output#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 640,
    "kind": "member",
    "name": "height",
    "memberof": "src/molecules/output.js~Output",
    "static": false,
    "longname": "src/molecules/output.js~Output#height",
    "access": "public",
    "description": "This atom's height",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 641,
    "kind": "member",
    "name": "radius",
    "memberof": "src/molecules/output.js~Output",
    "static": false,
    "longname": "src/molecules/output.js~Output#radius",
    "access": "public",
    "description": "This atom's radius",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 642,
    "kind": "member",
    "name": "path",
    "memberof": "src/molecules/output.js~Output",
    "static": false,
    "longname": "src/molecules/output.js~Output#path",
    "access": "public",
    "description": "This atom's path",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 643,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/output.js~Output",
    "static": false,
    "longname": "src/molecules/output.js~Output#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 644,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/output.js~Output",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/output.js~Output#updateValue",
    "access": "public",
    "description": "Take the input value of this function and pass it to the parent Molecule to go up one level.",
    "lineNumber": 76,
    "params": [],
    "return": null
  },
  {
    "__docId__": 645,
    "kind": "method",
    "name": "sendToRender",
    "memberof": "src/molecules/output.js~Output",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/output.js~Output#sendToRender",
    "access": "public",
    "description": "Sends output value to render instead of uniqueID",
    "lineNumber": 100,
    "params": [],
    "return": null
  },
  {
    "__docId__": 646,
    "kind": "method",
    "name": "waitOnComingInformation",
    "memberof": "src/molecules/output.js~Output",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/output.js~Output#waitOnComingInformation",
    "access": "public",
    "description": "Sets the parent molecule output to wait on coming information",
    "lineNumber": 112,
    "params": [],
    "return": null
  },
  {
    "__docId__": 647,
    "kind": "method",
    "name": "deleteNode",
    "memberof": "src/molecules/output.js~Output",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/output.js~Output#deleteNode",
    "access": "public",
    "description": "Override super delete function to prevent output from being deleted",
    "lineNumber": 119,
    "params": [],
    "return": null
  },
  {
    "__docId__": 648,
    "kind": "method",
    "name": "deleteOutputAtom",
    "memberof": "src/molecules/output.js~Output",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/output.js~Output#deleteOutputAtom",
    "access": "public",
    "description": "A function to allow you to still call the delete function if needed.",
    "lineNumber": 124,
    "params": [
      {
        "name": "deletePath",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": null
  },
  {
    "__docId__": 649,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/output.js~Output",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/output.js~Output#draw",
    "access": "public",
    "description": "Draw the output shape on the screen.",
    "lineNumber": 131,
    "params": [],
    "return": null
  },
  {
    "__docId__": 651,
    "kind": "member",
    "name": "color",
    "memberof": "src/molecules/output.js~Output",
    "static": false,
    "longname": "src/molecules/output.js~Output#color",
    "access": "public",
    "description": "This background color",
    "lineNumber": 148,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 652,
    "kind": "member",
    "name": "strokeColor",
    "memberof": "src/molecules/output.js~Output",
    "static": false,
    "longname": "src/molecules/output.js~Output#strokeColor",
    "access": "public",
    "description": "This atoms accent color",
    "lineNumber": 153,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 655,
    "kind": "file",
    "name": "src/molecules/readme.js",
    "content": "import Atom from \"../prototypes/atom\";\nimport GlobalVariables from \"../js/globalvariables.js\";\nimport { e, re } from \"mathjs\";\n\n/**\n * This class creates the readme atom.\n */\nexport default class Readme extends Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.atomType = \"Readme\";\n    /**\n     * The text to appear in the README file\n     * @type {string}\n     */\n    this.readmeText = \"Readme text here\";\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.type = \"readme\";\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"README\";\n    /**\n     * This atom's radius...probably inherited and can be deleted\n     * @type {number}\n     */\n    this.radius = 1 / 100;\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description =\n      \"A place to put project notes. These will appear in the GitHub readme and in the description of molecules up the chain. Markdown is supported. \";\n\n    /**\n     * This atom's height as drawn on the screen\n     */\n    this.height = 10;\n\n    /**\n     * Should this atom contribute to the molecule level readme\n     */\n    this.global = true;\n\n    this.addIO(\"input\", \"geometry\", this, \"geometry\", undefined);\n\n    this.setValues(values);\n  }\n\n  /**\n   * Draw the readme atom with // icon.\n   */\n  draw() {\n    super.draw(\"square\");\n\n    let pixelsRadius = GlobalVariables.widthToPixels(this.radius);\n    this.height = pixelsRadius;\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#484848\";\n    GlobalVariables.c.font = `${pixelsRadius * 2.5}px Work Sans Bold`;\n    GlobalVariables.c.fillText(\n      \"\\u2263\",\n      GlobalVariables.widthToPixels(this.x - this.radius / 1.5),\n      GlobalVariables.heightToPixels(this.y) + this.height / 1.5\n    );\n    GlobalVariables.c.fill();\n    GlobalVariables.c.closePath();\n  } // 8801\n  /**\n   * Update the readme text. Called when the readme text has been edited.\n   */\n  setValue(newText) {\n    this.readmeText = newText;\n  }\n\n  /**\n   * Creates the Leva input for this atom\n   */\n  createLevaInputs() {\n    let inputParams = {};\n\n    inputParams[this.name + this.uniqueID] = {\n      value: this.readmeText,\n      label: this.name,\n      rows: 10,\n      onChange: (value) => {\n        if (this.readmeText !== value) {\n          this.setValue(value);\n        }\n      },\n    };\n    return inputParams;\n  }\n\n  async generateProjectThumbnail() {\n    let thumb = this.findIOValue(\"geometry\");\n    //Generate a thumbnail for the project\n    if (thumb !== undefined) {\n      return GlobalVariables.cad.generateThumbnail(thumb);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Provides this molecules contribution to the global Readme\n   */\n  async requestReadme() {\n    if (this.global) {\n      return this.generateProjectThumbnail()\n        .then((res) => {\n          if (res !== null) {\n            return {\n              readMeText: this.readmeText,\n              svg: res,\n              uniqueID: this.uniqueID,\n            };\n          } else {\n            return {\n              readMeText: this.readmeText,\n              svg: null,\n              uniqueID: this.uniqueID,\n            };\n          }\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * Skip write to display when this atom is clicked\n   */\n  sendToRender() {\n    console.log(\"nothing to render in readme\");\n  }\n\n  /**\n   * Call super delete node and then grab input that calls function to delete the file from github\n   */\n  deleteNode() {\n    super.deleteNode();\n    // var f = document.getElementById(\"fileDeleteInput\");\n    //f.value = this.fileName;\n    //f.click();\n  }\n\n  /**\n   * Add the readme text to the information saved for this atom\n   */\n  serialize(values) {\n    //Save the readme text to the serial stream\n    var valuesObj = super.serialize(values);\n\n    valuesObj.readmeText = this.readmeText;\n    valuesObj.global = this.global;\n\n    return valuesObj;\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/readme.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 656,
    "kind": "class",
    "name": "Readme",
    "memberof": "src/molecules/readme.js",
    "static": true,
    "longname": "src/molecules/readme.js~Readme",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/readme.js",
    "importStyle": "Readme",
    "description": "This class creates the readme atom.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 657,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/readme.js~Readme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/readme.js~Readme#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 658,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/molecules/readme.js~Readme#atomType",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 659,
    "kind": "member",
    "name": "readmeText",
    "memberof": "src/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/molecules/readme.js~Readme#readmeText",
    "access": "public",
    "description": "The text to appear in the README file",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 660,
    "kind": "member",
    "name": "type",
    "memberof": "src/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/molecules/readme.js~Readme#type",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 661,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/molecules/readme.js~Readme#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 662,
    "kind": "member",
    "name": "radius",
    "memberof": "src/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/molecules/readme.js~Readme#radius",
    "access": "public",
    "description": "This atom's radius...probably inherited and can be deleted",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 663,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/molecules/readme.js~Readme#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 664,
    "kind": "member",
    "name": "height",
    "memberof": "src/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/molecules/readme.js~Readme#height",
    "access": "public",
    "description": "This atom's height as drawn on the screen",
    "lineNumber": 51,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 665,
    "kind": "member",
    "name": "global",
    "memberof": "src/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/molecules/readme.js~Readme#global",
    "access": "public",
    "description": "Should this atom contribute to the molecule level readme",
    "lineNumber": 56,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 666,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/readme.js~Readme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/readme.js~Readme#draw",
    "access": "public",
    "description": "Draw the readme atom with // icon.",
    "lineNumber": 66,
    "params": [],
    "return": null
  },
  {
    "__docId__": 668,
    "kind": "method",
    "name": "setValue",
    "memberof": "src/molecules/readme.js~Readme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/readme.js~Readme#setValue",
    "access": "public",
    "description": "Update the readme text. Called when the readme text has been edited.",
    "lineNumber": 86,
    "params": [
      {
        "name": "newText",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 670,
    "kind": "method",
    "name": "createLevaInputs",
    "memberof": "src/molecules/readme.js~Readme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/readme.js~Readme#createLevaInputs",
    "access": "public",
    "description": "Creates the Leva input for this atom",
    "lineNumber": 93,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 671,
    "kind": "method",
    "name": "generateProjectThumbnail",
    "memberof": "src/molecules/readme.js~Readme",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/molecules/readme.js~Readme#generateProjectThumbnail",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 672,
    "kind": "method",
    "name": "requestReadme",
    "memberof": "src/molecules/readme.js~Readme",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/molecules/readme.js~Readme#requestReadme",
    "access": "public",
    "description": "Provides this molecules contribution to the global Readme",
    "lineNumber": 122,
    "params": [],
    "return": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 673,
    "kind": "method",
    "name": "sendToRender",
    "memberof": "src/molecules/readme.js~Readme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/readme.js~Readme#sendToRender",
    "access": "public",
    "description": "Skip write to display when this atom is clicked",
    "lineNumber": 151,
    "params": [],
    "return": null
  },
  {
    "__docId__": 674,
    "kind": "method",
    "name": "deleteNode",
    "memberof": "src/molecules/readme.js~Readme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/readme.js~Readme#deleteNode",
    "access": "public",
    "description": "Call super delete node and then grab input that calls function to delete the file from github",
    "lineNumber": 158,
    "params": [],
    "return": null
  },
  {
    "__docId__": 675,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/molecules/readme.js~Readme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/readme.js~Readme#serialize",
    "access": "public",
    "description": "Add the readme text to the information saved for this atom",
    "lineNumber": 168,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 676,
    "kind": "file",
    "name": "src/molecules/rectangle.js",
    "content": "import Atom from \"../prototypes/atom\";\nimport GlobalVariables from \"../js/globalvariables.js\";\n\n/**\n * This class creates the rectangle atom.\n */\nexport default class Rectangle extends Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    this.addIO(\"input\", \"x length\", this, \"number\", 10.0);\n    this.addIO(\"input\", \"y length\", this, \"number\", 10.0);\n    this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\n\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"Rectangle\";\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"Rectangle\";\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description = \"Creates a new rectangle.\";\n\n    this.setValues(values);\n  }\n\n  /**\n   * Starts propagation from this atom if it is not waiting for anything up stream.\n   */\n  beginPropagation() {\n    //Check to see if a value already exists. Generate it if it doesn't. Only do this for circles and rectangles\n\n    //Triggers inputs with nothing connected to begin propagation\n    this.inputs.forEach((input) => {\n      input.beginPropagation();\n    });\n  }\n\n  /**\n   * Draw the rectangle atom & icon.\n   */\n  draw() {\n    super.draw(); //Super call to draw the rest\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#949294\";\n    GlobalVariables.c.rect(\n      GlobalVariables.widthToPixels(this.x - this.radius / 2),\n      GlobalVariables.heightToPixels(this.y - this.radius * 2),\n      GlobalVariables.widthToPixels(this.radius),\n      GlobalVariables.widthToPixels(this.radius)\n    );\n    //GlobalVariables.c.fill()\n    GlobalVariables.c.stroke();\n    GlobalVariables.c.closePath();\n  }\n\n  /**\n   * Create a new rectangle in a worker thread.\n   */\n  updateValue() {\n    super.updateValue();\n    var xVal = this.findIOValue(\"x length\");\n    var yVal = this.findIOValue(\"y length\");\n\n    GlobalVariables.cad\n      .rectangle(this.uniqueID, xVal, yVal)\n      .then(() => {\n        this.basicThreadValueProcessing();\n      })\n      .catch(this.alertingErrorHandler());\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/rectangle.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 677,
    "kind": "class",
    "name": "Rectangle",
    "memberof": "src/molecules/rectangle.js",
    "static": true,
    "longname": "src/molecules/rectangle.js~Rectangle",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/rectangle.js",
    "importStyle": "Rectangle",
    "description": "This class creates the rectangle atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 678,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/rectangle.js~Rectangle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/rectangle.js~Rectangle#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 679,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/rectangle.js~Rectangle",
    "static": false,
    "longname": "src/molecules/rectangle.js~Rectangle#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 680,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/rectangle.js~Rectangle",
    "static": false,
    "longname": "src/molecules/rectangle.js~Rectangle#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 681,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/rectangle.js~Rectangle",
    "static": false,
    "longname": "src/molecules/rectangle.js~Rectangle#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 682,
    "kind": "method",
    "name": "beginPropagation",
    "memberof": "src/molecules/rectangle.js~Rectangle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/rectangle.js~Rectangle#beginPropagation",
    "access": "public",
    "description": "Starts propagation from this atom if it is not waiting for anything up stream.",
    "lineNumber": 41,
    "params": [],
    "return": null
  },
  {
    "__docId__": 683,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/rectangle.js~Rectangle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/rectangle.js~Rectangle#draw",
    "access": "public",
    "description": "Draw the rectangle atom & icon.",
    "lineNumber": 53,
    "params": [],
    "return": null
  },
  {
    "__docId__": 684,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/rectangle.js~Rectangle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/rectangle.js~Rectangle#updateValue",
    "access": "public",
    "description": "Create a new rectangle in a worker thread.",
    "lineNumber": 72,
    "params": [],
    "return": null
  },
  {
    "__docId__": 685,
    "kind": "file",
    "name": "src/molecules/regularPolygon.js",
    "content": "import Atom from \"../prototypes/atom\";\nimport GlobalVariables from \"../js/globalvariables.js\";\n\n/**\n * This class creates the regular polygon atom.\n */\nexport default class RegularPolygon extends Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    this.addIO(\"input\", \"number of sides\", this, \"number\", 6);\n    this.addIO(\"input\", \"diameter\", this, \"number\", 10.0);\n    this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\n\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"RegularPolygon\";\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"RegularPolygon\";\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description =\n      \"Creates a new regular polygon. Corners are on the diameter.\";\n\n    this.setValues(values);\n  }\n\n  /**\n   * Draw the circle atom & icon.\n   */\n  draw() {\n    super.draw(); //Super call to draw the rest\n\n    let xInPixels = GlobalVariables.widthToPixels(this.x);\n    let yInPixels = GlobalVariables.heightToPixels(this.y);\n    let radiusInPixels = GlobalVariables.widthToPixels(this.radius);\n\n    // polygon in progress - replace numbers with variables\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#949294\";\n    GlobalVariables.c.moveTo(\n      xInPixels - radiusInPixels / 3,\n      yInPixels + radiusInPixels / 1.7\n    );\n    GlobalVariables.c.lineTo(\n      xInPixels + radiusInPixels / 3,\n      yInPixels + radiusInPixels / 1.7\n    );\n    GlobalVariables.c.lineTo(xInPixels + radiusInPixels / 1.5, yInPixels);\n    GlobalVariables.c.lineTo(\n      xInPixels + radiusInPixels / 2.5,\n      yInPixels - radiusInPixels / 1.7\n    );\n    GlobalVariables.c.lineTo(\n      xInPixels - radiusInPixels / 2.5,\n      yInPixels - radiusInPixels / 1.7\n    );\n    GlobalVariables.c.lineTo(xInPixels - radiusInPixels / 1.5, yInPixels);\n    GlobalVariables.c.lineTo(\n      xInPixels - radiusInPixels / 3,\n      yInPixels + radiusInPixels / 1.7\n    );\n    GlobalVariables.c.stroke();\n    GlobalVariables.c.closePath();\n  }\n\n  /**\n   * Starts propagation from this atom if it is not waiting for anything up stream.\n   */\n\n  beginPropagation(force = false) {\n    //Check to see if a value already exists. Generate it if it doesn't. Only do this for circles, rectangles, and regular polygons\n\n    this.inputs.forEach((input) => {\n      input.beginPropagation();\n    });\n  }\n\n  /**\n   * Create a new regular polygon in a worker thread.\n   */\n  updateValue() {\n    super.updateValue();\n    var numberOfSides = this.findIOValue(\"number of sides\");\n    var diameter = this.findIOValue(\"diameter\");\n\n    GlobalVariables.cad\n      .regularPolygon(this.uniqueID, diameter / 2, numberOfSides)\n      .then(() => {\n        this.basicThreadValueProcessing();\n      })\n      .catch(this.alertingErrorHandler());\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/regularPolygon.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 686,
    "kind": "class",
    "name": "RegularPolygon",
    "memberof": "src/molecules/regularPolygon.js",
    "static": true,
    "longname": "src/molecules/regularPolygon.js~RegularPolygon",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/regularPolygon.js",
    "importStyle": "RegularPolygon",
    "description": "This class creates the regular polygon atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 687,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/regularPolygon.js~RegularPolygon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/regularPolygon.js~RegularPolygon#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 688,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/regularPolygon.js~RegularPolygon",
    "static": false,
    "longname": "src/molecules/regularPolygon.js~RegularPolygon#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 689,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/regularPolygon.js~RegularPolygon",
    "static": false,
    "longname": "src/molecules/regularPolygon.js~RegularPolygon#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 690,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/regularPolygon.js~RegularPolygon",
    "static": false,
    "longname": "src/molecules/regularPolygon.js~RegularPolygon#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 691,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/regularPolygon.js~RegularPolygon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/regularPolygon.js~RegularPolygon#draw",
    "access": "public",
    "description": "Draw the circle atom & icon.",
    "lineNumber": 42,
    "params": [],
    "return": null
  },
  {
    "__docId__": 692,
    "kind": "method",
    "name": "beginPropagation",
    "memberof": "src/molecules/regularPolygon.js~RegularPolygon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/regularPolygon.js~RegularPolygon#beginPropagation",
    "access": "public",
    "description": "Starts propagation from this atom if it is not waiting for anything up stream.",
    "lineNumber": 82,
    "params": [
      {
        "name": "force",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 693,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/regularPolygon.js~RegularPolygon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/regularPolygon.js~RegularPolygon#updateValue",
    "access": "public",
    "description": "Create a new regular polygon in a worker thread.",
    "lineNumber": 93,
    "params": [],
    "return": null
  },
  {
    "__docId__": 694,
    "kind": "file",
    "name": "src/molecules/rotate.js",
    "content": "import Atom from \"../prototypes/atom\";\nimport GlobalVariables from \"../js/globalvariables.js\";\n\n/**\n * This class creates the rotate atom.\n */\nexport default class Rotate extends Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    this.addIO(\"input\", \"geometry\", this, \"geometry\", \"\", false, true);\n    this.addIO(\"input\", \"x-axis degrees\", this, \"number\", 0.0);\n    this.addIO(\"input\", \"y-axis degrees\", this, \"number\", 0.0);\n    this.addIO(\"input\", \"z-axis degrees\", this, \"number\", 0.0);\n    this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\n\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"Rotate\";\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"Rotate\";\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description =\n      \"Rotates the input geometry around the X, Y, or Z axis. Inputs are degrees.\";\n\n    this.setValues(values);\n  }\n\n  /**\n   * Draw the circle atom & icon.\n   */\n  draw() {\n    super.draw(); //Super call to draw the rest\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#949294\";\n    GlobalVariables.c.ellipse(\n      GlobalVariables.widthToPixels(this.x),\n      GlobalVariables.heightToPixels(this.y),\n      GlobalVariables.widthToPixels(this.radius / 1.5),\n      GlobalVariables.widthToPixels(this.radius / 2.3),\n      Math.PI / 4,\n      0,\n      Math.PI * 2\n    );\n    GlobalVariables.c.stroke();\n    GlobalVariables.c.closePath();\n  }\n\n  /**\n   * Create Leva Menu Inputs - returns to ParameterEditor\n   */\n  createLevaInputs() {\n    let inputParams = {};\n\n    /** Runs through active atom inputs and adds IO parameters to default param*/\n    if (this.inputs) {\n      this.inputs.map((input) => {\n        const checkConnector = () => {\n          return input.connectors.length > 0;\n        };\n\n        /* Makes inputs for Io's other than geometry */\n        if (input.valueType !== \"geometry\") {\n          inputParams[this.uniqueID + input.name] = {\n            value: input.value,\n            label: input.name,\n            step: 0.5,\n            disabled: checkConnector(),\n            onChange: (value) => {\n              if (input.value !== value) {\n                console.log(input.name, value);\n                input.setValue(value);\n              }\n            },\n          };\n        }\n      });\n      return inputParams;\n    }\n  }\n\n  /**\n   * Pass the input shape to a worker thread to compute the rotation\n   */\n  updateValue() {\n    super.updateValue();\n\n    if (this.inputs.every((x) => x.ready)) {\n      this.processing = true;\n      var inputID = this.findIOValue(\"geometry\");\n      var x = this.findIOValue(\"x-axis degrees\");\n      var y = this.findIOValue(\"y-axis degrees\");\n      var z = this.findIOValue(\"z-axis degrees\");\n      GlobalVariables.cad\n        .rotate(inputID, x, y, z, this.uniqueID)\n        .then(() => {\n          this.basicThreadValueProcessing();\n        })\n        .catch(this.alertingErrorHandler());\n    }\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/rotate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 695,
    "kind": "class",
    "name": "Rotate",
    "memberof": "src/molecules/rotate.js",
    "static": true,
    "longname": "src/molecules/rotate.js~Rotate",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/rotate.js",
    "importStyle": "Rotate",
    "description": "This class creates the rotate atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 696,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/rotate.js~Rotate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/rotate.js~Rotate#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 697,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/rotate.js~Rotate",
    "static": false,
    "longname": "src/molecules/rotate.js~Rotate#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 698,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/rotate.js~Rotate",
    "static": false,
    "longname": "src/molecules/rotate.js~Rotate#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 699,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/rotate.js~Rotate",
    "static": false,
    "longname": "src/molecules/rotate.js~Rotate#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 700,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/rotate.js~Rotate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/rotate.js~Rotate#draw",
    "access": "public",
    "description": "Draw the circle atom & icon.",
    "lineNumber": 44,
    "params": [],
    "return": null
  },
  {
    "__docId__": 701,
    "kind": "method",
    "name": "createLevaInputs",
    "memberof": "src/molecules/rotate.js~Rotate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/rotate.js~Rotate#createLevaInputs",
    "access": "public",
    "description": "Create Leva Menu Inputs - returns to ParameterEditor",
    "lineNumber": 65,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 702,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/rotate.js~Rotate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/rotate.js~Rotate#updateValue",
    "access": "public",
    "description": "Pass the input shape to a worker thread to compute the rotation",
    "lineNumber": 98,
    "params": [],
    "return": null
  },
  {
    "__docId__": 703,
    "kind": "member",
    "name": "processing",
    "memberof": "src/molecules/rotate.js~Rotate",
    "static": false,
    "longname": "src/molecules/rotate.js~Rotate#processing",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 704,
    "kind": "file",
    "name": "src/molecules/shrinkWrap.js",
    "content": "import Atom from \"../prototypes/atom.js\";\nimport { addOrDeletePorts } from \"../js/alwaysOneFreeInput.js\";\nimport GlobalVariables from \"../js/globalvariables.js\";\n\n/**\n * This class creates the shrinkwrap atom. This behavior can also be called 'hull'\n */\nexport default class shrinkWrap extends Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\n\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"Shrink Wrap\";\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"Shrink Wrap\";\n    /**\n     * A list of all of the inputs to this molecule. May be passed to the constructor and loaded.\n     * @type {array}\n     */\n    this.ioValues = [];\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description =\n      \"Joins two or more drawings into a single sketch by filling in the space between them. Also called 'hull'\";\n\n    this.setValues(values);\n\n    if (typeof this.ioValues !== \"undefined\") {\n      this.ioValues.forEach((ioValue) => {\n        //for each saved value\n        this.addIO(\"input\", ioValue.name, this, \"geometry\", \"\");\n      });\n    }\n\n    this.setValues([]);\n  }\n\n  /**\n   * Draw the translate icon.\n   */\n  draw() {\n    super.draw(); //Super call to draw the rest\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#949294\";\n    GlobalVariables.c.arc(\n      GlobalVariables.widthToPixels(this.x + this.radius / 4),\n      GlobalVariables.heightToPixels(this.y),\n      GlobalVariables.widthToPixels(this.radius / 2.5),\n      0,\n      Math.PI * 2,\n      false\n    );\n    GlobalVariables.c.fill();\n    GlobalVariables.c.closePath();\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#949294\";\n    GlobalVariables.c.arc(\n      GlobalVariables.widthToPixels(this.x - this.radius / 4),\n      GlobalVariables.heightToPixels(this.y),\n      GlobalVariables.widthToPixels(this.radius / 2.5),\n      0,\n      Math.PI * 2,\n      false\n    );\n    GlobalVariables.c.fill();\n    GlobalVariables.c.closePath();\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#949294\";\n    GlobalVariables.c.rect(\n      GlobalVariables.widthToPixels(this.x - this.radius / 4),\n      GlobalVariables.heightToPixels(this.y - this.radius),\n      GlobalVariables.widthToPixels(this.radius / 2),\n      GlobalVariables.widthToPixels(this.radius / 2)\n    );\n    GlobalVariables.c.fill();\n    GlobalVariables.c.closePath();\n  }\n\n  /**\n   * Generates a list of all of the input shapes, then passees them to a worker thread to compute the hull\n   */\n  updateValue() {\n    super.updateValue();\n\n    if (this.inputs.every((x) => x.ready)) {\n      this.processing = true;\n      var inputsList = [];\n      this.inputs.forEach((io) => {\n        if (io.connectors.length > 0) {\n          inputsList.push(io.getValue());\n        }\n      });\n      GlobalVariables.cad\n        .shrinkWrapSketches(this.uniqueID, inputsList)\n        .then(() => {\n          this.basicThreadValueProcessing();\n        })\n        .catch(this.alertingErrorHandler());\n\n      //Delete or add ports as needed\n      addOrDeletePorts(this);\n    }\n  }\n\n  /**\n   * Add the names of the inputs to the saved object so that they can be loaded later\n   */\n  serialize(savedObject) {\n    var thisAsObject = super.serialize(savedObject);\n\n    var ioValues = [];\n    this.inputs.forEach((io) => {\n      if (io.type == \"input\") {\n        var saveIO = {\n          name: io.name,\n          ioValue: io.getValue(),\n        };\n        ioValues.push(saveIO);\n      }\n    });\n\n    ioValues.forEach((ioValue) => {\n      thisAsObject.ioValues.push(ioValue);\n    });\n\n    return thisAsObject;\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/shrinkWrap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 705,
    "kind": "class",
    "name": "shrinkWrap",
    "memberof": "src/molecules/shrinkWrap.js",
    "static": true,
    "longname": "src/molecules/shrinkWrap.js~shrinkWrap",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/shrinkWrap.js",
    "importStyle": "shrinkWrap",
    "description": "This class creates the shrinkwrap atom. This behavior can also be called 'hull'",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 706,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/shrinkWrap.js~shrinkWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/shrinkWrap.js~shrinkWrap#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 707,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/shrinkWrap.js~shrinkWrap",
    "static": false,
    "longname": "src/molecules/shrinkWrap.js~shrinkWrap#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 708,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/shrinkWrap.js~shrinkWrap",
    "static": false,
    "longname": "src/molecules/shrinkWrap.js~shrinkWrap#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 709,
    "kind": "member",
    "name": "ioValues",
    "memberof": "src/molecules/shrinkWrap.js~shrinkWrap",
    "static": false,
    "longname": "src/molecules/shrinkWrap.js~shrinkWrap#ioValues",
    "access": "public",
    "description": "A list of all of the inputs to this molecule. May be passed to the constructor and loaded.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 710,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/shrinkWrap.js~shrinkWrap",
    "static": false,
    "longname": "src/molecules/shrinkWrap.js~shrinkWrap#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 711,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/shrinkWrap.js~shrinkWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/shrinkWrap.js~shrinkWrap#draw",
    "access": "public",
    "description": "Draw the translate icon.",
    "lineNumber": 55,
    "params": [],
    "return": null
  },
  {
    "__docId__": 712,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/shrinkWrap.js~shrinkWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/shrinkWrap.js~shrinkWrap#updateValue",
    "access": "public",
    "description": "Generates a list of all of the input shapes, then passees them to a worker thread to compute the hull",
    "lineNumber": 99,
    "params": [],
    "return": null
  },
  {
    "__docId__": 713,
    "kind": "member",
    "name": "processing",
    "memberof": "src/molecules/shrinkWrap.js~shrinkWrap",
    "static": false,
    "longname": "src/molecules/shrinkWrap.js~shrinkWrap#processing",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 714,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/molecules/shrinkWrap.js~shrinkWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/shrinkWrap.js~shrinkWrap#serialize",
    "access": "public",
    "description": "Add the names of the inputs to the saved object so that they can be loaded later",
    "lineNumber": 125,
    "params": [
      {
        "name": "savedObject",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 715,
    "kind": "file",
    "name": "src/molecules/tag.js",
    "content": "import Atom from \"../prototypes/atom\";\nimport GlobalVariables from \"../js/globalvariables.js\";\nimport { button, LevaInputs } from \"leva\";\n\n/**\n * This class creates the tag atom.\n */\nexport default class Tag extends Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    this.addIO(\"input\", \"geometry\", this, \"geometry\", \"\", false, true);\n    //this.addIO(\"input\", \"tag\", this, \"string\", \"Tag String\");\n    this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\n\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"Tag\";\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"Tag\";\n    /**\n     * This atom's height as drawn on the screen\n     */\n    this.height;\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description = \"Tags geometry so that it can be extracted later.\";\n\n    /** Array of tags for this atom */\n    this.tags = [\"\"];\n\n    /** Flag for cutlist tag */\n    this.cutTag = false;\n\n    this.setValues(values);\n  }\n\n  /**\n   * Draw the constant which is more rectangular than the regular shape.\n   */\n  draw() {\n    super.draw(\"rect\");\n\n    let pixelsRadius = GlobalVariables.widthToPixels(this.radius);\n    /**\n     * Relates height to radius\n     * @type {number}\n     */\n    this.height = pixelsRadius;\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#484848\";\n    GlobalVariables.c.font = `${pixelsRadius * 1.3}px Work Sans Bold`;\n    GlobalVariables.c.fillText(\n      \"@\",\n      GlobalVariables.widthToPixels(this.x - this.radius / 1.5),\n      GlobalVariables.heightToPixels(this.y) + this.height / 1.5\n    );\n    GlobalVariables.c.fill();\n    GlobalVariables.c.closePath();\n  }\n\n  checkHasTag() {\n    return this.cutTag;\n  }\n\n  addTagsToAvailableTags() {\n    let newProjectTags = Array.from(\n      new Set(\n        GlobalVariables.topLevelMolecule.projectAvailableTags.concat(this.tags)\n      )\n    );\n    GlobalVariables.topLevelMolecule.projectAvailableTags = newProjectTags;\n  }\n\n  createLevaInputs() {\n    let inputParams = {};\n\n    inputParams[this.uniqueID + \"cut_string\"] = {\n      value: this.cutTag,\n      label: \"Cut List Tag\",\n      onChange: (value) => {\n        if (this.cutTag !== value) {\n          if (value === true) {\n            this.cutTag = true;\n            this.tags.push(\"cutLayout\");\n            this.name = this.tags.toString();\n            this.updateValue();\n          } else {\n            this.cutTag = false;\n            this.tags = this.tags.filter((e) => e !== \"cutLayout\");\n            this.name = this.tags.toString();\n            this.updateValue();\n          }\n        }\n      },\n    };\n    inputParams[this.uniqueID + \"custom_string\"] = {\n      value: this.tags.filter((e) => e !== \"cutLayout\")[0],\n      label: \"Add Tag\",\n      disabled: false,\n      onChange: (value) => {\n        this.tags = this.cutTag ? [\"cutLayout\"] : [];\n        this.tags.push(value);\n        this.name = this.tags.toString();\n        this.updateValue();\n      },\n    };\n\n    return inputParams;\n  }\n  /**\n   * Add a tag to the input geometry. The substance is not changed.\n   */\n  updateValue() {\n    super.updateValue();\n\n    if (this.inputs.every((x) => x.ready)) {\n      this.processing = true;\n      var inputID = this.findIOValue(\"geometry\");\n      var tags = this.tags;\n      this.addTagsToAvailableTags();\n      GlobalVariables.cad\n        .tag(this.uniqueID, inputID, tags)\n        .then(() => {\n          this.basicThreadValueProcessing();\n        })\n        .catch(this.alertingErrorHandler());\n    }\n  }\n  /**\n   * Send the value of this atom to the 3D display. Used to display the number\n   */\n  sendToRender() {\n    // do nothing\n    console.log(\"tag has nothing to render\");\n  }\n\n  /**\n   * Add the file name to the object which is saved for this molecule\n   */\n  serialize(offset = { x: 0, y: 0 }) {\n    var superSerialObject = super.serialize(offset);\n    superSerialObject.tags = this.tags;\n    superSerialObject.cutTag = this.cutTag;\n\n    return superSerialObject;\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/tag.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 716,
    "kind": "class",
    "name": "Tag",
    "memberof": "src/molecules/tag.js",
    "static": true,
    "longname": "src/molecules/tag.js~Tag",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/tag.js",
    "importStyle": "Tag",
    "description": "This class creates the tag atom.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 717,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/tag.js~Tag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/tag.js~Tag#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 718,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/tag.js~Tag",
    "static": false,
    "longname": "src/molecules/tag.js~Tag#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 719,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/tag.js~Tag",
    "static": false,
    "longname": "src/molecules/tag.js~Tag#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 720,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/tag.js~Tag",
    "static": false,
    "longname": "src/molecules/tag.js~Tag#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 721,
    "kind": "member",
    "name": "tags",
    "memberof": "src/molecules/tag.js~Tag",
    "static": false,
    "longname": "src/molecules/tag.js~Tag#tags",
    "access": "public",
    "description": "Array of tags for this atom",
    "lineNumber": 41,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 722,
    "kind": "member",
    "name": "cutTag",
    "memberof": "src/molecules/tag.js~Tag",
    "static": false,
    "longname": "src/molecules/tag.js~Tag#cutTag",
    "access": "public",
    "description": "Flag for cutlist tag",
    "lineNumber": 44,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 723,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/tag.js~Tag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/tag.js~Tag#draw",
    "access": "public",
    "description": "Draw the constant which is more rectangular than the regular shape.",
    "lineNumber": 52,
    "params": [],
    "return": null
  },
  {
    "__docId__": 724,
    "kind": "member",
    "name": "height",
    "memberof": "src/molecules/tag.js~Tag",
    "static": false,
    "longname": "src/molecules/tag.js~Tag#height",
    "access": "public",
    "description": "Relates height to radius",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 725,
    "kind": "method",
    "name": "checkHasTag",
    "memberof": "src/molecules/tag.js~Tag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/tag.js~Tag#checkHasTag",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 726,
    "kind": "method",
    "name": "addTagsToAvailableTags",
    "memberof": "src/molecules/tag.js~Tag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/tag.js~Tag#addTagsToAvailableTags",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 727,
    "kind": "method",
    "name": "createLevaInputs",
    "memberof": "src/molecules/tag.js~Tag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/tag.js~Tag#createLevaInputs",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 735,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/tag.js~Tag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/tag.js~Tag#updateValue",
    "access": "public",
    "description": "Add a tag to the input geometry. The substance is not changed.",
    "lineNumber": 126,
    "params": [],
    "return": null
  },
  {
    "__docId__": 736,
    "kind": "member",
    "name": "processing",
    "memberof": "src/molecules/tag.js~Tag",
    "static": false,
    "longname": "src/molecules/tag.js~Tag#processing",
    "access": "public",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 737,
    "kind": "method",
    "name": "sendToRender",
    "memberof": "src/molecules/tag.js~Tag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/tag.js~Tag#sendToRender",
    "access": "public",
    "description": "Send the value of this atom to the 3D display. Used to display the number",
    "lineNumber": 145,
    "params": [],
    "return": null
  },
  {
    "__docId__": 738,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/molecules/tag.js~Tag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/tag.js~Tag#serialize",
    "access": "public",
    "description": "Add the file name to the object which is saved for this molecule",
    "lineNumber": 153,
    "params": [
      {
        "name": "offset",
        "optional": true,
        "types": [
          "{\"x\": number, \"y\": number}"
        ],
        "defaultRaw": {
          "x": 0,
          "y": 0
        },
        "defaultValue": "{\"x\":0,\"y\":0}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 739,
    "kind": "file",
    "name": "src/molecules/text.js",
    "content": "import Atom from \"../prototypes/atom.js\";\nimport GlobalVariables from \"../js/globalvariables.js\";\nimport Fonts from \"../js/fonts.js\";\n\n/**\n * This class creates the circle atom.\n */\nexport default class Text extends Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    super(values);\n\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"Text\";\n    /**\n     * This atom's type\n     * @type {string}\n     */\n    this.atomType = \"Text\";\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description = \"Creates a new text sketch.\";\n\n    this.fontFamily = \"ROBOTO\";\n\n    /**\n     * The index of the currently selected color option.\n     * @type {number}\n     */\n    this.selectedFontIndex = 0;\n\n    this.availableFonts = Fonts;\n\n    this.addIO(\"input\", \"Font Size\", this, \"number\", 10.0);\n    this.addIO(\"input\", \"Text\", this, \"string\", \"Lorem Ipsum\");\n    this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\");\n\n    this.setValues(values);\n  }\n\n  /**\n   * Starts propagation from this atom if it is not waiting for anything up stream.\n   */\n  beginPropagation(force = false) {\n    //Triggers inputs with nothing connected to begin propagation\n    this.inputs.forEach((input) => {\n      input.beginPropagation();\n    });\n  }\n\n  /**\n   * Draw the circle atom & icon.\n   */\n  draw() {\n    super.draw(); //Super call to draw the rest\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = \"#484848\";\n    GlobalVariables.c.font = `${GlobalVariables.widthToPixels(\n      this.radius\n    )}px Work Sans Bold`;\n    GlobalVariables.c.fillText(\n      \"T\",\n      GlobalVariables.widthToPixels(this.x - this.radius / 3),\n      GlobalVariables.heightToPixels(this.y) + this.height / 3\n    );\n    GlobalVariables.c.fill();\n    GlobalVariables.c.closePath();\n  }\n\n  createLevaInputs() {\n    let inputParams = {};\n\n    /** Runs through active atom inputs and adds IO parameters to default param*/\n    if (this.inputs) {\n      this.inputs.map((input) => {\n        const checkConnector = () => {\n          return input.connectors.length > 0;\n        };\n\n        /* Makes inputs for Io's other than geometry */\n        if (input.valueType !== \"geometry\") {\n          inputParams[this.uniqueID + input.name] = {\n            value: input.value,\n            label: input.name,\n            step: 0.25,\n            disabled: checkConnector(),\n            onChange: (value) => {\n              if (input.value !== value) {\n                input.setValue(value);\n                //this.sendToRender();\n              }\n            },\n          };\n        }\n      });\n    }\n    const fontOptions = Fonts;\n\n    inputParams[this.uniqueID + \"FontFamily\"] = {\n      value: Object.keys(fontOptions)[this.selectedFontIndex],\n      label: \"Font Family\",\n      options: Object.keys(fontOptions),\n      onChange: (value) => {\n        if (value != this.fontFamily) {\n          this.selectedFontIndex = Object.keys(fontOptions).indexOf(value);\n          this.fontFamily = Object.keys(fontOptions)[this.selectedFontIndex];\n          this.updateValue();\n        }\n      },\n    };\n\n    return inputParams;\n  }\n\n  /**\n   * Update the value of the circle in worker.\n   */\n  updateValue() {\n    super.updateValue();\n    var fontSize = this.findIOValue(\"Font Size\");\n    var text = this.findIOValue(\"Text\");\n    let fontFamily = this.fontFamily;\n    GlobalVariables.cad\n      .text(this.uniqueID, text, fontSize, fontFamily)\n      .then(() => {\n        this.basicThreadValueProcessing();\n      })\n      .catch(this.alertingErrorHandler());\n  }\n\n  serialize(offset = { x: 0, y: 0 }) {\n    var thisAsObject = super.serialize(offset);\n\n    var ioValues = [];\n    this.inputs.forEach((io) => {\n      if (io.connectors.length > 0) {\n        var saveIO = {\n          name: io.name,\n          ioValue: io.getValue(),\n        };\n        ioValues.push(saveIO);\n      }\n    });\n\n    thisAsObject.ioValues = ioValues;\n    thisAsObject.fontFamily = this.fontFamily;\n    thisAsObject.selectedFontIndex = this.selectedFontIndex;\n\n    return thisAsObject;\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/molecules/text.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 740,
    "kind": "class",
    "name": "Text",
    "memberof": "src/molecules/text.js",
    "static": true,
    "longname": "src/molecules/text.js~Text",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/molecules/text.js",
    "importStyle": "Text",
    "description": "This class creates the circle atom.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 741,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/molecules/text.js~Text",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/text.js~Text#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 742,
    "kind": "member",
    "name": "name",
    "memberof": "src/molecules/text.js~Text",
    "static": false,
    "longname": "src/molecules/text.js~Text#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 743,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/molecules/text.js~Text",
    "static": false,
    "longname": "src/molecules/text.js~Text#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 744,
    "kind": "member",
    "name": "description",
    "memberof": "src/molecules/text.js~Text",
    "static": false,
    "longname": "src/molecules/text.js~Text#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 745,
    "kind": "member",
    "name": "fontFamily",
    "memberof": "src/molecules/text.js~Text",
    "static": false,
    "longname": "src/molecules/text.js~Text#fontFamily",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 746,
    "kind": "member",
    "name": "selectedFontIndex",
    "memberof": "src/molecules/text.js~Text",
    "static": false,
    "longname": "src/molecules/text.js~Text#selectedFontIndex",
    "access": "public",
    "description": "The index of the currently selected color option.",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 747,
    "kind": "member",
    "name": "availableFonts",
    "memberof": "src/molecules/text.js~Text",
    "static": false,
    "longname": "src/molecules/text.js~Text#availableFonts",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 748,
    "kind": "method",
    "name": "beginPropagation",
    "memberof": "src/molecules/text.js~Text",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/text.js~Text#beginPropagation",
    "access": "public",
    "description": "Starts propagation from this atom if it is not waiting for anything up stream.",
    "lineNumber": 52,
    "params": [
      {
        "name": "force",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 749,
    "kind": "method",
    "name": "draw",
    "memberof": "src/molecules/text.js~Text",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/text.js~Text#draw",
    "access": "public",
    "description": "Draw the circle atom & icon.",
    "lineNumber": 62,
    "params": [],
    "return": null
  },
  {
    "__docId__": 750,
    "kind": "method",
    "name": "createLevaInputs",
    "memberof": "src/molecules/text.js~Text",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/text.js~Text#createLevaInputs",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 753,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/molecules/text.js~Text",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/text.js~Text#updateValue",
    "access": "public",
    "description": "Update the value of the circle in worker.",
    "lineNumber": 127,
    "params": [],
    "return": null
  },
  {
    "__docId__": 754,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/molecules/text.js~Text",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/molecules/text.js~Text#serialize",
    "access": "public",
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "params": [
      {
        "name": "offset",
        "optional": true,
        "types": [
          "{\"x\": number, \"y\": number}"
        ],
        "defaultRaw": {
          "x": 0,
          "y": 0
        },
        "defaultValue": "{\"x\":0,\"y\":0}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 755,
    "kind": "file",
    "name": "src/prototypes/atom.js",
    "content": "import AttachmentPoint from \"./attachmentpoint\";\nimport GlobalVariables from \"../js/globalvariables.js\";\nimport showdown from \"showdown\";\nimport globalvariables from \"../js/globalvariables.js\";\n\n/**\n * This class is the prototype for all atoms.\n */\nexport default class Atom {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    //Setup default values\n    /**\n     * An array of all of the input attachment points connected to this atom\n     * @type {array}\n     */\n    this.inputs = [];\n    /**\n     * This atom's output attachment point if it has one\n     * @type {object}\n     */\n    this.output = null;\n    /**\n     * This atom's unique ID. Often overwritten later when loading\n     * @type {number}\n     */\n    this.uniqueID = GlobalVariables.generateUniqueID();\n    /**\n     * A description of this atom\n     * @type {string}\n     */\n    this.description = \"none\";\n    /**\n     * The X cordinate of this atom\n     * @type {number}\n     */\n    this.x = 0;\n    /**\n     * The Y cordinate of this atom\n     * @type {number}\n     */\n    this.y = 0;\n    /**\n     * This atom's radius as displayed on the screen is 1/72 width\n     * @type {number}\n     */\n    this.radius = 1 / 75;\n    /**\n     * This atom's default color (ie when not selected or processing)\n     * @type {string}\n     */\n    this.defaultColor = \"#F3EFEF\";\n    /**\n     * This atom's color when selected\n     * @type {string}\n     */\n    this.selectedColor = \"#484848\";\n    /**\n     * The color currently used for strokes\n     * @type {string}\n     */\n    this.strokeColor = \"#484848\";\n    /**\n     * A flag to indicate if this atom is currently selected\n     * @type {boolean}\n     */\n    this.selected = false;\n    /**\n     * This atom's current color\n     * @type {string}\n     */\n    this.color = \"#F3EFEF\";\n    /**\n     * This atom's name\n     * @type {string}\n     */\n    this.name = \"name0\";\n    /**\n     * This atom's parent, usually the molecule which contains this atom\n     * @type {object}\n     */\n    this.parentMolecule = null;\n    /**\n     * This atom's value...Is can this be done away with? Are we basically storing the value in the output now?\n     * @type {object}\n     */\n    this.value = null;\n    /**\n     * A flag to indicate if this atom is currently being dragged on the screen.\n     * @type {boolean}\n     */\n    this.isMoving = false;\n    /**\n     * A flag to indicate if we are hovering over this atom.\n     * @type {boolean}\n     */\n    this.showHover = false;\n    /**\n     * The X coordinate of this atom now\n     * @type {number}\n     */\n    this.x = 0;\n    /**\n     * The Y coordinate of this atom now\n     * @type {number}\n     */\n    this.y = 0;\n    /**\n     * A warning message displayed next to the atom. Put text in here to have a warning automatically show up. Cleared each time the output is regenerated.\n     * @type {string}\n     */\n    this.alertMessage = \"\";\n    /**\n     * A flag to indicate if the atom is currently computing a new output. Turns the molecule blue.\n     * @type {boolean}\n     */\n    this.processing = false;\n\n    for (var key in values) {\n      /**\n       * Assign each of the values in values as this.value\n       */\n      this[key] = values[key];\n    }\n  }\n\n  /**\n   * Applies each of the passed values to this as this.x\n   * @param {object} values - A list of values to set\n   */\n  setValues(values) {\n    //Assign the object to have the passed in values\n\n    for (var key in values) {\n      this[key] = values[key];\n    }\n\n    if (typeof this.ioValues !== \"undefined\") {\n      this.ioValues.forEach((ioValue) => {\n        //for each saved value\n        this.inputs.forEach((io) => {\n          //Find the matching IO and set it to be the saved value\n          if (ioValue.name == io.name && io.type == \"input\") {\n            io.value = ioValue.ioValue;\n          }\n        });\n      });\n    }\n  }\n\n  /**\n   * Draws the atom on the screen\n   */\n  draw(drawType) {\n    let xInPixels = GlobalVariables.widthToPixels(this.x);\n    let yInPixels = GlobalVariables.heightToPixels(this.y);\n    let radiusInPixels = GlobalVariables.widthToPixels(this.radius);\n\n    this.inputs.forEach((child) => {\n      child.draw();\n    });\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.font = \"10px Work Sans\";\n\n    if (this.processing) {\n      GlobalVariables.c.fillStyle = \"blue\";\n    } else if (this.selected) {\n      GlobalVariables.c.fillStyle = this.selectedColor;\n      GlobalVariables.c.strokeStyle = this.selectedColor;\n      this.color = this.selectedColor;\n      this.strokeColor = this.defaultColor;\n    } else {\n      GlobalVariables.c.fillStyle = this.defaultColor;\n      GlobalVariables.c.strokeStyle = this.selectedColor;\n      this.color = this.defaultColor;\n      this.strokeColor = this.selectedColor;\n    }\n\n    GlobalVariables.c.beginPath();\n    if (drawType == \"rect\") {\n      GlobalVariables.c.rect(\n        xInPixels - radiusInPixels * 1.25,\n        yInPixels - this.height / 1.5,\n        2.5 * radiusInPixels,\n        this.height * 1.25\n      );\n    } else if (drawType == \"square\") {\n      GlobalVariables.c.rect(\n        xInPixels - radiusInPixels,\n        yInPixels - radiusInPixels,\n        2 * radiusInPixels,\n        2 * radiusInPixels\n      );\n    } else {\n      GlobalVariables.c.arc(\n        xInPixels,\n        yInPixels,\n        radiusInPixels,\n        0,\n        Math.PI * 2,\n        false\n      );\n    }\n    GlobalVariables.c.textAlign = \"start\";\n    GlobalVariables.c.fill();\n    GlobalVariables.c.strokeStyle = this.strokeColor;\n    GlobalVariables.c.fillStyle = \"white\";\n    GlobalVariables.c.stroke();\n    GlobalVariables.c.closePath();\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.textAlign = \"start\";\n    GlobalVariables.c.fillText(\n      this.name,\n      xInPixels + radiusInPixels,\n      yInPixels - radiusInPixels\n    );\n    GlobalVariables.c.fill();\n    GlobalVariables.c.strokeStyle = this.strokeColor;\n    GlobalVariables.c.lineWidth = 1;\n    GlobalVariables.c.stroke();\n    GlobalVariables.c.closePath();\n\n    if (this.showHover) {\n      if (this.alertMessage.length > 0) {\n        this.color = \"red\";\n\n        //Draw Alert block\n        GlobalVariables.c.beginPath();\n        const padding = 10;\n        GlobalVariables.c.fillStyle = \"red\";\n        GlobalVariables.c.rect(\n          xInPixels + radiusInPixels - padding / 2,\n          yInPixels - radiusInPixels + padding / 2,\n          GlobalVariables.c.measureText(this.alertMessage.toUpperCase()).width +\n            padding,\n          -(parseInt(GlobalVariables.c.font) + padding)\n        );\n        GlobalVariables.c.fill();\n        GlobalVariables.c.strokeStyle = \"black\";\n        GlobalVariables.c.lineWidth = 1;\n        GlobalVariables.c.stroke();\n        GlobalVariables.c.closePath();\n\n        GlobalVariables.c.beginPath();\n        GlobalVariables.c.fillStyle = \"black\";\n        GlobalVariables.c.fillText(\n          this.alertMessage.toUpperCase(),\n          xInPixels + radiusInPixels,\n          yInPixels - radiusInPixels\n        );\n        GlobalVariables.c.closePath();\n      }\n    }\n  }\n\n  /**\n   * Adds a new attachment point to this atom\n   * @param {boolean} type - The type of the IO (input or output)\n   * @param {string} name - The name of the new attachment point\n   * @param {object} target - The atom to attach the new attachment point to. Should we force this to always be this one?\n   * @param {string} valueType - Describes the type of value the input is expecting options are number, geometry, array\n   * @param {object} defaultValue - The default value to be used when the value is not yet set\n   */\n  addIO(type, name, target, valueType, defaultValue, ready, primary = false) {\n    //compute the baseline offset from parent node\n    if (\n      target.inputs.find((o) => o.name === name && o.type === type) == undefined\n    ) {\n      var offset;\n      if (type == \"input\") {\n        offset = -1 * target.scaledRadius;\n      } else {\n        offset = target.scaledRadius;\n      }\n      var newAp = new AttachmentPoint({\n        parentMolecule: target,\n        defaultOffsetX: offset,\n        defaultOffsetY: 0,\n        type: type,\n        valueType: valueType,\n        name: name,\n        primary: primary,\n        value: defaultValue,\n        defaultValue: defaultValue,\n        uniqueID: GlobalVariables.generateUniqueID(),\n        atomType: \"AttachmentPoint\",\n        ready: true,\n      });\n\n      if (type == \"input\") {\n        target.inputs.push(newAp);\n      } else {\n        target.output = newAp;\n      }\n    }\n  }\n\n  updateIO(type, name, target, valueType, value) {\n    let ap = target.inputs.find((o) => o.name === name && o.type === type);\n    if (ap) {\n      ap.valueType = valueType;\n      ap.value = value;\n    }\n  }\n\n  /**\n   * Removes an attachment point from an atom.\n   * @param {boolean} type - The type of the IO (input or output).\n   * @param {string} name - The name of the new attachment point.\n   * @param {object} target - The attom which the attachment point is attached to. Should\n   * @param {object} silent - Should any connected atoms be informed of the change\n   */\n  removeIO(type, name, target, silent = false) {\n    //Remove the target IO attachment point\n    target.inputs.forEach((input) => {\n      if (input.name == name && input.type == type) {\n        target.inputs.splice(target.inputs.indexOf(input), 1);\n        input.deleteSelf(silent);\n      }\n    });\n  }\n\n  /**\n   * Returns an error handler function usable with Promise.catch.\n   * Prints the stack trace of a thrown error in the console and sets\n   * an alert on this atom with the message of the error.\n   * @returns\n   */\n  alertingErrorHandler() {\n    return (err) => {\n      this.processing = false;\n      console.log(err);\n      this.setAlert(err.message);\n    };\n  }\n\n  /**\n   * Set an alert to display next to the atom.\n   * @param {string} message - The message to display.\n   */\n  setAlert(message) {\n    this.color = \"orange\";\n    this.alertMessage = String(message);\n  }\n\n  /**\n   * Clears the alert message attached to this atom.\n   */\n  clearAlert() {\n    this.color = this.defaultColor;\n    this.alertMessage = \"\";\n  }\n\n  /**\n   * Delineates bounds for selection box.\n   */\n  selectBox(x, y, xEnd, yEnd) {\n    let xIn = Math.min(x, xEnd);\n    let xOut = Math.max(x, xEnd);\n    let yIn = Math.min(y, yEnd);\n    let yOut = Math.max(y, yEnd);\n    let xInPixels = GlobalVariables.widthToPixels(this.x);\n    let yInPixels = GlobalVariables.heightToPixels(this.y);\n    if (xInPixels >= xIn && xInPixels <= xOut) {\n      if (yInPixels >= yIn && yInPixels <= yOut) {\n        //this.isMoving = true\n        this.selected = true;\n      }\n    }\n  }\n\n  /**\n   * Set the atom's response to a mouse click. This usually means selecting the atom and displaying it's contents in 3D\n   * @param {number} x - The X coordinate of the click\n   * @param {number} y - The Y coordinate of the click\n   * @param {boolean} clickProcessed - A flag to indicate if the click has already been processed\n   */\n  clickDown(x, y, clickProcessed) {\n    let xInPixels = GlobalVariables.widthToPixels(this.x);\n    let yInPixels = GlobalVariables.heightToPixels(this.y);\n    let radiusInPixels = GlobalVariables.widthToPixels(this.radius);\n    let atomSelected;\n    //If none of the inputs processed the click see if the atom should, if not clicked, then deselected\n    if (\n      !clickProcessed &&\n      GlobalVariables.distBetweenPoints(x, xInPixels, y, yInPixels) <\n        radiusInPixels\n    ) {\n      this.isMoving = true;\n      this.selected = true;\n      atomSelected = this;\n      this.sendToRender();\n    }\n    //Deselect this if it wasn't clicked on, unless control is held\n    else if (!GlobalVariables.ctrlDown) {\n      this.selected = false;\n    }\n    //Returns true if something was done with the click\n    this.inputs.forEach((child) => {\n      if (child.clickDown(x, y, clickProcessed) == true) {\n        clickProcessed = true;\n      }\n    });\n    if (this.output && !atomSelected) {\n      if (this.output.clickDown(x, y, clickProcessed) == true) {\n        clickProcessed = true;\n      }\n    }\n\n    return atomSelected;\n  }\n\n  /**\n   * Set the atom's response to a mouse double click. By default this isn't to do anything other than mark the double click as handled.\n   * @param {number} x - The X cordinate of the click\n   * @param {number} y - The Y cordinate of the click\n   */\n  doubleClick(x, y) {\n    //returns true if something was done with the click\n    let xInPixels = GlobalVariables.widthToPixels(this.x);\n    let yInPixels = GlobalVariables.heightToPixels(this.y);\n    var clickProcessed = false;\n\n    var distFromClick = GlobalVariables.distBetweenPoints(\n      x,\n      xInPixels,\n      y,\n      yInPixels\n    );\n\n    if (distFromClick < xInPixels) {\n      clickProcessed = true;\n    }\n\n    return clickProcessed;\n  }\n\n  /**\n   * Set the atom's response to a mouse click up. If the atom is moving this makes it stop moving.\n   * @param {number} x - The X cordinate of the click\n   * @param {number} y - The Y cordinate of the click\n   */\n  clickUp(x, y) {\n    this.isMoving = false;\n\n    this.inputs.forEach((child) => {\n      child.clickUp(x, y);\n    });\n    if (this.output) {\n      this.output.clickUp(x, y);\n    }\n  }\n\n  /**\n   * Handle change in position of the mouse. If this atom is currently being moved it's position will be\n   * dragged along with the mouse.\n   * Also forwards the mouse move event to children of this atom so they can react if needed.\n   * @param {number} x - The X cordinate of the click\n   * @param {number} y - The Y cordinate of the click\n   */\n  mouseMove(x, y) {\n    let xInPixels = GlobalVariables.widthToPixels(this.x);\n    let yInPixels = GlobalVariables.heightToPixels(this.y);\n    let radiusInPixels = GlobalVariables.widthToPixels(this.radius);\n    if (this.isMoving == true) {\n      this.x = GlobalVariables.pixelsToWidth(x);\n      this.y = GlobalVariables.pixelsToHeight(y);\n    }\n\n    this.inputs.forEach((child) => {\n      child.mouseMove(x, y);\n    });\n    if (this.output) {\n      this.output.mouseMove(x, y);\n    }\n\n    var distFromClick = GlobalVariables.distBetweenPoints(\n      x,\n      xInPixels,\n      y,\n      yInPixels\n    );\n\n    //If we are close to the attachment point move it to it's hover location to make it accessible\n    if (distFromClick < radiusInPixels) {\n      this.showHover = true;\n    } else {\n      this.showHover = false;\n    }\n  }\n\n  /**\n   * Set the atom's response to a key press. Is used to delete the atom if it is selected.\n   * @param {string} key - The key which has been pressed.\n   */\n  keyPress(key) {\n    this.inputs.forEach((child) => {\n      child.keyPress(key);\n    });\n  }\n\n  /**\n   * Delete this atom. Silent prevents it from telling its neighbors\n   */\n  deleteNode(backgroundClickAfter = true, deletePath = true, silent = false) {\n    this.inputs.forEach((input) => {\n      //disable the inputs before deleting\n      input.ready = false;\n    });\n\n    const inputsCopy = [...this.inputs]; //Make a copy of the inputs list to delete all of them\n    inputsCopy.forEach((input) => {\n      input.deleteSelf(silent);\n    });\n    if (this.output) {\n      this.output.deleteSelf(silent);\n    }\n    /* Remove from worker library */\n    GlobalVariables.cad.deleteFromLibrary(this.uniqueID).then(() => {});\n\n    this.parent.nodesOnTheScreen.splice(\n      this.parent.nodesOnTheScreen.indexOf(this),\n      1\n    ); //remove this node from the list\n  }\n\n  /**\n   * Runs with each frame to draw the atom.\n   */\n  update() {\n    this.inputs.forEach((child) => {\n      child.update();\n    });\n    if (this.output) {\n      this.output.update();\n    }\n\n    this.draw();\n  }\n\n  /**\n   * Create an object containing the information about this atom that we want to save.\n   */\n  serialize(offset = { x: 0, y: 0 }) {\n    //Offsets are used to make copy and pasted atoms move over a little bit\n    var ioValues = [];\n    this.inputs.forEach((io) => {\n      if (\n        typeof io.getValue() == \"number\" ||\n        typeof io.getValue() == \"string\"\n      ) {\n        var saveIO = {\n          name: io.name,\n          ioValue: io.getValue(),\n        };\n        ioValues.push(saveIO);\n      }\n    });\n\n    var object = {\n      atomType: this.atomType,\n      name: this.name,\n      x: this.x + offset.x,\n      y: this.y - offset.y,\n      uniqueID: this.uniqueID,\n      ioValues: ioValues,\n      description: this.description,\n    };\n    return object;\n  }\n\n  /**\n   * Return any contribution from this atom to the README file\n   */\n  requestReadme() {\n    //request any contributions from this atom to the readme\n\n    return [];\n  }\n\n  /**\n   * Set's the output value and shows the atom output on the 3D view.\n   */\n  decreaseToProcessCountByOne() {\n    GlobalVariables.topLevelMolecule.census();\n  }\n\n  /**\n   * Token update value function to give each atom one by default\n   */\n  updateValue() {\n    this.waitOnComingInformation();\n  }\n\n  /**\n   * Used to walk back out the tree generating a list of constants...used for evolve\n   */\n  walkBackForConstants(callback) {\n    //Pass the call further up the chain\n    this.inputs.forEach((input) => {\n      input.connectors.forEach((connector) => {\n        connector.walkBackForConstants(callback);\n      });\n    });\n  }\n\n  /**\n   * Sets the atom to wait on coming information. Basically a pass through, but used for molecules\n   */\n  waitOnComingInformation() {\n    if (this.output) {\n      this.output.waitOnComingInformation();\n    }\n    if (this.processing) {\n      //console.log(\"information sent to something processing\");\n      // this.processing = false;\n    }\n  }\n\n  /**\n   * Calls a worker thread to compute the atom's value.\n   */\n  basicThreadValueProcessing() {\n    this.decreaseToProcessCountByOne();\n    this.clearAlert();\n    if (this.output) {\n      this.output.setValue(this.uniqueID);\n      this.output.ready = true;\n    }\n    this.processing = false;\n    if (this.selected) {\n      this.sendToRender();\n    }\n  }\n\n  /**\n   * Starts propagation placeholder. Most atom types do not begin propagation.\n   */\n  beginPropagation() {}\n\n  /**\n   * Returns an array of length two indicating that this is one atom and if it is waiting to be computed\n   */\n  census() {\n    var waiting = 0;\n    this.inputs.forEach((input) => {\n      if (input.ready != true) {\n        waiting = 1;\n      }\n    });\n    return [1, waiting];\n  }\n\n  /**\n   * Send the value of this atom to the 3D display.\n   */\n  sendToRender() {\n    //Send code to JSxCAD to render\n    try {\n      GlobalVariables.writeToDisplay(this.uniqueID);\n    } catch (err) {\n      this.setAlert(err);\n    }\n  }\n  /**\n   * Create Leva Menu Inputs - returns to ParameterEditor\n   */\n  createLevaInputs() {\n    let inputParams = {};\n\n    /** Runs through active atom inputs and adds IO parameters to default param*/\n    if (this.inputs) {\n      this.inputs.map((input) => {\n        const checkConnector = () => {\n          return input.connectors.length > 0;\n        };\n\n        /* Makes inputs for Io's other than geometry */\n        if (input.valueType !== \"geometry\") {\n          inputParams[this.uniqueID + input.name] = {\n            value: input.value,\n            label: input.name,\n            step: 0.25,\n            disabled: checkConnector(),\n            onChange: (value) => {\n              if (input.value !== value) {\n                input.setValue(value);\n                //this.sendToRender();\n              }\n            },\n          };\n        }\n      });\n      return inputParams;\n    }\n  }\n  /**\n   * Find the value of an input for with a given name.\n   * @param {string} ioName - The name of the target attachment point.\n   */\n  findIOValue(ioName) {\n    ioName = ioName.split(\"~\").join(\"\");\n    var ioValue = null;\n\n    this.inputs.forEach((child) => {\n      if (child.name == ioName && child.type == \"input\") {\n        ioValue = child.getValue();\n      }\n    });\n    return ioValue;\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/prototypes/atom.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 756,
    "kind": "class",
    "name": "Atom",
    "memberof": "src/prototypes/atom.js",
    "static": true,
    "longname": "src/prototypes/atom.js~Atom",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/prototypes/atom.js",
    "importStyle": "Atom",
    "description": "This class is the prototype for all atoms.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 757,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 758,
    "kind": "member",
    "name": "inputs",
    "memberof": "src/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#inputs",
    "access": "public",
    "description": "An array of all of the input attachment points connected to this atom",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 759,
    "kind": "member",
    "name": "output",
    "memberof": "src/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#output",
    "access": "public",
    "description": "This atom's output attachment point if it has one",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 760,
    "kind": "member",
    "name": "uniqueID",
    "memberof": "src/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#uniqueID",
    "access": "public",
    "description": "This atom's unique ID. Often overwritten later when loading",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 761,
    "kind": "member",
    "name": "description",
    "memberof": "src/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 762,
    "kind": "member",
    "name": "x",
    "memberof": "src/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#x",
    "access": "public",
    "description": "The X cordinate of this atom",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 763,
    "kind": "member",
    "name": "y",
    "memberof": "src/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#y",
    "access": "public",
    "description": "The Y cordinate of this atom",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 764,
    "kind": "member",
    "name": "radius",
    "memberof": "src/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#radius",
    "access": "public",
    "description": "This atom's radius as displayed on the screen is 1/72 width",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 765,
    "kind": "member",
    "name": "defaultColor",
    "memberof": "src/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#defaultColor",
    "access": "public",
    "description": "This atom's default color (ie when not selected or processing)",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 766,
    "kind": "member",
    "name": "selectedColor",
    "memberof": "src/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#selectedColor",
    "access": "public",
    "description": "This atom's color when selected",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 767,
    "kind": "member",
    "name": "strokeColor",
    "memberof": "src/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#strokeColor",
    "access": "public",
    "description": "The color currently used for strokes",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 768,
    "kind": "member",
    "name": "selected",
    "memberof": "src/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#selected",
    "access": "public",
    "description": "A flag to indicate if this atom is currently selected",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 769,
    "kind": "member",
    "name": "color",
    "memberof": "src/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#color",
    "access": "public",
    "description": "This atom's current color",
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 770,
    "kind": "member",
    "name": "name",
    "memberof": "src/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 80,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 771,
    "kind": "member",
    "name": "parentMolecule",
    "memberof": "src/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#parentMolecule",
    "access": "public",
    "description": "This atom's parent, usually the molecule which contains this atom",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 772,
    "kind": "member",
    "name": "value",
    "memberof": "src/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#value",
    "access": "public",
    "description": "This atom's value...Is can this be done away with? Are we basically storing the value in the output now?",
    "lineNumber": 90,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 773,
    "kind": "member",
    "name": "isMoving",
    "memberof": "src/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#isMoving",
    "access": "public",
    "description": "A flag to indicate if this atom is currently being dragged on the screen.",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 774,
    "kind": "member",
    "name": "showHover",
    "memberof": "src/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#showHover",
    "access": "public",
    "description": "A flag to indicate if we are hovering over this atom.",
    "lineNumber": 100,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 777,
    "kind": "member",
    "name": "alertMessage",
    "memberof": "src/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#alertMessage",
    "access": "public",
    "description": "A warning message displayed next to the atom. Put text in here to have a warning automatically show up. Cleared each time the output is regenerated.",
    "lineNumber": 115,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 778,
    "kind": "member",
    "name": "processing",
    "memberof": "src/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#processing",
    "access": "public",
    "description": "A flag to indicate if the atom is currently computing a new output. Turns the molecule blue.",
    "lineNumber": 120,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 779,
    "kind": "member",
    "name": "[key]",
    "memberof": "src/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#[key]",
    "access": "public",
    "description": "Assign each of the values in values as this.value",
    "lineNumber": 126,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 780,
    "kind": "method",
    "name": "setValues",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#setValues",
    "access": "public",
    "description": "Applies each of the passed values to this as this.x",
    "lineNumber": 134,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "A list of values to set"
      }
    ],
    "return": null
  },
  {
    "__docId__": 782,
    "kind": "method",
    "name": "draw",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#draw",
    "access": "public",
    "description": "Draws the atom on the screen",
    "lineNumber": 157,
    "params": [
      {
        "name": "drawType",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 788,
    "kind": "method",
    "name": "addIO",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#addIO",
    "access": "public",
    "description": "Adds a new attachment point to this atom",
    "lineNumber": 269,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of the IO (input or output)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the new attachment point"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The atom to attach the new attachment point to. Should we force this to always be this one?"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "valueType",
        "description": "Describes the type of value the input is expecting options are number, geometry, array"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultValue",
        "description": "The default value to be used when the value is not yet set"
      }
    ],
    "return": null
  },
  {
    "__docId__": 789,
    "kind": "method",
    "name": "updateIO",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#updateIO",
    "access": "public",
    "description": null,
    "lineNumber": 303,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "valueType",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 790,
    "kind": "method",
    "name": "removeIO",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#removeIO",
    "access": "public",
    "description": "Removes an attachment point from an atom.",
    "lineNumber": 318,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of the IO (input or output)."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the new attachment point."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The attom which the attachment point is attached to. Should"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "silent",
        "description": "Should any connected atoms be informed of the change"
      }
    ],
    "return": null
  },
  {
    "__docId__": 791,
    "kind": "method",
    "name": "alertingErrorHandler",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#alertingErrorHandler",
    "access": "public",
    "description": "Returns an error handler function usable with Promise.catch.\nPrints the stack trace of a thrown error in the console and sets\nan alert on this atom with the message of the error.",
    "lineNumber": 334,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 793,
    "kind": "method",
    "name": "setAlert",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#setAlert",
    "access": "public",
    "description": "Set an alert to display next to the atom.",
    "lineNumber": 346,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message to display."
      }
    ],
    "return": null
  },
  {
    "__docId__": 796,
    "kind": "method",
    "name": "clearAlert",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#clearAlert",
    "access": "public",
    "description": "Clears the alert message attached to this atom.",
    "lineNumber": 354,
    "params": [],
    "return": null
  },
  {
    "__docId__": 799,
    "kind": "method",
    "name": "selectBox",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#selectBox",
    "access": "public",
    "description": "Delineates bounds for selection box.",
    "lineNumber": 362,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "xEnd",
        "types": [
          "*"
        ]
      },
      {
        "name": "yEnd",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 801,
    "kind": "method",
    "name": "clickDown",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#clickDown",
    "access": "public",
    "description": "Set the atom's response to a mouse click. This usually means selecting the atom and displaying it's contents in 3D",
    "lineNumber": 383,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The X coordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The Y coordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "clickProcessed",
        "description": "A flag to indicate if the click has already been processed"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 805,
    "kind": "method",
    "name": "doubleClick",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#doubleClick",
    "access": "public",
    "description": "Set the atom's response to a mouse double click. By default this isn't to do anything other than mark the double click as handled.",
    "lineNumber": 423,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The X cordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The Y cordinate of the click"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 806,
    "kind": "method",
    "name": "clickUp",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#clickUp",
    "access": "public",
    "description": "Set the atom's response to a mouse click up. If the atom is moving this makes it stop moving.",
    "lineNumber": 448,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The X cordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The Y cordinate of the click"
      }
    ],
    "return": null
  },
  {
    "__docId__": 808,
    "kind": "method",
    "name": "mouseMove",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#mouseMove",
    "access": "public",
    "description": "Handle change in position of the mouse. If this atom is currently being moved it's position will be\ndragged along with the mouse.\nAlso forwards the mouse move event to children of this atom so they can react if needed.",
    "lineNumber": 466,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The X cordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The Y cordinate of the click"
      }
    ],
    "return": null
  },
  {
    "__docId__": 813,
    "kind": "method",
    "name": "keyPress",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#keyPress",
    "access": "public",
    "description": "Set the atom's response to a key press. Is used to delete the atom if it is selected.",
    "lineNumber": 501,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key which has been pressed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 814,
    "kind": "method",
    "name": "deleteNode",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#deleteNode",
    "access": "public",
    "description": "Delete this atom. Silent prevents it from telling its neighbors",
    "lineNumber": 510,
    "params": [
      {
        "name": "backgroundClickAfter",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      },
      {
        "name": "deletePath",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      },
      {
        "name": "silent",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 815,
    "kind": "method",
    "name": "update",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#update",
    "access": "public",
    "description": "Runs with each frame to draw the atom.",
    "lineNumber": 535,
    "params": [],
    "return": null
  },
  {
    "__docId__": 816,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#serialize",
    "access": "public",
    "description": "Create an object containing the information about this atom that we want to save.",
    "lineNumber": 549,
    "params": [
      {
        "name": "offset",
        "optional": true,
        "types": [
          "{\"x\": number, \"y\": number}"
        ],
        "defaultRaw": {
          "x": 0,
          "y": 0
        },
        "defaultValue": "{\"x\":0,\"y\":0}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 817,
    "kind": "method",
    "name": "requestReadme",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#requestReadme",
    "access": "public",
    "description": "Return any contribution from this atom to the README file",
    "lineNumber": 580,
    "params": [],
    "return": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 818,
    "kind": "method",
    "name": "decreaseToProcessCountByOne",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#decreaseToProcessCountByOne",
    "access": "public",
    "description": "Set's the output value and shows the atom output on the 3D view.",
    "lineNumber": 589,
    "params": [],
    "return": null
  },
  {
    "__docId__": 819,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#updateValue",
    "access": "public",
    "description": "Token update value function to give each atom one by default",
    "lineNumber": 596,
    "params": [],
    "return": null
  },
  {
    "__docId__": 820,
    "kind": "method",
    "name": "walkBackForConstants",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#walkBackForConstants",
    "access": "public",
    "description": "Used to walk back out the tree generating a list of constants...used for evolve",
    "lineNumber": 603,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 821,
    "kind": "method",
    "name": "waitOnComingInformation",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#waitOnComingInformation",
    "access": "public",
    "description": "Sets the atom to wait on coming information. Basically a pass through, but used for molecules",
    "lineNumber": 615,
    "params": [],
    "return": null
  },
  {
    "__docId__": 822,
    "kind": "method",
    "name": "basicThreadValueProcessing",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#basicThreadValueProcessing",
    "access": "public",
    "description": "Calls a worker thread to compute the atom's value.",
    "lineNumber": 628,
    "params": [],
    "return": null
  },
  {
    "__docId__": 824,
    "kind": "method",
    "name": "beginPropagation",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#beginPropagation",
    "access": "public",
    "description": "Starts propagation placeholder. Most atom types do not begin propagation.",
    "lineNumber": 644,
    "params": [],
    "return": null
  },
  {
    "__docId__": 825,
    "kind": "method",
    "name": "census",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#census",
    "access": "public",
    "description": "Returns an array of length two indicating that this is one atom and if it is waiting to be computed",
    "lineNumber": 649,
    "params": [],
    "return": {
      "types": [
        "number[]"
      ]
    }
  },
  {
    "__docId__": 826,
    "kind": "method",
    "name": "sendToRender",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#sendToRender",
    "access": "public",
    "description": "Send the value of this atom to the 3D display.",
    "lineNumber": 662,
    "params": [],
    "return": null
  },
  {
    "__docId__": 827,
    "kind": "method",
    "name": "createLevaInputs",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#createLevaInputs",
    "access": "public",
    "description": "Create Leva Menu Inputs - returns to ParameterEditor",
    "lineNumber": 673,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 828,
    "kind": "method",
    "name": "findIOValue",
    "memberof": "src/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/atom.js~Atom#findIOValue",
    "access": "public",
    "description": "Find the value of an input for with a given name.",
    "lineNumber": 706,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "ioName",
        "description": "The name of the target attachment point."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 829,
    "kind": "file",
    "name": "src/prototypes/attachmentpoint.js",
    "content": "import Connector from \"./connector.js\";\nimport GlobalVariables from \"../js/globalvariables.js\";\n\n/**\n * This class creates a new attachmentPoint which are the input and output blobs on Atoms\n */\nexport default class AttachmentPoint {\n  // Constant dictates how far from the parent molecule APs are rendered when in a hover position.\n  // Expressed as a multiple of the parents radius.\n  static get DIST_FROM_PARENT() {\n    return 3.5;\n  }\n\n  // Constant dictates how much larger an AP becomes when it's activated for selection, ie, when clicking\n  // or unclicking will engage the AP.\n  static get TARGET_SCALEUP() {\n    return 1.2;\n  }\n\n  // Constant dictates the radius of all APs, as a fraction of page width.\n  static get RADIUS() {\n    return 1 / 150;\n  }\n\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    /**\n     * Whether this AP is currently visible in the Flow Canvas, eg if the mouse is close to this\n     * APs parent molecule.\n     */\n    this.isVisible = false;\n\n    /**\n     * If this AP is in a 'targetted' state. This AP is 'targetted' if a at the mouse's current location a\n     * click or release will activate this AP, starting or completing a connection respectively.\n     */\n    this.isTargetted = false;\n\n    /**\n     * The current position of this AP. Measured in fraction of canvas width (x) or canvas height (x).\n     */\n    this.x;\n    this.y;\n\n    /**\n     * A unique identifying number for this attachment point among all other elements on the Flow Canvas.\n     * @type {number}\n     */\n    this.uniqueID = 0;\n\n    /**\n     * The attachment point type.\n     * @type {string}\n     */\n    this.atomType = \"AttachmentPoint\";\n\n    /**\n     * The attachment point value type. Options are number, geometry, array.\n     * @type {string}\n     */\n    this.valueType = \"number\";\n\n    /**\n     * The attachment point type. Options are input, output.\n     * @type {string}\n     */\n    this.type = \"output\";\n\n    /**\n     * The attachment point current value.\n     * @type {number}\n     */\n    this.value = 10;\n\n    /**\n     * The default value to be used by the ap when nothing is attached\n     * @type {string}\n     */\n    this.defaultValue = 10;\n\n    /**\n     * A flag to indicate if the attachment point is currently ready. Used to order initilization when program is loaded.\n     * @type {string}\n     */\n    this.ready = true;\n\n    /**\n     * A list of all of the connectors attached to this attachment point\n     * @type {object}\n     */\n    this.connectors = [];\n\n    for (var key in values) {\n      /**\n       * Assign values in values as this.x\n       */\n      this[key] = values[key];\n    }\n\n    // Initially hide this attachment point.\n    this.unexpand();\n  }\n\n  /**\n   * Draws the attachment point on the screen. Called with each frame.\n   */\n  draw() {\n    // No-op if this AP is not currently visible.\n    if (!this.isVisible) {\n      return;\n    }\n    let xInPixels = GlobalVariables.widthToPixels(this.x);\n    let yInPixels = GlobalVariables.heightToPixels(this.y);\n    let radiusInPixels = GlobalVariables.widthToPixels(AttachmentPoint.RADIUS);\n\n    if (this.isTargetted) {\n      radiusInPixels = radiusInPixels * AttachmentPoint.TARGET_SCALEUP;\n    }\n\n    GlobalVariables.c.font = \"10px Work Sans\";\n    var textWidth = GlobalVariables.c.measureText(this.name).width;\n\n    var bubbleColor =\n      this.name === \"geometry\" ? this.parentMolecule.selectedColor : \"#C300FF\";\n    var halfRadius = radiusInPixels * 0.5;\n    GlobalVariables.c.globalCompositeOperation = \"source-over\";\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = bubbleColor;\n\n    var topEdge = yInPixels - radiusInPixels;\n    var leftEdge = xInPixels;\n    if (this.type == \"input\") {\n      leftEdge = xInPixels - textWidth - radiusInPixels - halfRadius;\n    }\n\n    var textStart = leftEdge;\n    if (this.type == \"output\") {\n      textStart = leftEdge + radiusInPixels + halfRadius;\n    }\n\n    // Draw pill-shape for the text of this AP\n    GlobalVariables.c.arc(\n      leftEdge,\n      yInPixels,\n      radiusInPixels,\n      Math.PI / 2,\n      (-1 * Math.PI) / 2\n    );\n    GlobalVariables.c.rect(\n      leftEdge,\n      topEdge,\n      textWidth + radiusInPixels + halfRadius,\n      radiusInPixels * 2\n    );\n    GlobalVariables.c.arc(\n      leftEdge + textWidth + radiusInPixels + halfRadius,\n      yInPixels,\n      radiusInPixels,\n      (-1 * Math.PI) / 2,\n      Math.PI / 2\n    );\n    GlobalVariables.c.fill();\n\n    // Draw text name of this AP\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = this.parentMolecule.defaultColor;\n    GlobalVariables.c.fillText(this.name, textStart, yInPixels + 2);\n    GlobalVariables.c.fill();\n    GlobalVariables.c.closePath();\n\n    // Draw the circular connection target\n    GlobalVariables.c.beginPath();\n    if (this.ready) {\n      GlobalVariables.c.fillStyle = this.parentMolecule.color;\n    } else {\n      GlobalVariables.c.fillStyle = \"#6ba4ff\";\n    }\n    GlobalVariables.c.strokeStyle = this.parentMolecule.strokeColor;\n    GlobalVariables.c.lineWidth = 1;\n\n    GlobalVariables.c.arc(\n      xInPixels,\n      yInPixels,\n      radiusInPixels,\n      0,\n      Math.PI * 2,\n      false\n    );\n    GlobalVariables.c.fill();\n    GlobalVariables.c.stroke();\n    GlobalVariables.c.closePath();\n  }\n\n  /**\n   * Handles mouse click down. If the click is inside the AP it's connectors are selected if it is an input.\n   * @param {number} x - The x coordinate of the click\n   * @param {number} y - The y coordinate of the click\n   * @param {boolean} clickProcessed - Has the click already been handled\n   */\n  clickDown(x, y, clickProcessed) {\n    if (this.isCloseEnoughToTarget(x, y) && !clickProcessed) {\n      if (this.type == \"output\") {\n        //begin to extend a connector from this if it is an output\n        new Connector({\n          parentMolecule: this.parentMolecule,\n          attachmentPoint1: this,\n          atomType: \"Connector\",\n          isMoving: true,\n        });\n      }\n      if (this.type == \"input\") {\n        //connectors can only be selected by clicking on an input\n        this.connectors.forEach((connector) => {\n          //select any connectors attached to this node\n          connector.selected = true;\n        });\n      }\n\n      return true; //indicate that the click was handled by this object\n    } else {\n      if (this.type == \"input\") {\n        //connectors can only be selected by clicking on an input\n        this.connectors.forEach((connector) => {\n          //unselect any connectors attached to this node\n          connector.selected = false;\n        });\n      }\n      return false; //indicate that the click was not handled by this object\n    }\n  }\n\n  /**\n   * Handles mouse click up. If the click is inside the AP and a connector is currently extending, then a connection is made\n   * @param {number} x - The x coordinate of the click\n   * @param {number} y - The y coordinate of the click\n   */\n  clickUp(x, y) {\n    this.connectors.forEach((connector) => {\n      connector.clickUp(x, y);\n    });\n  }\n\n  /**\n   * Handles mouse click and move to expand the AP.\n   * @param {number} x - The x coordinate of the click\n   * @param {number} y - The y coordinate of the click\n   */\n  mouseMove(x, y) {\n    let activationBoundary =\n      AttachmentPoint.DIST_FROM_PARENT * this.parentMolecule.radius;\n\n    let parentXInPixels = GlobalVariables.widthToPixels(this.parentMolecule.x);\n    let parentYInPixels = GlobalVariables.heightToPixels(this.parentMolecule.y);\n    if (\n      GlobalVariables.distBetweenPoints(\n        parentXInPixels,\n        x,\n        parentYInPixels,\n        y\n      ) <= GlobalVariables.widthToPixels(activationBoundary)\n    ) {\n      this.isVisible = true;\n      [this.x, this.y] = this.computePosition(activationBoundary);\n      [this.x, this.y] = GlobalVariables.constrainToCanvasBorders(\n        this.x,\n        this.y\n      );\n      this.isTargetted = this.isCloseEnoughToTarget(x, y);\n    } else {\n      this.unexpand();\n    }\n\n    this.connectors.forEach((connector) => {\n      connector.mouseMove(x, y);\n    });\n  }\n\n  /**\n   * Unexpands this attachment point, eg: when the app starts, when the mouse\n   * is moved out of the expansion range, etc.\n   */\n  unexpand() {\n    this.isVisible = false;\n    this.isTargetted = false;\n    // Also restore this.x and this.x to be on the perimiter of parent module\n    // since those values are used when rendering connectors.\n    this.y = this.parentMolecule.y;\n    if (this.type == \"input\") {\n      this.x = this.parentMolecule.x - this.parentMolecule.radius;\n    } else {\n      this.x = this.parentMolecule.x + this.parentMolecule.radius;\n    }\n    [this.x, this.y] = GlobalVariables.constrainToCanvasBorders(this.x, this.y);\n  }\n\n  /**\n   * Computes the correct position for this AP based on parent and the provided boundary.\n   * Returns a tuple of [xposition, yposition] both values in fraction-of-screen units.\n   * @param {} boundary - radius of the boundary within which APs must be displayed relative to\n   * the parent molecule.\n   */\n  computePosition(boundary) {\n    const inputList = this.parentMolecule.inputs.filter(\n      (input) => input.type == \"input\"\n    );\n    if (this.type == \"output\") {\n      // Outputs are always singular and always positioned partially overlapped by the right-most\n      // pole of the parent molecule.\n      return [\n        this.parentMolecule.x +\n          this.parentMolecule.radius +\n          AttachmentPoint.RADIUS * 0.75,\n        this.parentMolecule.y,\n      ];\n    } else if (this.type == \"input\" && inputList.length == 1) {\n      // Singular inputs are located in a mirror of the output, ie partially overlapped by the\n      // left-most pole of the parent molecule.\n      return [\n        this.parentMolecule.x -\n          this.parentMolecule.radius -\n          AttachmentPoint.RADIUS * 0.75,\n        this.parentMolecule.y,\n      ];\n    } else {\n      // This is one of several input APs for the parent molecule.\n      // Otherwise APs are spaced in an arc at a distance around the parent molecule.\n      const attachmentPointNumber = inputList.indexOf(this);\n      const anglePerIO = Math.PI / (inputList.length + 1);\n      // Reduce radius to ensure that the entire attachment point is inside boundary, even when targetted.\n      const hoverRadius =\n        boundary - AttachmentPoint.RADIUS * AttachmentPoint.TARGET_SCALEUP;\n\n      // angle correction so that it centers menu adjusting to however many attachment points there are\n      const angleCorrection = Math.PI / 2 + anglePerIO;\n      let hoverOffsetX =\n        hoverRadius *\n        Math.cos(attachmentPointNumber * anglePerIO + angleCorrection);\n\n      // Do this calculation in pixels. The fractional units of height(y) might not be 1:1 proportionate with\n      // fractional units of width(x) if the canvas is rectangular. We always want these APs to look like they're\n      // in a circular pattern so do this calculation in pixels then convert back to height fraction.\n      let hoverOffsetY =\n        -1 *\n        GlobalVariables.pixelsToHeight(\n          GlobalVariables.widthToPixels(hoverRadius) *\n            Math.sin(attachmentPointNumber * anglePerIO + angleCorrection)\n        );\n\n      return [\n        this.parentMolecule.x + hoverOffsetX,\n        this.parentMolecule.y + hoverOffsetY,\n      ];\n    }\n  }\n\n  /**\n   * Returns true if the given point is close enough to this AP that this AP should be \"targetted\",\n   * ie, should treat clicks or mouse-releases as if they hit this AP.\n   * Always false if this AP isn't visible.\n   *\n   * @param {} x - position in pixels\n   * @param {*} y - position in pixels\n   */\n  isCloseEnoughToTarget(x, y) {\n    if (!this.isVisible) {\n      return false;\n    }\n    const dist = GlobalVariables.distBetweenPoints(\n      x,\n      GlobalVariables.widthToPixels(this.x),\n      y,\n      GlobalVariables.heightToPixels(this.y)\n    );\n    const apRadiusInPixels = GlobalVariables.widthToPixels(\n      AttachmentPoint.RADIUS\n    );\n    if (this.type == \"output\") {\n      return dist <= apRadiusInPixels * 2;\n    } else {\n      // this.type == \"input\"\n      let targetRadius = apRadiusInPixels * 2;\n      // check if this creates overlapping target areas in the case where there's multiple inputs.\n      // If so reduce the targetting radius.\n      const inputCount = this.parentMolecule.inputs.filter(\n        (input) => input.type == \"input\"\n      ).length;\n\n      let hoverRadius = GlobalVariables.widthToPixels(\n        AttachmentPoint.DIST_FROM_PARENT * this.parentMolecule.radius -\n          AttachmentPoint.RADIUS * AttachmentPoint.TARGET_SCALEUP\n      );\n\n      const anglePerIO = Math.PI / (inputCount + 1);\n      const maxNonOverlappingRadius = hoverRadius * Math.sin(anglePerIO / 2);\n\n      targetRadius = Math.max(\n        apRadiusInPixels,\n        Math.min(targetRadius, maxNonOverlappingRadius)\n      );\n      return dist < targetRadius;\n    }\n  }\n\n  /**\n   * Just passes a key press to the attached connectors. No impact on the connector.\n   * @param {string} key - The key which was pressed\n   */\n  keyPress(key) {\n    this.connectors.forEach((connector) => {\n      connector.keyPress(key);\n    });\n  }\n\n  /**\n   * Delete any connectors attached to this ap\n   */\n  deleteSelf(silent = false) {\n    //remove any connectors which were attached to this attachment point\n    var connectorsList = [...this.connectors]; //Make a copy of the list so that we can delete elements without having issues with forEach as we remove things from the list\n    connectorsList.forEach((connector) => {\n      connector.deleteSelf(silent);\n    });\n  }\n\n  /**\n   * Delete a target connector which is passed in. The default option is to delete all of the connectors.\n   */\n  deleteConnector(connector = \"all\") {\n    try {\n      const connectorIndex = this.connectors.indexOf(connector);\n      if (connectorIndex != -1) {\n        this.connectors.splice(connectorIndex, 1); //Remove the target connector\n      } else {\n        this.connectors = []; //Remove all of the connectors\n      }\n    } catch (err) {\n      console.warn(\"Error deleting connector: \");\n      console.warn(err);\n    }\n  }\n\n  /**\n   * Can be called to see if the target coordinates are within this ap. Returns true/false.\n   * @param {number} x - The x coordinate of the target\n   * @param {number} y - The y coordinate of the target\n   */\n  wasConnectionMade(x, y) {\n    return this.isCloseEnoughToTarget(x, y) && this.connectors.length == 0;\n  }\n\n  /**\n   * Attaches a new connector to this ap\n   * @param {object} connector - The connector to attach\n   */\n  attach(connector) {\n    this.connectors.push(connector);\n  }\n\n  /**\n   * Starts propagation from this attachmentPoint if it is not waiting for anything up stream.\n   */\n  beginPropagation() {\n    //If nothing is connected it is a starting point\n    if (this.connectors.length == 0) {\n      this.setValue(this.value);\n    }\n  }\n\n  /**\n   * Passes a lock command to the parent molecule, or to the attached connector depending on input/output.\n   */\n  waitOnComingInformation() {\n    if (this.type == \"output\") {\n      this.connectors.forEach((connector) => {\n        connector.waitOnComingInformation();\n      });\n    } else {\n      //If this is an input\n      this.ready = false;\n      this.parentMolecule.waitOnComingInformation(this.name);\n    }\n  }\n\n  /**\n   * Restores the ap to it's default value.\n   */\n  setDefault() {\n    this.setValue(this.defaultValue);\n  }\n\n  /**\n   * Updates the default value for the ap.\n   */\n  updateDefault(newDefault) {\n    var oldDefault = this.defaultValue;\n    this.defaultValue = newDefault;\n\n    if (this.connectors.length == 0 && this.value == oldDefault) {\n      //Update the value to be the default if there is nothing attached\n      this.value = this.defaultValue;\n    }\n  }\n\n  /**\n   * Reads and returns the current value of the ap.\n   */\n  getValue() {\n    return this.value;\n  }\n\n  /**\n   * Sets the current value of the ap. Force forces an update even if the value hasn't changed.\n   */\n  setValue(newValue) {\n    this.value = newValue;\n\n    this.ready = true;\n    //propagate the change to linked elements if this is an output\n    if (this.type == \"output\") {\n      this.connectors.forEach((connector) => {\n        //select any connectors attached to this node\n        connector.propogate();\n      });\n    }\n    //if this is an input attachment point\n    else {\n      this.parentMolecule.updateValue(this.name);\n    }\n  }\n\n  /**\n   * Computes the curent position and then draws the ap on the screen.\n   */\n  update() {\n    this.draw();\n\n    this.connectors.forEach((connector) => {\n      //update any connectors attached to this node\n      connector.update();\n    });\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/prototypes/attachmentpoint.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 830,
    "kind": "class",
    "name": "AttachmentPoint",
    "memberof": "src/prototypes/attachmentpoint.js",
    "static": true,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/prototypes/attachmentpoint.js",
    "importStyle": "AttachmentPoint",
    "description": "This class creates a new attachmentPoint which are the input and output blobs on Atoms",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 831,
    "kind": "get",
    "name": "DIST_FROM_PARENT",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint.DIST_FROM_PARENT",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 832,
    "kind": "get",
    "name": "TARGET_SCALEUP",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint.TARGET_SCALEUP",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 833,
    "kind": "get",
    "name": "RADIUS",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint.RADIUS",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 834,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 835,
    "kind": "member",
    "name": "isVisible",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#isVisible",
    "access": "public",
    "description": "Whether this AP is currently visible in the Flow Canvas, eg if the mouse is close to this\nAPs parent molecule.",
    "lineNumber": 34,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 836,
    "kind": "member",
    "name": "isTargetted",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#isTargetted",
    "access": "public",
    "description": "If this AP is in a 'targetted' state. This AP is 'targetted' if a at the mouse's current location a\nclick or release will activate this AP, starting or completing a connection respectively.",
    "lineNumber": 40,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 837,
    "kind": "member",
    "name": "uniqueID",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#uniqueID",
    "access": "public",
    "description": "A unique identifying number for this attachment point among all other elements on the Flow Canvas.",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 838,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#atomType",
    "access": "public",
    "description": "The attachment point type.",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 839,
    "kind": "member",
    "name": "valueType",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#valueType",
    "access": "public",
    "description": "The attachment point value type. Options are number, geometry, array.",
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 840,
    "kind": "member",
    "name": "type",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#type",
    "access": "public",
    "description": "The attachment point type. Options are input, output.",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 841,
    "kind": "member",
    "name": "value",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#value",
    "access": "public",
    "description": "The attachment point current value.",
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 842,
    "kind": "member",
    "name": "defaultValue",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#defaultValue",
    "access": "public",
    "description": "The default value to be used by the ap when nothing is attached",
    "lineNumber": 82,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 843,
    "kind": "member",
    "name": "ready",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#ready",
    "access": "public",
    "description": "A flag to indicate if the attachment point is currently ready. Used to order initilization when program is loaded.",
    "lineNumber": 88,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 844,
    "kind": "member",
    "name": "connectors",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#connectors",
    "access": "public",
    "description": "A list of all of the connectors attached to this attachment point",
    "lineNumber": 94,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 845,
    "kind": "member",
    "name": "[key]",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#[key]",
    "access": "public",
    "description": "Assign values in values as this.x",
    "lineNumber": 100,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 846,
    "kind": "method",
    "name": "draw",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#draw",
    "access": "public",
    "description": "Draws the attachment point on the screen. Called with each frame.",
    "lineNumber": 110,
    "params": [],
    "return": null
  },
  {
    "__docId__": 847,
    "kind": "method",
    "name": "clickDown",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#clickDown",
    "access": "public",
    "description": "Handles mouse click down. If the click is inside the AP it's connectors are selected if it is an input.",
    "lineNumber": 203,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x coordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y coordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "clickProcessed",
        "description": "Has the click already been handled"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 848,
    "kind": "method",
    "name": "clickUp",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#clickUp",
    "access": "public",
    "description": "Handles mouse click up. If the click is inside the AP and a connector is currently extending, then a connection is made",
    "lineNumber": 240,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x coordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y coordinate of the click"
      }
    ],
    "return": null
  },
  {
    "__docId__": 849,
    "kind": "method",
    "name": "mouseMove",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#mouseMove",
    "access": "public",
    "description": "Handles mouse click and move to expand the AP.",
    "lineNumber": 251,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x coordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y coordinate of the click"
      }
    ],
    "return": null
  },
  {
    "__docId__": 852,
    "kind": "method",
    "name": "unexpand",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#unexpand",
    "access": "public",
    "description": "Unexpands this attachment point, eg: when the app starts, when the mouse\nis moved out of the expansion range, etc.",
    "lineNumber": 285,
    "params": [],
    "return": null
  },
  {
    "__docId__": 855,
    "kind": "member",
    "name": "y",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#y",
    "access": "public",
    "description": null,
    "lineNumber": 290,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 856,
    "kind": "member",
    "name": "x",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#x",
    "access": "public",
    "description": null,
    "lineNumber": 292,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 858,
    "kind": "method",
    "name": "computePosition",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#computePosition",
    "access": "public",
    "description": "Computes the correct position for this AP based on parent and the provided boundary.\nReturns a tuple of [xposition, yposition] both values in fraction-of-screen units.",
    "lineNumber": 305,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 859,
    "kind": "method",
    "name": "isCloseEnoughToTarget",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#isCloseEnoughToTarget",
    "access": "public",
    "description": "Returns true if the given point is close enough to this AP that this AP should be \"targetted\",\nie, should treat clicks or mouse-releases as if they hit this AP.\nAlways false if this AP isn't visible.",
    "lineNumber": 367,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "position in pixels"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 860,
    "kind": "method",
    "name": "keyPress",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#keyPress",
    "access": "public",
    "description": "Just passes a key press to the attached connectors. No impact on the connector.",
    "lineNumber": 411,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key which was pressed"
      }
    ],
    "return": null
  },
  {
    "__docId__": 861,
    "kind": "method",
    "name": "deleteSelf",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#deleteSelf",
    "access": "public",
    "description": "Delete any connectors attached to this ap",
    "lineNumber": 420,
    "params": [
      {
        "name": "silent",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 862,
    "kind": "method",
    "name": "deleteConnector",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#deleteConnector",
    "access": "public",
    "description": "Delete a target connector which is passed in. The default option is to delete all of the connectors.",
    "lineNumber": 431,
    "params": [
      {
        "name": "connector",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "all",
        "defaultValue": "all"
      }
    ],
    "return": null
  },
  {
    "__docId__": 864,
    "kind": "method",
    "name": "wasConnectionMade",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#wasConnectionMade",
    "access": "public",
    "description": "Can be called to see if the target coordinates are within this ap. Returns true/false.",
    "lineNumber": 450,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x coordinate of the target"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y coordinate of the target"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 865,
    "kind": "method",
    "name": "attach",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#attach",
    "access": "public",
    "description": "Attaches a new connector to this ap",
    "lineNumber": 458,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "connector",
        "description": "The connector to attach"
      }
    ],
    "return": null
  },
  {
    "__docId__": 866,
    "kind": "method",
    "name": "beginPropagation",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#beginPropagation",
    "access": "public",
    "description": "Starts propagation from this attachmentPoint if it is not waiting for anything up stream.",
    "lineNumber": 465,
    "params": [],
    "return": null
  },
  {
    "__docId__": 867,
    "kind": "method",
    "name": "waitOnComingInformation",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#waitOnComingInformation",
    "access": "public",
    "description": "Passes a lock command to the parent molecule, or to the attached connector depending on input/output.",
    "lineNumber": 475,
    "params": [],
    "return": null
  },
  {
    "__docId__": 869,
    "kind": "method",
    "name": "setDefault",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#setDefault",
    "access": "public",
    "description": "Restores the ap to it's default value.",
    "lineNumber": 490,
    "params": [],
    "return": null
  },
  {
    "__docId__": 870,
    "kind": "method",
    "name": "updateDefault",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#updateDefault",
    "access": "public",
    "description": "Updates the default value for the ap.",
    "lineNumber": 497,
    "params": [
      {
        "name": "newDefault",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 873,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#getValue",
    "access": "public",
    "description": "Reads and returns the current value of the ap.",
    "lineNumber": 510,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 874,
    "kind": "method",
    "name": "setValue",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#setValue",
    "access": "public",
    "description": "Sets the current value of the ap. Force forces an update even if the value hasn't changed.",
    "lineNumber": 517,
    "params": [
      {
        "name": "newValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 877,
    "kind": "method",
    "name": "update",
    "memberof": "src/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/attachmentpoint.js~AttachmentPoint#update",
    "access": "public",
    "description": "Computes the curent position and then draws the ap on the screen.",
    "lineNumber": 537,
    "params": [],
    "return": null
  },
  {
    "__docId__": 878,
    "kind": "file",
    "name": "src/prototypes/connector.js",
    "content": "import GlobalVariables from \"../js/globalvariables.js\";\n\n/**\n * The connector class defines how an output can be connected to an input. It appears on the screen as a black line extending from an output to an input.\n */\nexport default class Connector {\n  /**\n   * The constructor function.\n   * @param {object} values An array of values passed in which will be assigned to the class as this.x\n   */\n  constructor(values) {\n    /**\n     * True if the connector is currently being created and is in the process of extending\n     * @type {boolean}\n     */\n    this.isMoving = false;\n    /**\n     * The connectors current color\n     * @type {string}\n     */\n    this.color = \"black\";\n    /**\n     * The type of this connector\n     * @type {string}\n     */\n    this.atomType = \"Connector\";\n    /**\n     * True if this connector has been selected\n     * @type {boolean}\n     */\n    this.selected = false;\n    /**\n     * The first attachment point this connector is connected to (an ouput)\n     * @type {object}\n     */\n    this.attachmentPoint1 = null;\n    /**\n     * The second attachment point this connector is connected to (an input)\n     * @type {object}\n     */\n    this.attachmentPoint2 = null;\n\n    for (var key in values) {\n      /**\n       * Assign each of the values in values as this.key\n       */\n      this[key] = values[key];\n    }\n\n    /**\n     * The starting X cordinate for the connector. Should really be referenced to attachmentPoint1.\n     * @type {number}\n     */\n    this.startX = this.attachmentPoint1.parentMolecule.outputX;\n    /**\n     * The starting Y cordinate for the connector. Should really be referenced to attachmentPoint1.\n     * @type {number}\n     */\n    this.startY = this.attachmentPoint1.parentMolecule.y;\n\n    this.attachmentPoint1.connectors.push(this); //Give input and output references to the connector\n    if (this.attachmentPoint2 != null) {\n      this.attachmentPoint2.connectors.push(this);\n    }\n  }\n\n  /**\n   * Draw the connector as a bezier curve on the screen\n   */\n  draw() {\n    let startXInPixels = GlobalVariables.widthToPixels(this.startX);\n    let startYInPixels = GlobalVariables.heightToPixels(this.startY);\n    let endXInPixels = GlobalVariables.widthToPixels(this.endX);\n    let endYInPixels = GlobalVariables.heightToPixels(this.endY);\n\n    GlobalVariables.c.beginPath();\n    GlobalVariables.c.fillStyle = this.color;\n    GlobalVariables.c.strokeStyle = this.color;\n    GlobalVariables.c.globalCompositeOperation = \"destination-over\"; //draw under other elements;\n    if (this.selected) {\n      GlobalVariables.c.lineWidth = 3;\n    } else {\n      GlobalVariables.c.lineWidth = 1;\n    }\n    GlobalVariables.c.moveTo(startXInPixels, startYInPixels);\n    GlobalVariables.c.bezierCurveTo(\n      startXInPixels + 100,\n      startYInPixels,\n      endXInPixels - 100,\n      endYInPixels,\n      endXInPixels,\n      endYInPixels\n    );\n    GlobalVariables.c.stroke();\n    GlobalVariables.c.globalCompositeOperation = \"source-over\"; //switch back to drawing on top\n  }\n\n  /**\n   * clickUp checks to see if the mouse button has been released over an input attachment point. If it has then the connector is created there. If not, then the connector is deleted.\n   * @param {number} x - The x cordinate of the click\n   * @param {number} y - The y cordinate of the click\n   */\n  clickUp(x, y) {\n    if (this.isMoving) {\n      //we only want to attach the connector which is currently moving\n      var attachmentMade = false;\n      GlobalVariables.currentMolecule.nodesOnTheScreen.forEach((molecule) => {\n        //For every molecule on the screen\n        molecule.inputs.forEach((attachmentPoint) => {\n          //For each of their attachment points\n          if (attachmentPoint.wasConnectionMade(x, y) && !attachmentMade) {\n            /** Prevent it from connecting to itself  */\n            if (\n              this.attachmentPoint1.parentMolecule !==\n              attachmentPoint.parentMolecule\n            ) {\n              //Check to make sure we haven't already attached somewhere else\n              attachmentMade = true;\n              this.attachmentPoint2 = attachmentPoint;\n              attachmentPoint.attach(this);\n              this.propogate();\n            }\n          }\n        });\n      });\n      if (!attachmentMade) {\n        this.deleteSelf();\n      }\n      this.isMoving = false;\n    }\n  }\n\n  /**\n   * Handle movements of the mouse while connector is being created. As long as the mouse is pressed down,\n   * the end of the connector stays attached to the mouse.\n   * @param {number} x - The x cordinate of the click\n   * @param {number} y - The y cordinate of the click\n   */\n  mouseMove(x, y) {\n    if (this.isMoving == true) {\n      /**\n       * The s cordinate of the end of the connector.\n       */\n      this.endX = GlobalVariables.pixelsToWidth(x);\n      /**\n       * The y cordinate of the end of the connector.\n       */\n      this.endY = GlobalVariables.pixelsToHeight(y);\n    }\n  }\n\n  /**\n   * Called when any key is pressed. If the key is delete or backspace and the connector is selected then the connector is deleted.\n   * @param {string} key - The key which was pressed\n   */\n  keyPress(key) {\n    if (this.selected) {\n      if ([\"Delete\", \"Backspace\"].includes(key)) {\n        this.deleteSelf();\n      }\n    }\n  }\n\n  /**\n   * Deletes the connector by calling its attachmentPoints to tell them to delete their references to this connector.\n   */\n  deleteSelf(silent = false) {\n    //Remove this connector from the output it is attached to\n    this.attachmentPoint1.deleteConnector(this);\n\n    //Free up the input to which this was attached\n    if (this.attachmentPoint2 != null) {\n      this.attachmentPoint2.deleteConnector(this);\n      if (!silent) {\n        this.attachmentPoint2.setDefault();\n      }\n    }\n  }\n\n  /**\n   * Generates an object used to save the connector.\n   */\n  serialize() {\n    if (this.attachmentPoint2 != null) {\n      var object = {\n        ap1Name: this.attachmentPoint1.name,\n        ap2Name: this.attachmentPoint2.name,\n        ap2Primary: this.attachmentPoint2.primary,\n        ap1ID: this.attachmentPoint1.parentMolecule.uniqueID,\n        ap2ID: this.attachmentPoint2.parentMolecule.uniqueID,\n      };\n      return object;\n    }\n  }\n\n  /**\n   * Passes a lock call to the connected input.\n   */\n  waitOnComingInformation() {\n    if (this.attachmentPoint2) {\n      this.attachmentPoint2.waitOnComingInformation();\n    }\n  }\n\n  /**\n   * Pass the value of the attached output to the attached input\n   */\n  propogate() {\n    //takes the input and passes it to the output\n    if (this.attachmentPoint1.ready && this.attachmentPoint2) {\n      this.attachmentPoint2.setValue(this.attachmentPoint1.getValue());\n    }\n  }\n\n  /**\n   * Used to walk back out the tree generating a list of constants...used for evolve\n   */\n  walkBackForConstants(callback) {\n    this.attachmentPoint1.parentMolecule.walkBackForConstants(callback);\n  }\n\n  /**\n   * Computes the connectors position and draw it to the screen.\n   */\n  update() {\n    this.startX = this.attachmentPoint1.x;\n    this.startY = this.attachmentPoint1.y;\n    if (this.attachmentPoint2) {\n      //check to see if the attachment point is defined\n      this.endX = this.attachmentPoint2.x;\n      this.endY = this.attachmentPoint2.y;\n    }\n    this.draw();\n  }\n}\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/prototypes/connector.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 879,
    "kind": "class",
    "name": "Connector",
    "memberof": "src/prototypes/connector.js",
    "static": true,
    "longname": "src/prototypes/connector.js~Connector",
    "access": "public",
    "export": true,
    "importPath": "replicad-app-example/src/prototypes/connector.js",
    "importStyle": "Connector",
    "description": "The connector class defines how an output can be connected to an input. It appears on the screen as a black line extending from an output to an input.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 880,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/connector.js~Connector#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 881,
    "kind": "member",
    "name": "isMoving",
    "memberof": "src/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/prototypes/connector.js~Connector#isMoving",
    "access": "public",
    "description": "True if the connector is currently being created and is in the process of extending",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 882,
    "kind": "member",
    "name": "color",
    "memberof": "src/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/prototypes/connector.js~Connector#color",
    "access": "public",
    "description": "The connectors current color",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 883,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/prototypes/connector.js~Connector#atomType",
    "access": "public",
    "description": "The type of this connector",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 884,
    "kind": "member",
    "name": "selected",
    "memberof": "src/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/prototypes/connector.js~Connector#selected",
    "access": "public",
    "description": "True if this connector has been selected",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 885,
    "kind": "member",
    "name": "attachmentPoint1",
    "memberof": "src/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/prototypes/connector.js~Connector#attachmentPoint1",
    "access": "public",
    "description": "The first attachment point this connector is connected to (an ouput)",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 886,
    "kind": "member",
    "name": "attachmentPoint2",
    "memberof": "src/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/prototypes/connector.js~Connector#attachmentPoint2",
    "access": "public",
    "description": "The second attachment point this connector is connected to (an input)",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 887,
    "kind": "member",
    "name": "[key]",
    "memberof": "src/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/prototypes/connector.js~Connector#[key]",
    "access": "public",
    "description": "Assign each of the values in values as this.key",
    "lineNumber": 47,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 888,
    "kind": "member",
    "name": "startX",
    "memberof": "src/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/prototypes/connector.js~Connector#startX",
    "access": "public",
    "description": "The starting X cordinate for the connector. Should really be referenced to attachmentPoint1.",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 889,
    "kind": "member",
    "name": "startY",
    "memberof": "src/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/prototypes/connector.js~Connector#startY",
    "access": "public",
    "description": "The starting Y cordinate for the connector. Should really be referenced to attachmentPoint1.",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 890,
    "kind": "method",
    "name": "draw",
    "memberof": "src/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/connector.js~Connector#draw",
    "access": "public",
    "description": "Draw the connector as a bezier curve on the screen",
    "lineNumber": 70,
    "params": [],
    "return": null
  },
  {
    "__docId__": 891,
    "kind": "method",
    "name": "clickUp",
    "memberof": "src/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/connector.js~Connector#clickUp",
    "access": "public",
    "description": "clickUp checks to see if the mouse button has been released over an input attachment point. If it has then the connector is created there. If not, then the connector is deleted.",
    "lineNumber": 103,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x cordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y cordinate of the click"
      }
    ],
    "return": null
  },
  {
    "__docId__": 894,
    "kind": "method",
    "name": "mouseMove",
    "memberof": "src/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/connector.js~Connector#mouseMove",
    "access": "public",
    "description": "Handle movements of the mouse while connector is being created. As long as the mouse is pressed down,\nthe end of the connector stays attached to the mouse.",
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x cordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y cordinate of the click"
      }
    ],
    "return": null
  },
  {
    "__docId__": 895,
    "kind": "member",
    "name": "endX",
    "memberof": "src/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/prototypes/connector.js~Connector#endX",
    "access": "public",
    "description": "The s cordinate of the end of the connector.",
    "lineNumber": 144,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 896,
    "kind": "member",
    "name": "endY",
    "memberof": "src/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/prototypes/connector.js~Connector#endY",
    "access": "public",
    "description": "The y cordinate of the end of the connector.",
    "lineNumber": 148,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 897,
    "kind": "method",
    "name": "keyPress",
    "memberof": "src/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/connector.js~Connector#keyPress",
    "access": "public",
    "description": "Called when any key is pressed. If the key is delete or backspace and the connector is selected then the connector is deleted.",
    "lineNumber": 156,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key which was pressed"
      }
    ],
    "return": null
  },
  {
    "__docId__": 898,
    "kind": "method",
    "name": "deleteSelf",
    "memberof": "src/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/connector.js~Connector#deleteSelf",
    "access": "public",
    "description": "Deletes the connector by calling its attachmentPoints to tell them to delete their references to this connector.",
    "lineNumber": 167,
    "params": [
      {
        "name": "silent",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 899,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/connector.js~Connector#serialize",
    "access": "public",
    "description": "Generates an object used to save the connector.",
    "lineNumber": 183,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 900,
    "kind": "method",
    "name": "waitOnComingInformation",
    "memberof": "src/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/connector.js~Connector#waitOnComingInformation",
    "access": "public",
    "description": "Passes a lock call to the connected input.",
    "lineNumber": 199,
    "params": [],
    "return": null
  },
  {
    "__docId__": 901,
    "kind": "method",
    "name": "propogate",
    "memberof": "src/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/connector.js~Connector#propogate",
    "access": "public",
    "description": "Pass the value of the attached output to the attached input",
    "lineNumber": 208,
    "params": [],
    "return": null
  },
  {
    "__docId__": 902,
    "kind": "method",
    "name": "walkBackForConstants",
    "memberof": "src/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/connector.js~Connector#walkBackForConstants",
    "access": "public",
    "description": "Used to walk back out the tree generating a list of constants...used for evolve",
    "lineNumber": 218,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 903,
    "kind": "method",
    "name": "update",
    "memberof": "src/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/prototypes/connector.js~Connector#update",
    "access": "public",
    "description": "Computes the connectors position and draw it to the screen.",
    "lineNumber": 225,
    "params": [],
    "return": null
  },
  {
    "__docId__": 908,
    "kind": "file",
    "name": "src/worker.js",
    "content": "import opencascade from \"replicad-opencascadejs/src/replicad_single.js\";\nimport opencascadeWasm from \"replicad-opencascadejs/src/replicad_single.wasm?url\";\nimport * as replicad from \"replicad\";\nimport { expose, proxy } from \"comlink\";\nimport { Plane, Solid } from \"replicad\";\nimport shrinkWrap from \"replicad-shrink-wrap\";\nimport { addSVG, drawSVG } from \"replicad-decorate\";\nimport Fonts from \"./js/fonts.js\";\nimport { AnyNest, FloatPolygon } from \"any-nest\";\nimport { re } from \"mathjs\";\n\nvar library = {};\n\n// This is the logic to load the web assembly code into replicad\nlet loaded = false;\nconst init = async () => {\n  if (loaded) return Promise.resolve(true);\n\n  const OC = await opencascade({\n    locateFile: () => opencascadeWasm,\n  });\n\n  loaded = true;\n  replicad.setOC(OC);\n\n  return true;\n};\nconst started = init();\n\nconsole.log(\"Replicad Module:\");\nconsole.log(replicad);\n\n/**\n * A function which converts any input into Abundance style geometry. Input can be a library ID, an abundance object, or a single geometry object.\n * This is useful for allowing our functions to work within the Code atom or within the flow canvas.\n */\nfunction toGeometry(input) {\n  //If the input is a library ID we look it up\n  if (typeof input === \"number\") {\n    return library[input];\n  }\n  //If the input is already an abundance object we return it\n  else if (input.geometry) {\n    return input;\n  }\n  //Else we build an abundance object from the input\n  else {\n    return {\n      geometry: [input],\n      tags: [],\n      color: \"#FF9065\",\n      bom: [],\n    };\n  }\n}\n\n/**\n * A function to generate a unique ID value.\n */\nfunction generateUniqueID() {\n  const dateString = new Date().getTime();\n  const randomness = Math.floor(Math.random() * 1000);\n  const newID = dateString + randomness;\n  return newID;\n}\n\n/**\n * A function that deletes a geometry from the library.\n */\nfunction deleteFromLibrary(inputID) {\n  return started.then(() => {\n    delete library[inputID];\n  });\n}\n\nfunction createMesh(thickness) {\n  return started.then(() => {\n    // This is how you get the data structure that the replica-three-helper\n    // can synchronize with three BufferGeometry\n    return [];\n  });\n}\n\nfunction circle(id, diameter) {\n  return started.then(() => {\n    const newPlane = new Plane().pivot(0, \"Y\");\n    library[id] = {\n      geometry: [replicad.drawCircle(diameter / 2)],\n      tags: [],\n      plane: newPlane,\n      color: \"#FF9065\",\n      bom: [],\n    };\n    return true;\n  });\n}\n\nfunction rectangle(id, x, y) {\n  return started.then(() => {\n    const newPlane = new Plane().pivot(0, \"Y\");\n    library[id] = {\n      geometry: [replicad.drawRectangle(x, y)],\n      tags: [],\n      plane: newPlane,\n      color: \"#FF9065\",\n      bom: [],\n    };\n    return true;\n  });\n}\n\nfunction regularPolygon(id, radius, numberOfSides) {\n  return started.then(() => {\n    const newPlane = new Plane().pivot(0, \"Y\");\n    library[id] = {\n      geometry: [replicad.drawPolysides(radius, numberOfSides)],\n      tags: [],\n      plane: newPlane,\n      color: \"#FF9065\",\n      bom: [],\n    };\n    return true;\n  });\n}\nasync function text(id, text, fontSize, fontFamily) {\n  await replicad\n    .loadFont(Fonts[fontFamily])\n    .then(() => console.log(\"Font loaded\"))\n    .catch((err) => console.error(\"Error loading font: \", err));\n\n  return started.then(() => {\n    const newPlane = new Plane().pivot(0, \"Y\");\n\n    const textGeometry = replicad.drawText(text, {\n      startX: 0,\n      startY: 0,\n      fontSize: fontSize,\n      font: fontFamily,\n    });\n    library[id] = {\n      geometry: [textGeometry],\n      tags: [],\n      plane: newPlane,\n      color: \"#FF9065\",\n      bom: [],\n    };\n    return true;\n  });\n}\n\nfunction loftShapes(targetID, inputsIDs) {\n  return started.then(() => {\n    let arrayOfSketchedGeometry = [];\n\n    inputsIDs.forEach((inputID) => {\n      if (is3D(library[inputID])) {\n        throw new Error(\"Parts to be lofted must be sketches\");\n      }\n      let partToLoft = digFuse(library[inputID]);\n      let sketchedpart = partToLoft.sketchOnPlane(library[inputID].plane);\n      if (!sketchedpart.sketches) {\n        arrayOfSketchedGeometry.push(sketchedpart);\n      } else {\n        throw new Error(\"Sketches to be lofted can't have interior geometries\");\n      }\n    });\n    let startGeometry = arrayOfSketchedGeometry.shift();\n    const newPlane = new Plane().pivot(0, \"Y\");\n\n    library[targetID] = {\n      geometry: [startGeometry.loftWith([...arrayOfSketchedGeometry])],\n      tags: [],\n      plane: newPlane,\n      color: \"#FF9065\",\n      bom: [],\n    };\n    return true;\n  });\n}\n\nfunction extrude(targetID, inputID, height) {\n  return started.then(() => {\n    library[targetID] = actOnLeafs(library[inputID], (leaf) => {\n      return {\n        geometry: [\n          leaf.geometry[0].clone().sketchOnPlane(leaf.plane).extrude(height),\n        ],\n        tags: leaf.tags,\n        plane: leaf.plane,\n        color: leaf.color,\n        bom: leaf.bom,\n      };\n    });\n    return true;\n  });\n}\n\n/* function to check if shape has mesh*/\nfunction is3D(inputs) {\n  // if it's an assembly assume it's 3d since our assemblies don't work for drawings right now\n  if (isAssembly(inputs)) {\n    return inputs.geometry.some((input) => is3D(input));\n  } else if (inputs.geometry[0].mesh !== undefined) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction move(targetID, inputID, x, y, z) {\n  return started.then(() => {\n    if (is3D(library[inputID])) {\n      library[targetID] = actOnLeafs(library[inputID], (leaf) => {\n        return {\n          geometry: [leaf.geometry[0].clone().translate(x, y, z)],\n          plane: leaf.plane,\n          tags: leaf.tags,\n          color: leaf.color,\n          bom: leaf.bom,\n        };\n      });\n    } else {\n      library[targetID] = actOnLeafs(\n        library[inputID],\n        (leaf) => {\n          return {\n            geometry: [leaf.geometry[0].clone().translate([x, y])],\n            tags: leaf.tags,\n            plane: leaf.plane.translate([0, 0, z]),\n            color: leaf.color,\n            bom: leaf.bom,\n          };\n        },\n        library[inputID].plane.translate([0, 0, z])\n      );\n    }\n    return true;\n  });\n}\n\n/**\n * Function to rotate a geometry around the x, y, and z axis\n * @param {string} inputGeometry - The geometry to rotate. Can be any type\n * @param {number} x - The angle to rotate around the x axis\n * @param {number} y - The angle to rotate around the y axis\n * @param {number} z - The angle to rotate around the z axis\n * @param {string} targetID - The ID to store the result in. If it undefined the result will be returned instead\n * @returns {object} - The rotated geometry\n **/\nfunction rotate(inputGeometry, x, y, z, targetID = null) {\n  let input = toGeometry(inputGeometry);\n  return started.then(() => {\n    if (is3D(input)) {\n      let result = actOnLeafs(input, (leaf) => {\n        return {\n          geometry: [\n            leaf.geometry[0]\n              .clone()\n              .rotate(x, [0, 0, 0], [1, 0, 0])\n              .rotate(y, [0, 0, 0], [0, 1, 0])\n              .rotate(z, [0, 0, 0], [0, 0, 1]),\n          ],\n          tags: leaf.tags,\n          plane: leaf.plane,\n          color: leaf.color,\n          bom: leaf.bom,\n        };\n      });\n      if (targetID) {\n        library[targetID] = result;\n      } else {\n        return result;\n      }\n    } else {\n      let result = actOnLeafs(toGeometry(inputGeometry), (leaf) => {\n        return {\n          geometry: [leaf.geometry[0].clone().rotate(z, [0, 0, 0], [0, 0, 1])],\n          tags: leaf.tags,\n          plane: leaf.plane.pivot(x, \"X\").pivot(y, \"Y\"),\n          color: leaf.color,\n          bom: leaf.bom,\n        };\n      });\n      if (targetID) {\n        library[targetID] = result;\n        //library[inputID].plane.pivot(x, \"X\").pivot(y, \"Y\"); //@Alzatin what is this line for?\n      } else {\n        return result;\n      }\n    }\n  });\n}\n\nfunction difference(targetID, input1ID, input2ID) {\n  return started.then(() => {\n    let cutTemplate;\n\n    if (\n      (is3D(library[input1ID]) && is3D(library[input2ID])) ||\n      (!is3D(library[input1ID]) && !is3D(library[input2ID]))\n    ) {\n      cutTemplate = digFuse(library[input2ID]);\n\n      library[targetID] = actOnLeafs(library[input1ID], (leaf) => {\n        return {\n          geometry: [leaf.geometry[0].clone().cut(cutTemplate)],\n          tags: leaf.tags,\n          color: leaf.color,\n          plane: leaf.plane,\n          bom: leaf.bom,\n        };\n      });\n    } else {\n      throw new Error(\"Both inputs must be either 3D or 2D\");\n    }\n    return true;\n  });\n}\n\nfunction shrinkWrapSketches(targetID, inputIDs) {\n  return started.then(() => {\n    let BOM = [];\n    if (inputIDs.every((inputID) => !is3D(library[inputID]))) {\n      let inputsToFuse = [];\n      inputIDs.forEach((inputID) => {\n        let fusedInput = digFuse(library[inputID]);\n        inputsToFuse.push(fusedInput);\n        if (fusedInput.innerShape.blueprints) {\n          throw new Error(\n            \"Sketches to be lofted can't have interior geometries\"\n          );\n        }\n        BOM.push(library[inputID].bom);\n      });\n      let geometryToWrap = chainFuse(inputsToFuse);\n      const newPlane = new Plane().pivot(0, \"Y\");\n      library[targetID] = {\n        geometry: [shrinkWrap(geometryToWrap, 50)],\n        tags: [],\n        color: \"#FF9065\",\n        plane: newPlane,\n        bom: BOM,\n      };\n      return true;\n    } else {\n      throw new Error(\"All inputs must be sketches\");\n    }\n  });\n}\n\nfunction intersect(targetID, input1ID, input2ID) {\n  return started.then(() => {\n    library[targetID] = actOnLeafs(library[input1ID], (leaf) => {\n      const shapeToIntersectWith = digFuse(library[input2ID]);\n      return {\n        geometry: [leaf.geometry[0].clone().intersect(shapeToIntersectWith)],\n        tags: leaf.tags,\n        color: leaf.color,\n        plane: leaf.plane,\n        bom: leaf.bom,\n      };\n    });\n    return true;\n  });\n}\n\nfunction tag(targetID, inputID, TAG) {\n  return started.then(() => {\n    library[targetID] = {\n      geometry: library[inputID].geometry,\n      bom: library[inputID].bom,\n      tags: [...TAG, ...library[inputID].tags],\n      color: library[inputID].color,\n      plane: library[inputID].plane,\n    };\n    return true;\n  });\n}\n\n//---------------------Functions for the code atom---------------------\n\n/**\n * A wrapper for the rotate function to allow it to be Rotate and used in the Code atom\n */\nasync function Rotate(input, x, y, z) {\n  try {\n    const rotatedGeometry = await rotate(input, x, y, z);\n    return rotatedGeometry;\n  } catch (error) {\n    console.error(\"Error rotating geometry:\", error);\n    throw error;\n  }\n}\n\n/**\n * A wrapper for the assembly function to allow it to be Assembly and used in the Code atom\n */\nasync function Assembly(inputs) {\n  try {\n    const assembledGeometry = await assembly(inputs);\n    return assembledGeometry;\n  } catch (error) {\n    console.error(\"Error assembling geometry:\", error);\n    throw error;\n  }\n}\n\n// Runs the user entered code in the worker thread and returns the result.\nasync function code(targetID, code, argumentsArray) {\n  await started;\n  let keys1 = [\"Rotate\", \"Assembly\"];\n  let inputValues = [Rotate, Assembly];\n  for (const [key, value] of Object.entries(argumentsArray)) {\n    keys1.push(`${key}`);\n    inputValues.push(value);\n  }\n\n  // revisit this eval/ Is this the right/safest way to do this?\n  var result = await eval(\n    \"(async (\" +\n      keys1.join(\",\") +\n      \") => {\" +\n      code +\n      \"})(\" +\n      inputValues.join(\",\") +\n      \")\"\n  );\n\n  library[targetID] = result;\n\n  // If the type of the result is a number return the number so it can be passed to the next atom\n  if (typeof result === \"number\") {\n    return result;\n  } else {\n    return true;\n  }\n}\n\nfunction color(targetID, inputID, color) {\n  return started.then(() => {\n    library[targetID] = actOnLeafs(library[inputID], (leaf) => {\n      // keep out color add tag\n      if (color == \"#D9544D\") {\n        leaf.tags.push(\"keepout\");\n      }\n      return {\n        geometry: leaf.geometry,\n        tags: [...leaf.tags],\n        color: color,\n        bom: leaf.bom,\n        plane: leaf.plane,\n      };\n    });\n  });\n}\n\nfunction bom(targetID, inputID, BOM) {\n  return started.then(() => {\n    if (library[inputID].bom != []) {\n      BOM = [...library[inputID].bom, BOM];\n    }\n    library[targetID] = {\n      geometry: library[inputID].geometry,\n      tags: [...library[inputID].tags],\n      bom: BOM,\n      color: library[inputID].color,\n    };\n    return true;\n  });\n}\n\nfunction extractTag(targetID, inputID, TAG) {\n  return started.then(() => {\n    let taggedGeometry = extractTags(library[inputID], TAG);\n    if (taggedGeometry != false) {\n      library[targetID] = {\n        bom: taggedGeometry.bom,\n        geometry: taggedGeometry.geometry,\n        tags: taggedGeometry.tags,\n        color: taggedGeometry.color,\n      };\n    } else {\n      throw new Error(\"Tag not found\");\n    }\n\n    return true;\n  });\n}\n\nfunction output(targetID, inputID) {\n  return started.then(() => {\n    if (library[inputID] != undefined) {\n      library[targetID] = library[inputID];\n    } else {\n      throw new Error(\"Nothing is connected to the output\");\n    }\n\n    return true;\n  });\n}\n\nfunction molecule(targetID, inputID) {\n  return started.then(() => {\n    if (library[inputID] != undefined) {\n      library[targetID] = library[inputID];\n    } else {\n      throw new Error(\"output ID is undefined\");\n    }\n    return true;\n  });\n}\n\n/** Function that extracts geometry with BOM tags and returns bomItems*/\nfunction extractBomList(inputID) {\n  if (library[inputID].bom !== undefined) {\n    return library[inputID].bom;\n  } else {\n    return false;\n  }\n}\n\n/** Visualize STL or STEP*/\nfunction visExport(targetID, inputID, fileType) {\n  return started.then(() => {\n    let geometryToExport = extractKeepOut(library[inputID]);\n    let fusedGeometry = digFuse(geometryToExport);\n    let displayColor =\n      fileType == \"STL\"\n        ? \"#91C8D5\"\n        : fileType == \"STEP\"\n        ? \"#ACAFDD\"\n        : \"#3C3C3C\";\n    let finalGeometry;\n    if (fileType == \"SVG\") {\n      /** Fuses input geometry, draws a top view projection*/\n      if (is3D(library[inputID])) {\n        finalGeometry = [replicad.drawProjection(fusedGeometry, \"top\").visible];\n      } else {\n        finalGeometry = [fusedGeometry];\n      }\n    } else {\n      finalGeometry = [fusedGeometry];\n    }\n    library[targetID] = {\n      geometry: finalGeometry,\n      color: displayColor,\n      plane: library[inputID].plane,\n    };\n    return true;\n  });\n}\n\n/** down STL*/\nfunction downExport(ID, fileType, svgResolution, units) {\n  return started.then(() => {\n    let scaleUnit = units == \"Inches\" ? 1 : units == \"MM\" ? 25.4 : 1;\n    if (fileType == \"SVG\") {\n      let svg = library[ID].geometry[0]\n        .scale(svgResolution / scaleUnit)\n        .toSVG(svgResolution / scaleUnit);\n      var blob = new Blob([svg], { type: \"image/svg+xml;charset=utf-8\" });\n\n      return blob;\n    } else if (fileType == \"STL\") {\n      return library[ID].geometry[0].clone().blobSTL();\n    } else {\n      return library[ID].geometry[0].clone().blobSTEP();\n    }\n  });\n}\n\nasync function importingSTEP(targetID, file) {\n  let STEPresult = await replicad.importSTEP(file);\n\n  library[targetID] = {\n    geometry: [STEPresult],\n    tags: [],\n    color: \"#FF9065\",\n    bom: [],\n  };\n  return true;\n}\n\nasync function importingSTL(targetID, file) {\n  let STLresult = await replicad.importSTL(file);\n\n  library[targetID] = {\n    geometry: [STLresult],\n    tags: [],\n    color: \"#FF9065\",\n    bom: [],\n  };\n  return true;\n}\n\nasync function importingSVG(targetID, svg, width) {\n  const baseWidth = width + width * 0.05;\n  const baseShape = drawRectangle(baseWidth, baseWidth)\n    .sketchOnPlane()\n    .extrude(1);\n  const svgString = svg;\n\n  /* Add svg to face, consider bringing back if we are ever able to choose faces or want to add pattern to face\n  addSVG(baseShape, {\n    faceIndex: 5,\n    depth: depth,\n    svgString: svgString,\n    width: width,\n  })*/\n  library[targetID] = {\n    geometry: [drawSVG(svgString, { width: width })],\n    tags: [],\n    color: \"#FF9065\",\n    bom: [],\n  };\n  return true;\n}\n\nconst prettyProjection = (shape) => {\n  const bbox = shape.boundingBox;\n  const center = bbox.center;\n  const corner = [\n    bbox.center[0] + bbox.width,\n    bbox.center[1] - bbox.height,\n    bbox.center[2] + bbox.depth,\n  ];\n  const camera = new replicad.ProjectionCamera(corner).lookAt(center);\n  const { visible, hidden } = replicad.drawProjection(shape, camera);\n\n  return { visible, hidden };\n};\n\nfunction generateThumbnail(inputID) {\n  return started.then(() => {\n    if (library[inputID] != undefined) {\n      let fusedGeometry;\n      let projectionShape;\n      let svg;\n      if (is3D(library[inputID])) {\n        fusedGeometry = digFuse(library[inputID]);\n        projectionShape = prettyProjection(fusedGeometry);\n        svg = projectionShape.visible.toSVG();\n      } else {\n        fusedGeometry = digFuse(library[inputID])\n          .sketchOnPlane(\"XY\")\n          .extrude(0.0001);\n        projectionShape = replicad.drawProjection(fusedGeometry, \"top\").visible;\n        svg = projectionShape.toSVG();\n      }\n      //let hiddenSvg = projectionShape.hidden.toSVGPaths();\n      return svg;\n    } else {\n      throw new Error(\"can't generate thumbnail for undefined geometry\");\n    }\n  });\n}\n\nfunction extractTags(inputGeometry, TAG) {\n  if (inputGeometry.tags.includes(TAG)) {\n    return inputGeometry;\n  } else if (isAssembly(inputGeometry)) {\n    let geometryWithTags = [];\n    inputGeometry.geometry.forEach((subAssembly) => {\n      let extractedGeometry = extractTags(subAssembly, TAG);\n\n      if (extractedGeometry != false) {\n        geometryWithTags.push(extractedGeometry);\n      }\n    });\n    if (geometryWithTags.length > 0) {\n      let thethingtoreturn = {\n        geometry: geometryWithTags,\n        tags: inputGeometry.tags,\n        color: inputGeometry.color,\n        bom: inputGeometry.bom,\n      };\n      return thethingtoreturn;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}\n\nfunction extractKeepOut(inputGeometry) {\n  if (inputGeometry.tags.includes(\"keepout\")) {\n    return false;\n  } else if (isAssembly(inputGeometry)) {\n    let geometryNoKeepOut = [];\n    inputGeometry.geometry.forEach((subAssembly) => {\n      let extractedGeometry = extractKeepOut(subAssembly, \"keepout\");\n\n      if (extractedGeometry != false) {\n        geometryNoKeepOut.push(extractedGeometry);\n      }\n    });\n    if (geometryNoKeepOut.length > 0) {\n      let thethingtoreturn = {\n        geometry: geometryNoKeepOut,\n        tags: inputGeometry.tags,\n        color: inputGeometry.color,\n        bom: inputGeometry.bom,\n      };\n      return thethingtoreturn;\n    } else {\n      return false;\n    }\n  } else {\n    return inputGeometry;\n  }\n}\n\n/**\n * @param progressCallback - a function which takes two parameters:\n *    - progress - 0 to 1 inclusive\n *    - cancelationHandle - a callable which cancels this task.\n * @param {*} layoutConfig - dictionary with keys:\n *    - thickness - thickness of the stock material\n *    - width\n *    - height - together with width specifies the demensions of the stock material\n *    - sheetPadding - space from the edge of the material where no parts will be placed\n *    - partPadding - space between parts in the resulting placement\n */\nfunction layout(\n  targetID,\n  inputID,\n  TAG,\n  progressCallback,\n  placementsCallback,\n  layoutConfig\n) {\n  return started.then(() => {\n    var shapesForLayout = rotateForLayout(targetID, inputID, TAG, layoutConfig);\n\n    let positionsPromise = computePositions(\n      shapesForLayout,\n      progressCallback,\n      placementsCallback,\n      layoutConfig\n    );\n    return positionsPromise.then((positions) => {\n      let warning;\n      if (positions.length == 0) {\n        warning = \"Failed to place any parts. Are sheet dimensions right?\";\n      } else {\n        let unplacedParts = shapesForLayout.length - positions.flat().length;\n        if (unplacedParts > 0) {\n          warning =\n            unplacedParts +\n            \" parts are too big to fit on this sheet size. Failed layout for \" +\n            unplacedParts +\n            \" part(s)\";\n        }\n      }\n\n      //This does the actual layout of the parts. We want to break this out into it's own function which can be passed a list of positions\n      applyLayout(targetID, inputID, positions, TAG, layoutConfig);\n      return warning;\n    });\n  });\n}\n\n/**\n * Lay the input geometry flat and apply the transformations to display it\n */\nfunction displayLayout(targetID, inputID, positions, TAG, layoutConfig) {\n  rotateForLayout(targetID, inputID, TAG, layoutConfig);\n\n  applyLayout(targetID, inputID, positions, TAG, layoutConfig);\n}\n\n/**\n * Rotate shapes to be placed on their most cuttable face (basically lay them flat)\n */\nfunction rotateForLayout(targetID, inputID, TAG, layoutConfig) {\n  var THICKNESS_TOLLERANCE = 0.001;\n\n  let taggedGeometry = extractTags(library[inputID], TAG);\n  if (!taggedGeometry) {\n    throw new Error(\"No Upstream Geometries Tagged for Cut\");\n  }\n  let localId = 0;\n  let shapesForLayout = [];\n\n  //Split apart disjoint geometry into assemblies so they can be placed seperately\n  // let splitGeometry = actOnLeafs(taggedGeometry, disjointGeometryToAssembly);\n\n  // console.log(splitGeometry);\n\n  // Rotate all shapes to be most cuttable.\n  library[targetID] = actOnLeafs(taggedGeometry, (leaf) => {\n    // For each face, consider it as the underside of the shape on the CNC bed.\n    // In order to be considered, a face must be...\n    //  1) a flat PLANE, not a cylander, or sphere or other curved face type.\n    //  2) the thickness of the part normal to this plane must be less than or equal to\n    //     the raw material thickness\n    //  3) there must be no parts of the shape which protrude \"below\" this face\n    let candidates = [];\n    let hasFlatFace = false;\n    let faceIndex = 0;\n    leaf.geometry[0].faces.forEach((face) => {\n      if (face.geomType == \"PLANE\") {\n        hasFlatFace = true;\n        let prospectiveGoem = moveFaceToCuttingPlane(leaf.geometry[0], face);\n        let thickness = prospectiveGoem.boundingBox.depth;\n        if (thickness < layoutConfig.thickness + THICKNESS_TOLLERANCE) {\n          // Check for protrusions \"below\" the bottom of the raw material.\n          if (\n            prospectiveGoem.boundingBox.bounds[0][2] >\n            -1 * THICKNESS_TOLLERANCE\n          ) {\n            candidates.push({\n              face: face,\n              geom: prospectiveGoem,\n              faceIndex: faceIndex,\n            });\n          }\n        }\n      }\n      faceIndex++;\n    });\n\n    let selected;\n    if (candidates.length == 0) {\n      if (!hasFlatFace) {\n        // TODO: how to specify which upstream object? We know which leaf we're dealing with here\n        // but I'm not sure how to back-track that to alerting on the relevant atom or\n        // providing a user visible indication of which geom is the problem.\n        throw new Error(\"Upstream object uncuttable, has no flat face\");\n      } else {\n        throw new Error(\"Upstream object too thick for specified material\");\n      }\n    } else if (candidates.length == 1) {\n      selected = candidates[0];\n    } else {\n      // The candidate selection here doesn't guarantee a printable piece. In particular there\n      // are shapes with overhangs which we cannot easily detect.\n      // These tie-break heuristics are designed to usually pick a printable orientation for\n      // this piece. (TODO) However, we should consider allowing user-modification of these\n      // orientations before the packing stage.\n\n      // Filter out faces with extra interiorWires, as these may indicate carve-outs which will\n      // be unreachable on the underside of the sheet.\n      let minInteriorWires = Math.min(\n        ...candidates.map((c) => {\n          return c.face.clone().innerWires().length;\n        })\n      );\n      candidates = candidates.filter((c) => {\n        return c.face.clone().innerWires().length === minInteriorWires;\n      });\n      if (candidates.length === 1) {\n        selected = candidates[0];\n      }\n\n      // prefer candidates whose thickness is equal to material thickness, if any.\n      let temp = candidates.filter((c) => {\n        return (\n          Math.abs(c.geom.boundingBox.depth - layoutConfig.thickness) <\n          THICKNESS_TOLLERANCE\n        );\n      });\n      if (temp.length > 0) {\n        candidates = temp;\n      }\n\n      // Pick the largest of the remaining candidates (note: it's not trivial to calculate area, so here we\n      // just compare bounding boxes)\n      let maxArea = 0;\n      candidates.forEach((c) => {\n        if (areaApprox(c.face.UVBounds) > maxArea) {\n          maxArea = areaApprox(c.face.UVBounds);\n          selected = c;\n        }\n      });\n    }\n    let newLeaf = {\n      geometry: [selected.geom],\n      id: localId,\n      referencePoint: selected.face.center,\n      tags: leaf.tags,\n      color: leaf.color,\n      plane: leaf.plane,\n      bom: leaf.bom,\n    };\n    // Retrieve face from the re-positioned shape so that we get the shape of the face after\n    // it's been moved to the xy cutting plane. Otherwise we can get weird skewed projections\n    // of the face shape.\n    shapesForLayout.push({\n      id: localId,\n      shape: newLeaf.geometry[0].faces[selected.faceIndex],\n    });\n    localId++;\n\n    return newLeaf;\n  });\n  return shapesForLayout;\n}\n\n/**\n * Apply the transformations to the geometry to apply the layout\n */\nfunction applyLayout(targetID, inputID, positions, TAG, layoutConfig) {\n  library[targetID] = actOnLeafs(\n    extractTags(library[targetID], TAG),\n    (leaf) => {\n      let transform, index;\n      for (var i = 0; i < positions.length; i++) {\n        let candidates = positions[i].filter(\n          (transform) => transform.id == leaf.id\n        );\n        if (candidates.length == 1) {\n          transform = candidates[0];\n          index = i;\n          break;\n        } else if (candidates.length > 1) {\n          console.warn(\"Found more than one transformation for same id\");\n        }\n      }\n      if (transform == undefined) {\n        console.log(\"didn't find transform for id: \" + leaf.id);\n        return undefined;\n      }\n      // apply rotation first. All rotations are around (0, 0, 0)\n      // Additionally, shift by sheet-index * sheet height so that multiple\n      // sheet layouts are spaced out from one another.\n      let newGeom = leaf.geometry[0]\n        .clone()\n        .rotate(\n          transform.rotate,\n          new replicad.Vector([0, 0, 0]),\n          new replicad.Vector([0, 0, 1])\n        )\n        .translate(\n          transform.translate.x,\n          transform.translate.y + i * layoutConfig.height,\n          0\n        );\n\n      return {\n        geometry: [newGeom],\n        tags: leaf.tags,\n        color: leaf.color,\n        plane: leaf.plane,\n        bom: leaf.bom,\n      };\n    }\n  );\n}\n\n/**\n * Use the packing engine, note this is potentially time consuming step. FIXME: Can this be moved into a different worker?\n */\nfunction computePositions(\n  shapesForLayout,\n  progressCallback,\n  placementsCallback,\n  layoutConfig\n) {\n  const populationSize = 5;\n  const nestingEngine = new AnyNest();\n  const tolerance = 0.1;\n\n  // include tolerance * 2 to ensure padding is the minimum spacing between parts.\n  const configWithDefaults = nestingEngine.config({\n    spacing: layoutConfig.partPadding + tolerance * 2,\n    binSpacing: layoutConfig.sheetPadding,\n    populationSize: populationSize,\n    exploreConcave: false, // we eventually want this to be true, but it's unsupported right now\n  });\n  nestingEngine.setBin(\n    FloatPolygon.fromPoints(\n      [\n        { x: 0, y: 0 },\n        { x: layoutConfig.width, y: 0 },\n        { x: layoutConfig.width, y: layoutConfig.height },\n        { x: 0, y: layoutConfig.height },\n      ],\n      \"bin\"\n    )\n  );\n\n  let parts = [];\n\n  shapesForLayout.forEach((shape) => {\n    let face = shape.shape;\n    const mesh = face\n      .clone()\n      .outerWire()\n      .meshEdges({ tolerance: 0.5, angularTolerance: 5 }); //The tolerance here is described in the conversation here https://github.com/BarbourSmith/Abundance/pull/173\n    const points = preparePoints(mesh, tolerance); // TOOD: it's not actually clear that this tolerance should be the same..\n    parts.push(FloatPolygon.fromPoints(points, shape.id));\n  });\n  nestingEngine.setParts(parts);\n\n  console.log(\n    \"Starting nesting task with configuration: \" +\n      JSON.stringify(configWithDefaults)\n  );\n  let callbackCounter = 0;\n  const targetGenerations = 5;\n  return new Promise((resolve, reject) => {\n    try {\n      nestingEngine.start(\n        (num) => {\n          const fraction = 1 / (targetGenerations * populationSize);\n          // start at 0.1 to acknowledge the rotation computations which happed above.\n          progressCallback(\n            0.1 + 0.9 * (num + callbackCounter) * fraction,\n            proxy(() => {\n              nestingEngine.stop();\n            })\n          );\n        },\n        (placement, utilization) => {\n          callbackCounter++;\n          if (callbackCounter >= targetGenerations * populationSize) {\n            console.log(\n              \"nesting search completed \" +\n                targetGenerations +\n                \" generations. Final result: \" +\n                JSON.stringify(placement)\n            );\n            placementsCallback(placement);\n            nestingEngine.stop();\n            resolve(placement);\n          }\n        }\n      );\n    } catch (err) {\n      console.log(\"error in nesting engine: \" + err);\n      nestingEngine.stop();\n      reject(err);\n    }\n  });\n}\n\n// from the mesh format of [x1, y1, z1, x2, y2, z2, ...] to FloatPolygon friendly format of\n// [{x: x1, y: y1}, {x: x2, y: y2}...]\nfunction preparePoints(mesh, tolerance) {\n  // Unfortunately the \"edges\" of this mesh aren't always in sequential order. Here we re-sort them so we can\n  // pass the points into FloatPolygon in a looping order, ie, starting at one point and looping around the\n  // perimiter of the shape.\n\n  // create structure for lookup of line segments by start point or end point\n  let edgeStarts = [];\n  mesh.edgeGroups.forEach((edge) => {\n    edgeStarts.push({\n      startPoint: {\n        x: mesh.lines[edge.start * 3],\n        y: mesh.lines[edge.start * 3 + 1],\n      },\n      start: edge.start * 3,\n      len: edge.count,\n      edgeId: edge.edgeId,\n    });\n    const endIndex = (edge.start + edge.count - 1) * 3;\n    edgeStarts.push({\n      startPoint: { x: mesh.lines[endIndex], y: mesh.lines[endIndex + 1] },\n      start: endIndex,\n      len: -1 * edge.count,\n      edgeId: edge.edgeId,\n    });\n  });\n\n  const almostEqual = (p1, p2) => {\n    const x = Math.abs(p1.x - p2.x) < tolerance;\n    const y = Math.abs(p1.y - p2.y) < tolerance;\n    return x && y;\n  };\n\n  const result = [];\n  let currentEdge = edgeStarts[0];\n  while (edgeStarts.length > 0) {\n    // add currentEdge to result. Remember, it could be reverse direction if we matched\n    // an endpoint.\n    for (var i = 1; i < Math.abs(currentEdge.len); i++) {\n      // skip start point\n      let offset = i * 3;\n      if (currentEdge.len < 0) {\n        offset = -1 * offset;\n      }\n      const index = currentEdge.start + offset;\n      result.push({ x: mesh.lines[index], y: mesh.lines[index + 1] });\n    }\n\n    // Remove this edge and it's inverse from the lookup table.\n    edgeStarts = edgeStarts.filter((edge) => {\n      return edge.edgeId != currentEdge.edgeId;\n    });\n\n    // else find next edge which starts where current result ends.\n    const nextEgdes = edgeStarts.filter((edge) => {\n      return almostEqual(result[result.length - 1], edge.startPoint);\n    });\n\n    if (edgeStarts.length > 0 && nextEgdes.length != 1) {\n      // console.log(result);\n      // console.log(edgeStarts);\n      // console.log(nextEgdes);\n      throw new Error(\n        \"Geometry error when preparing for cutlayout. Part perimiter has an edge with: \" +\n          nextEgdes.length +\n          \" continuations\"\n      );\n    }\n    currentEdge = nextEgdes[0];\n  }\n  return result;\n}\n\nfunction moveFaceToCuttingPlane(geom, face) {\n  let pointOnSurface = face.pointOnSurface(0, 0);\n  let faceNormal = face.normalAt();\n\n  // Always use \"XY\" plane as the cutting surface\n  // TODO(tristan): there's an inversion here I don't fully understand, hence using the negative Z vector.\n  let cutPlaneNormal = new replicad.Vector([0, 0, -1]);\n\n  let rotationAxis = faceNormal.cross(cutPlaneNormal);\n  if (rotationAxis.Length == 0) {\n    // Face already parallel to cut plane, no rotation necessary.\n    return geom.clone().translate(0, 0, -1 * pointOnSurface.z);\n  }\n\n  let rotationDegrees =\n    (Math.acos(\n      faceNormal.dot(cutPlaneNormal) /\n        (cutPlaneNormal.Length * faceNormal.Length)\n    ) *\n      360) /\n    (2 * Math.PI);\n\n  return geom\n    .clone()\n    .rotate(rotationDegrees, pointOnSurface, rotationAxis)\n    .translate(0, 0, -1 * pointOnSurface.z);\n}\n\nfunction areaApprox(bounds) {\n  return (bounds.uMax - bounds.uMin) * (bounds.vMax - bounds.vMin);\n}\n\n// Checks if part is an assembly)\nfunction isAssembly(part) {\n  if (part.geometry.length > 0) {\n    if (part.geometry[0].geometry) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}\n\n/** Cut assembly function that takes in a part to cut (library object), cutting parts (unique IDS), assembly id and index */\n/** Returns a new single cut part or an assembly of cut parts */\nfunction cutAssembly(partToCut, cuttingParts, assemblyID) {\n  try {\n    //If the partToCut is an assembly pass each part back into cutAssembly function to be cut separately\n    if (isAssembly(partToCut)) {\n      let assemblyToCut = partToCut.geometry;\n      let assemblyCut = [];\n      assemblyToCut.forEach((part) => {\n        // make new assembly from cut parts\n        assemblyCut.push(cutAssembly(part, cuttingParts, assemblyID));\n      });\n\n      let subID = generateUniqueID();\n      //returns new assembly that has been cut\n      library[subID] = {\n        //This feels like a hack, we shouldn't be using the library internally like this\n        geometry: assemblyCut,\n        tags: partToCut.tags,\n        bom: partToCut.bom,\n      };\n      return library[subID];\n    } else {\n      // if part to cut is a single part send to cutting function with cutting parts\n      var partCutCopy = partToCut.geometry[0];\n      cuttingParts.forEach((cuttingPart) => {\n        // for each cutting part cut the part\n        partCutCopy = recursiveCut(partCutCopy, toGeometry(cuttingPart));\n      });\n      // return new cut part\n      let newID = generateUniqueID();\n      library[newID] = {\n        geometry: [partCutCopy],\n        tags: partToCut.tags,\n        color: partToCut.color,\n        bom: partToCut.bom,\n        plane: partToCut.plane,\n      };\n\n      return library[newID];\n    }\n  } catch (e) {\n    throw new Error(\"Cut Assembly failed\");\n  }\n}\n/** Recursive function that gets passed a solid to cut and a library object that cuts it */\nfunction recursiveCut(partToCut, cuttingPart) {\n  try {\n    let cutGeometry = partToCut;\n    // if cutting part is an assembly pass back into the function to be cut by each part in that assembly\n    if (isAssembly(cuttingPart)) {\n      for (let i = 0; i < cuttingPart.geometry.length; i++) {\n        cutGeometry = recursiveCut(cutGeometry, cuttingPart.geometry[i]);\n      }\n      return cutGeometry;\n    } else {\n      // cut and return part\n      let cutPart;\n      cutPart = partToCut.cut(cuttingPart.geometry[0]);\n      return cutPart;\n    }\n  } catch (e) {\n    throw new Error(\"Recursive Cut failed\");\n  }\n}\n\n/**\n * A function which takes in an array of target geometries and forms them into an assembly\n * Geometries will cut all geometries below them in the list to make sure that no parts intersect\n * If the targetID is defined, the assembly will be stored in the library under that ID, otherwise it will be returned\n */\nasync function assembly(inputIDs, targetID = null) {\n  if (!Array.isArray(inputIDs) || inputIDs.length === 0) {\n    throw new Error(\"inputIDs must be a non-empty array\");\n  }\n\n  await started;\n\n  let assembly = [];\n  let bomAssembly = [];\n\n  if (inputIDs.length > 1) {\n    const all3D = inputIDs.every((inputID) => is3D(toGeometry(inputID)));\n    const all2D = inputIDs.every((inputID) => !is3D(toGeometry(inputID)));\n\n    if (all3D || all2D) {\n      for (let i = 0; i < inputIDs.length; i++) {\n        const geometry = toGeometry(inputIDs[i]);\n        assembly.push(cutAssembly(geometry, inputIDs.slice(i + 1), targetID));\n        if (geometry.bom.length > 0) {\n          bomAssembly.push(...geometry.bom);\n        }\n      }\n    } else {\n      throw new Error(\n        \"Assemblies must be composed from only sketches OR only solids\"\n      );\n    }\n  } else {\n    const geometry = toGeometry(inputIDs[0]);\n    assembly.push(geometry);\n    if (geometry.bom.length > 0) {\n      bomAssembly.push(...geometry.bom);\n    }\n  }\n\n  const newPlane = new Plane().pivot(0, \"Y\");\n  let generatedAssembly = {\n    geometry: assembly,\n    plane: newPlane,\n    tags: [],\n    bom: bomAssembly,\n  };\n\n  if (targetID != null) {\n    library[targetID] = generatedAssembly;\n  } else {\n    return generatedAssembly;\n  }\n\n  return true;\n}\n\nfunction fusion(targetID, inputIDs) {\n  return started.then(() => {\n    let fusedGeometry = [];\n    let bomAssembly = [];\n    inputIDs.forEach((inputID) => {\n      if (inputIDs.every((inputID) => is3D(library[inputID]))) {\n        fusedGeometry.push(digFuse(library[inputID]));\n      } else if (inputIDs.every((inputID) => !is3D(library[inputID]))) {\n        fusedGeometry.push(digFuse(library[inputID]));\n      } else {\n        throw new Error(\n          \"Fusion must be composed from only sketches OR only solids\"\n        );\n      }\n      if (library[inputID].bom.length > 0) {\n        bomAssembly.push(...library[inputID].bom);\n      }\n    });\n    const newPlane = new Plane().pivot(0, \"Y\");\n    library[targetID] = {\n      geometry: [chainFuse(fusedGeometry)],\n      tags: [],\n      bom: bomAssembly,\n      plane: newPlane,\n      color: \"#FF9065\",\n    };\n    return true;\n  });\n}\n\n/**\n * Function which takes in a geometry and returns the same geometry if it is cohesive or an assembly if the geometry is disjoint\n */\nfunction disjointGeometryToAssembly(inputID) {\n  let input = toGeometry(inputID).geometry[0]; //This does not accept assemblies\n  let solidsArray = Array.from(\n    replicad.iterTopo(input.wrapped, \"solid\"),\n    (s) => new Solid(s)\n  );\n  console.log(\"solidsArray\", solidsArray);\n  //If there is more than one solid in the geometry, return an assembly\n  if (solidsArray.length > 1) {\n    let assemblyArray = [];\n    solidsArray.forEach((solid) => {\n      assemblyArray.push({\n        geometry: [solid],\n        tags: input.tags,\n        bom: input.bom,\n        color: input.color,\n        plane: input.plane,\n      });\n    });\n    return {\n      geometry: assemblyArray,\n      tags: input.tags,\n      bom: input.bom,\n      color: input.color,\n      plane: input.plane,\n    };\n    //If there is only one solid in the geometry, return the input\n  } else {\n    return toGeometry(inputID);\n  }\n}\n\n//Action is a function which takes in a leaf and returns a new leaf which has had the action applied to it\n// The action may return 'undefined' to cause the leaf to be removed from the result.\nfunction actOnLeafs(assembly, action, plane) {\n  plane = plane || assembly.plane;\n  //This is a leaf\n  if (\n    assembly.geometry.length == 1 &&\n    assembly.geometry[0].geometry == undefined\n  ) {\n    return action(assembly);\n  }\n  //This is a branch\n  else {\n    let transformedAssembly = [];\n    assembly.geometry.forEach((subAssembly) => {\n      const result = actOnLeafs(subAssembly, action);\n      if (result != undefined) {\n        transformedAssembly.push(result);\n      }\n    });\n    return {\n      geometry: transformedAssembly,\n      tags: assembly.tags,\n      bom: assembly.bom,\n      plane: plane,\n    };\n  }\n}\n\nfunction flattenAssembly(assembly) {\n  var flattened = [];\n  //This is a leaf\n  if (\n    assembly.geometry.length == 1 &&\n    assembly.geometry[0].geometry == undefined\n  ) {\n    flattened.push({ geometry: assembly.geometry[0], color: assembly.color });\n    return flattened;\n  }\n  //This is a branch\n  else {\n    assembly.geometry.forEach((subAssembly) => {\n      flattened.push(...flattenAssembly(subAssembly));\n    });\n    return flattened;\n  }\n}\n\nfunction chainFuse(chain) {\n  try {\n    let fused = chain[0].clone();\n    for (let i = 1; i < chain.length; i++) {\n      fused = fused.fuse(chain[i]);\n    }\n    return fused;\n  } catch (e) {\n    throw new Error(\"Fusion failed\");\n  }\n}\n\nfunction digFuse(assembly) {\n  var flattened = [];\n\n  if (isAssembly(assembly)) {\n    assembly.geometry.forEach((subAssembly) => {\n      if (!isAssembly(subAssembly)) {\n        //if it's not an assembly hold on add it to the fusion list\n        flattened.push(subAssembly.geometry[0]);\n      } else {\n        // if it is an assembly keep digging\n        // add the fused things in\n        flattened.push(digFuse(subAssembly));\n      }\n    });\n    return chainFuse(flattened);\n  } else {\n    return assembly.geometry[0];\n  }\n}\n\nlet colorOptions = {\n  Red: \"#FF9065\",\n  Orange: \"#FFB458\",\n  Yellow: \"#FFD600\",\n  Olive: \"#C7DF66\",\n  Teal: \"#71D1C2\",\n  \"Light Blue\": \"#75DBF2\",\n  Green: \"#A3CE5B\",\n  \"Lavender \": \"#CCABED\",\n  Brown: \"#CFAB7C\",\n  Pink: \"#FFB09D\",\n  Sand: \"#E2C66C\",\n  Clay: \"#C4D3AC\",\n  Blue: \"#91C8D5\",\n  \"Light Green\": \"#96E1BB\",\n  Purple: \"#ACAFDD\",\n  \"Light Purple\": \"#DFB1E8\",\n  Tan: \"#F5D3B6\",\n  \"Mauve \": \"#DBADA9\",\n  Grey: \"#BABABA\",\n  Black: \"#3C3C3C\",\n  White: \"#FFFCF7\",\n  \"Keep Out\": \"#E0E0E0\",\n};\nasync function generateDefaultMesh(id) {\n  let defaultMesh = await text(id, \"No output to display\", 28, \"ROBOTO\");\n  return defaultMesh;\n}\n\nfunction resetView() {\n  return started.then(() => {\n    return [];\n  });\n}\n\nfunction getLargestBoundingBox(meshArray) {\n  let overallMin = [Infinity, Infinity, Infinity];\n  let overallMax = [-Infinity, -Infinity, -Infinity];\n\n  if (!Array.isArray(meshArray)) {\n    throw new Error(\"meshArray is not defined or not an array\");\n  }\n\n  meshArray.forEach((mesh) => {\n    if (\n      !mesh.geometry ||\n      !mesh.geometry.boundingBox ||\n      !Array.isArray(mesh.geometry.boundingBox.bounds)\n    ) {\n      throw new Error(\"Invalid mesh geometry or boundingBox structure\");\n    }\n\n    let boundingBox = mesh.geometry.boundingBox.bounds;\n    if (\n      boundingBox.length < 2 ||\n      !Array.isArray(boundingBox[0]) ||\n      !Array.isArray(boundingBox[1])\n    ) {\n      throw new Error(\"boundingBox bounds are not properly defined\");\n    }\n\n    let min = boundingBox[0];\n    let max = boundingBox[1];\n\n    // Update overall minimum coordinates\n    overallMin[0] = Math.min(overallMin[0], min[0]);\n    overallMin[1] = Math.min(overallMin[1], min[1]);\n    overallMin[2] = Math.min(overallMin[2], min[2]);\n\n    // Update overall maximum coordinates\n    overallMax[0] = Math.max(overallMax[0], max[0]);\n    overallMax[1] = Math.max(overallMax[1], max[1]);\n    overallMax[2] = Math.max(overallMax[2], max[2]);\n  });\n\n  // Create a new bounding box with the overall min and max coordinates\n  let newBoundingBox = [overallMin, overallMax];\n\n  // Calculate the width, height, and depth\n  let width = overallMax[0] - overallMin[0];\n  let height = overallMax[1] - overallMin[1];\n  let depth = overallMax[2] - overallMin[2];\n\n  // Return the dimensions as a 3-point vector\n  return { width, height, depth };\n\n  //return newBoundingBox;\n}\n\nfunction calculateZoom(boundingBox) {\n  try {\n    // Given example bounding box and zoom level\n    const exampleBoundingBox = {\n      width: 312.0005000624958,\n      height: 312.00074999364347,\n      depth: 432.0009977339615,\n    };\n    const exampleZoom = 0.5;\n\n    // Calculate the diagonal length of the given example bounding box\n    const exampleDiagonal = Math.sqrt(\n      Math.pow(exampleBoundingBox.width, 2) +\n        Math.pow(exampleBoundingBox.height, 2) +\n        Math.pow(exampleBoundingBox.depth, 2)\n    );\n\n    // Calculate the diagonal length of the input bounding box\n    const diagonal = Math.sqrt(\n      Math.pow(boundingBox.width, 2) +\n        Math.pow(boundingBox.height, 2) +\n        Math.pow(boundingBox.depth, 2)\n    );\n\n    // Calculate the zoom level based on the proportional relationship\n    const zoom = (exampleZoom * exampleDiagonal) / diagonal;\n    return zoom;\n  } catch (e) {\n    throw new Error(\"Error calculating zoom level\");\n  }\n}\n\nfunction generateCameraPosition(meshArray) {\n  try {\n    // Get the largest bounding box from the mesh array\n    let largestBoundingBox = getLargestBoundingBox(meshArray);\n    let zoom = calculateZoom(largestBoundingBox);\n\n    return zoom;\n  } catch (e) {\n    throw new Error(e);\n  }\n}\n\nfunction generateDisplayMesh(id) {\n  return started.then(() => {\n    console.log(\"Generating display mesh for \" + id);\n    if (library[id] == undefined || id == undefined) {\n      console.log(\"ID undefined or not found in library\");\n      //throw new Error(\"ID not found in library\");\n      generateDefaultMesh(id).then((result) => {\n        console.log(result);\n      });\n    }\n    let meshArray = [];\n\n    //Flatten the assembly to remove hierarchy\n    const flattened = flattenAssembly(library[id]);\n\n    flattened.forEach((displayObject) => {\n      var cleanedGeometry = [];\n      if (displayObject.geometry.mesh == undefined) {\n        let sketchPlane = library[id].plane;\n        let sketches = displayObject.geometry.clone();\n        cleanedGeometry = sketches.sketchOnPlane(sketchPlane).extrude(0.0001);\n      } else {\n        cleanedGeometry = displayObject.geometry;\n      }\n      meshArray.push({\n        color: displayObject.color,\n        geometry: cleanedGeometry,\n      });\n    });\n    let cameraZoom;\n    try {\n      cameraZoom = generateCameraPosition(meshArray);\n    } catch (e) {\n      console.log(\"Error generating camera position\");\n      cameraZoom = 1;\n    }\n    let finalMeshes = [];\n    //Iterate through the meshArray and create final meshes with faces, edges and color to pass to display\n    meshArray.forEach((meshgeometry) => {\n      try {\n        //Try extruding if there is no 3d shape\n        if (meshgeometry.geometry.mesh == undefined) {\n          const threeDShape = meshgeometry\n            .sketchOnPlane(sketchPlane)\n            .clone()\n            .extrude(0.0001);\n          return {\n            faces: threeDShape.mesh({ tolerance: 0.1, angularTolerance: 0.5 }),\n            edges: threeDShape.meshEdges({\n              tolerance: 0.1,\n              angularTolerance: 0.5,\n            }),\n          };\n        } else {\n          finalMeshes.push({\n            cameraZoom: cameraZoom,\n            faces: meshgeometry.geometry.mesh({\n              tolerance: 0.1,\n              angularTolerance: 0.5,\n            }),\n            edges: meshgeometry.geometry.meshEdges({\n              tolerance: 0.1,\n              angularTolerance: 0.5,\n            }),\n            color: meshgeometry.color,\n          });\n        }\n      } catch (e) {\n        throw new Error(\"Error generating display mesh\" + e);\n      }\n    });\n\n    return finalMeshes;\n  });\n}\n\n// comlink is great to expose your functions within the worker as a simple API\n// to your app.\nexpose({\n  deleteFromLibrary,\n  importingSTEP,\n  importingSTL,\n  importingSVG,\n  createMesh,\n  circle,\n  color,\n  code,\n  regularPolygon,\n  rectangle,\n  generateDisplayMesh,\n  extrude,\n  fusion,\n  extractBomList,\n  generateThumbnail,\n  visExport,\n  downExport,\n  shrinkWrapSketches,\n  move,\n  rotate,\n  difference,\n  tag,\n  layout,\n  displayLayout,\n  output,\n  molecule,\n  bom,\n  extractTag,\n  intersect,\n  assembly,\n  loftShapes,\n  text,\n  resetView,\n});\n",
    "static": true,
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/src/worker.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 909,
    "kind": "variable",
    "name": "library",
    "memberof": "src/worker.js",
    "static": true,
    "longname": "src/worker.js~library",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 910,
    "kind": "variable",
    "name": "loaded",
    "memberof": "src/worker.js",
    "static": true,
    "longname": "src/worker.js~loaded",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 911,
    "kind": "function",
    "name": "init",
    "memberof": "src/worker.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/worker.js~init",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 912,
    "kind": "variable",
    "name": "started",
    "memberof": "src/worker.js",
    "static": true,
    "longname": "src/worker.js~started",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 913,
    "kind": "function",
    "name": "toGeometry",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~toGeometry",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": "A function which converts any input into Abundance style geometry. Input can be a library ID, an abundance object, or a single geometry object.\nThis is useful for allowing our functions to work within the Code atom or within the flow canvas.",
    "lineNumber": 37,
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"geometry\": *, \"tags\": *, \"color\": string, \"bom\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 914,
    "kind": "function",
    "name": "generateUniqueID",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~generateUniqueID",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": "A function to generate a unique ID value.",
    "lineNumber": 60,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 915,
    "kind": "function",
    "name": "deleteFromLibrary",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~deleteFromLibrary",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": "A function that deletes a geometry from the library.",
    "lineNumber": 70,
    "params": [
      {
        "name": "inputID",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 916,
    "kind": "function",
    "name": "createMesh",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~createMesh",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [
      {
        "name": "thickness",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 917,
    "kind": "function",
    "name": "circle",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~circle",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "diameter",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 918,
    "kind": "function",
    "name": "rectangle",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~rectangle",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 919,
    "kind": "function",
    "name": "regularPolygon",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~regularPolygon",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "radius",
        "types": [
          "*"
        ]
      },
      {
        "name": "numberOfSides",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 920,
    "kind": "function",
    "name": "text",
    "memberof": "src/worker.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/worker.js~text",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "text",
        "types": [
          "*"
        ]
      },
      {
        "name": "fontSize",
        "types": [
          "*"
        ]
      },
      {
        "name": "fontFamily",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 921,
    "kind": "function",
    "name": "loftShapes",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~loftShapes",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "params": [
      {
        "name": "targetID",
        "types": [
          "*"
        ]
      },
      {
        "name": "inputsIDs",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 922,
    "kind": "function",
    "name": "extrude",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~extrude",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 181,
    "undocument": true,
    "params": [
      {
        "name": "targetID",
        "types": [
          "*"
        ]
      },
      {
        "name": "inputID",
        "types": [
          "*"
        ]
      },
      {
        "name": "height",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 923,
    "kind": "function",
    "name": "is3D",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~is3D",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 199,
    "undocument": true,
    "params": [
      {
        "name": "inputs",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 924,
    "kind": "function",
    "name": "move",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~move",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 210,
    "undocument": true,
    "params": [
      {
        "name": "targetID",
        "types": [
          "*"
        ]
      },
      {
        "name": "inputID",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "z",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 925,
    "kind": "function",
    "name": "rotate",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~rotate",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": "Function to rotate a geometry around the x, y, and z axis",
    "lineNumber": 250,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} - The rotated geometry"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "inputGeometry",
        "description": "The geometry to rotate. Can be any type"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The angle to rotate around the x axis"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The angle to rotate around the y axis"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "The angle to rotate around the z axis"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "targetID",
        "description": "The ID to store the result in. If it undefined the result will be returned instead"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The rotated geometry"
    },
    "ignore": true
  },
  {
    "__docId__": 926,
    "kind": "function",
    "name": "difference",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~difference",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 294,
    "undocument": true,
    "params": [
      {
        "name": "targetID",
        "types": [
          "*"
        ]
      },
      {
        "name": "input1ID",
        "types": [
          "*"
        ]
      },
      {
        "name": "input2ID",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 927,
    "kind": "function",
    "name": "shrinkWrapSketches",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~shrinkWrapSketches",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 320,
    "undocument": true,
    "params": [
      {
        "name": "targetID",
        "types": [
          "*"
        ]
      },
      {
        "name": "inputIDs",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 928,
    "kind": "function",
    "name": "intersect",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~intersect",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 351,
    "undocument": true,
    "params": [
      {
        "name": "targetID",
        "types": [
          "*"
        ]
      },
      {
        "name": "input1ID",
        "types": [
          "*"
        ]
      },
      {
        "name": "input2ID",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 929,
    "kind": "function",
    "name": "tag",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~tag",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 367,
    "undocument": true,
    "params": [
      {
        "name": "targetID",
        "types": [
          "*"
        ]
      },
      {
        "name": "inputID",
        "types": [
          "*"
        ]
      },
      {
        "name": "TAG",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 930,
    "kind": "function",
    "name": "Rotate",
    "memberof": "src/worker.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/worker.js~Rotate",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": "A wrapper for the rotate function to allow it to be Rotate and used in the Code atom",
    "lineNumber": 385,
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "z",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 931,
    "kind": "function",
    "name": "Assembly",
    "memberof": "src/worker.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/worker.js~Assembly",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": "A wrapper for the assembly function to allow it to be Assembly and used in the Code atom",
    "lineNumber": 398,
    "params": [
      {
        "name": "inputs",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 932,
    "kind": "function",
    "name": "code",
    "memberof": "src/worker.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/worker.js~code",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 409,
    "undocument": true,
    "params": [
      {
        "name": "targetID",
        "types": [
          "*"
        ]
      },
      {
        "name": "code",
        "types": [
          "*"
        ]
      },
      {
        "name": "argumentsArray",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 933,
    "kind": "function",
    "name": "color",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~color",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 439,
    "undocument": true,
    "params": [
      {
        "name": "targetID",
        "types": [
          "*"
        ]
      },
      {
        "name": "inputID",
        "types": [
          "*"
        ]
      },
      {
        "name": "color",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 934,
    "kind": "function",
    "name": "bom",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~bom",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 457,
    "undocument": true,
    "params": [
      {
        "name": "targetID",
        "types": [
          "*"
        ]
      },
      {
        "name": "inputID",
        "types": [
          "*"
        ]
      },
      {
        "name": "BOM",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 935,
    "kind": "function",
    "name": "extractTag",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~extractTag",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 472,
    "undocument": true,
    "params": [
      {
        "name": "targetID",
        "types": [
          "*"
        ]
      },
      {
        "name": "inputID",
        "types": [
          "*"
        ]
      },
      {
        "name": "TAG",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 936,
    "kind": "function",
    "name": "output",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~output",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 490,
    "undocument": true,
    "params": [
      {
        "name": "targetID",
        "types": [
          "*"
        ]
      },
      {
        "name": "inputID",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 937,
    "kind": "function",
    "name": "molecule",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~molecule",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 502,
    "undocument": true,
    "params": [
      {
        "name": "targetID",
        "types": [
          "*"
        ]
      },
      {
        "name": "inputID",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 938,
    "kind": "function",
    "name": "extractBomList",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~extractBomList",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": "Function that extracts geometry with BOM tags and returns bomItems",
    "lineNumber": 514,
    "params": [
      {
        "name": "inputID",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 939,
    "kind": "function",
    "name": "visExport",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~visExport",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": "Visualize STL or STEP",
    "lineNumber": 523,
    "params": [
      {
        "name": "targetID",
        "types": [
          "*"
        ]
      },
      {
        "name": "inputID",
        "types": [
          "*"
        ]
      },
      {
        "name": "fileType",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 940,
    "kind": "function",
    "name": "downExport",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~downExport",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": "down STL",
    "lineNumber": 554,
    "params": [
      {
        "name": "ID",
        "types": [
          "*"
        ]
      },
      {
        "name": "fileType",
        "types": [
          "*"
        ]
      },
      {
        "name": "svgResolution",
        "types": [
          "*"
        ]
      },
      {
        "name": "units",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 941,
    "kind": "function",
    "name": "importingSTEP",
    "memberof": "src/worker.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/worker.js~importingSTEP",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 572,
    "undocument": true,
    "params": [
      {
        "name": "targetID",
        "types": [
          "*"
        ]
      },
      {
        "name": "file",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 942,
    "kind": "function",
    "name": "importingSTL",
    "memberof": "src/worker.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/worker.js~importingSTL",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 584,
    "undocument": true,
    "params": [
      {
        "name": "targetID",
        "types": [
          "*"
        ]
      },
      {
        "name": "file",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 943,
    "kind": "function",
    "name": "importingSVG",
    "memberof": "src/worker.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/worker.js~importingSVG",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 596,
    "undocument": true,
    "params": [
      {
        "name": "targetID",
        "types": [
          "*"
        ]
      },
      {
        "name": "svg",
        "types": [
          "*"
        ]
      },
      {
        "name": "width",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 944,
    "kind": "function",
    "name": "prettyProjection",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~prettyProjection",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 619,
    "undocument": true,
    "params": [
      {
        "name": "shape",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"visible\": *, \"hidden\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 945,
    "kind": "function",
    "name": "generateThumbnail",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~generateThumbnail",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 633,
    "undocument": true,
    "params": [
      {
        "name": "inputID",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 946,
    "kind": "function",
    "name": "extractTags",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~extractTags",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 658,
    "undocument": true,
    "params": [
      {
        "name": "inputGeometry",
        "types": [
          "*"
        ]
      },
      {
        "name": "TAG",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 947,
    "kind": "function",
    "name": "extractKeepOut",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~extractKeepOut",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 686,
    "undocument": true,
    "params": [
      {
        "name": "inputGeometry",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 948,
    "kind": "function",
    "name": "layout",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~layout",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 725,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "progressCallback",
        "description": "a function which takes two parameters:\n   - progress - 0 to 1 inclusive\n   - cancelationHandle - a callable which cancels this task."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "layoutConfig",
        "description": "dictionary with keys:\n   - thickness - thickness of the stock material\n   - width\n   - height - together with width specifies the demensions of the stock material\n   - sheetPadding - space from the edge of the material where no parts will be placed\n   - partPadding - space between parts in the resulting placement"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 949,
    "kind": "function",
    "name": "displayLayout",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~displayLayout",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": "Lay the input geometry flat and apply the transformations to display it",
    "lineNumber": 767,
    "params": [
      {
        "name": "targetID",
        "types": [
          "*"
        ]
      },
      {
        "name": "inputID",
        "types": [
          "*"
        ]
      },
      {
        "name": "positions",
        "types": [
          "*"
        ]
      },
      {
        "name": "TAG",
        "types": [
          "*"
        ]
      },
      {
        "name": "layoutConfig",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 950,
    "kind": "function",
    "name": "rotateForLayout",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~rotateForLayout",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": "Rotate shapes to be placed on their most cuttable face (basically lay them flat)",
    "lineNumber": 776,
    "params": [
      {
        "name": "targetID",
        "types": [
          "*"
        ]
      },
      {
        "name": "inputID",
        "types": [
          "*"
        ]
      },
      {
        "name": "TAG",
        "types": [
          "*"
        ]
      },
      {
        "name": "layoutConfig",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 951,
    "kind": "function",
    "name": "applyLayout",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~applyLayout",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": "Apply the transformations to the geometry to apply the layout",
    "lineNumber": 904,
    "params": [
      {
        "name": "targetID",
        "types": [
          "*"
        ]
      },
      {
        "name": "inputID",
        "types": [
          "*"
        ]
      },
      {
        "name": "positions",
        "types": [
          "*"
        ]
      },
      {
        "name": "TAG",
        "types": [
          "*"
        ]
      },
      {
        "name": "layoutConfig",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 952,
    "kind": "function",
    "name": "computePositions",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~computePositions",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": "Use the packing engine, note this is potentially time consuming step. FIXME: Can this be moved into a different worker?",
    "lineNumber": 955,
    "params": [
      {
        "name": "shapesForLayout",
        "types": [
          "*"
        ]
      },
      {
        "name": "progressCallback",
        "types": [
          "*"
        ]
      },
      {
        "name": "placementsCallback",
        "types": [
          "*"
        ]
      },
      {
        "name": "layoutConfig",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 953,
    "kind": "function",
    "name": "preparePoints",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~preparePoints",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1041,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      },
      {
        "name": "tolerance",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 954,
    "kind": "function",
    "name": "moveFaceToCuttingPlane",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~moveFaceToCuttingPlane",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1113,
    "undocument": true,
    "params": [
      {
        "name": "geom",
        "types": [
          "*"
        ]
      },
      {
        "name": "face",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 955,
    "kind": "function",
    "name": "areaApprox",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~areaApprox",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1141,
    "undocument": true,
    "params": [
      {
        "name": "bounds",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 956,
    "kind": "function",
    "name": "isAssembly",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~isAssembly",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1146,
    "undocument": true,
    "params": [
      {
        "name": "part",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 957,
    "kind": "function",
    "name": "cutAssembly",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~cutAssembly",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": "Returns a new single cut part or an assembly of cut parts",
    "lineNumber": 1160,
    "params": [
      {
        "name": "partToCut",
        "types": [
          "*"
        ]
      },
      {
        "name": "cuttingParts",
        "types": [
          "*"
        ]
      },
      {
        "name": "assemblyID",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 958,
    "kind": "function",
    "name": "recursiveCut",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~recursiveCut",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": "Recursive function that gets passed a solid to cut and a library object that cuts it",
    "lineNumber": 1204,
    "params": [
      {
        "name": "partToCut",
        "types": [
          "*"
        ]
      },
      {
        "name": "cuttingPart",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 959,
    "kind": "function",
    "name": "assembly",
    "memberof": "src/worker.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/worker.js~assembly",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": "A function which takes in an array of target geometries and forms them into an assembly\nGeometries will cut all geometries below them in the list to make sure that no parts intersect\nIf the targetID is defined, the assembly will be stored in the library under that ID, otherwise it will be returned",
    "lineNumber": 1229,
    "params": [
      {
        "name": "inputIDs",
        "types": [
          "*"
        ]
      },
      {
        "name": "targetID",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 960,
    "kind": "function",
    "name": "fusion",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~fusion",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1281,
    "undocument": true,
    "params": [
      {
        "name": "targetID",
        "types": [
          "*"
        ]
      },
      {
        "name": "inputIDs",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 961,
    "kind": "function",
    "name": "disjointGeometryToAssembly",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~disjointGeometryToAssembly",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": "Function which takes in a geometry and returns the same geometry if it is cohesive or an assembly if the geometry is disjoint",
    "lineNumber": 1314,
    "params": [
      {
        "name": "inputID",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 962,
    "kind": "function",
    "name": "actOnLeafs",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~actOnLeafs",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1348,
    "undocument": true,
    "params": [
      {
        "name": "assembly",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      },
      {
        "name": "plane",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"geometry\": *, \"tags\": *, \"bom\": *, \"plane\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 963,
    "kind": "function",
    "name": "flattenAssembly",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~flattenAssembly",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1375,
    "undocument": true,
    "params": [
      {
        "name": "assembly",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 964,
    "kind": "function",
    "name": "chainFuse",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~chainFuse",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1394,
    "undocument": true,
    "params": [
      {
        "name": "chain",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 965,
    "kind": "function",
    "name": "digFuse",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~digFuse",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1406,
    "undocument": true,
    "params": [
      {
        "name": "assembly",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 966,
    "kind": "variable",
    "name": "colorOptions",
    "memberof": "src/worker.js",
    "static": true,
    "longname": "src/worker.js~colorOptions",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1426,
    "undocument": true,
    "type": {
      "types": [
        "{\"Red\": string, \"Orange\": string, \"Yellow\": string, \"Olive\": string, \"Teal\": string, \"Light Blue\": string, \"Green\": string, \"Lavender \": string, \"Brown\": string, \"Pink\": string, \"Sand\": string, \"Clay\": string, \"Blue\": string, \"Light Green\": string, \"Purple\": string, \"Light Purple\": string, \"Tan\": string, \"Mauve \": string, \"Grey\": string, \"Black\": string, \"White\": string, \"Keep Out\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 967,
    "kind": "function",
    "name": "generateDefaultMesh",
    "memberof": "src/worker.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/worker.js~generateDefaultMesh",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1450,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 968,
    "kind": "function",
    "name": "resetView",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~resetView",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1455,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 969,
    "kind": "function",
    "name": "getLargestBoundingBox",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~getLargestBoundingBox",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1461,
    "undocument": true,
    "params": [
      {
        "name": "meshArray",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"width\": *, \"height\": *, \"depth\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 970,
    "kind": "function",
    "name": "calculateZoom",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~calculateZoom",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1515,
    "undocument": true,
    "params": [
      {
        "name": "boundingBox",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 971,
    "kind": "function",
    "name": "generateCameraPosition",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~generateCameraPosition",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1547,
    "undocument": true,
    "params": [
      {
        "name": "meshArray",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 972,
    "kind": "function",
    "name": "generateDisplayMesh",
    "memberof": "src/worker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/worker.js~generateDisplayMesh",
    "access": "public",
    "export": false,
    "importPath": "replicad-app-example/src/worker.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1559,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "kind": "index",
    "content": "\n\n# A web based CAD program for cooperative design.\n\nAbundance breaks with the tradition of CAD programs which inherit from drawing programs and instead inherits from logical languages like programming. This allows it to be a CAD program which can have language like features such as importing modules, version control, and collaboration.\n\n## Login with Github\n\nAfter the initial screen prompts you to login with Github, all the projects you create on Abundance will be stored as Github Repositories but you can always search for them and find them through the Abundance Platform.\n\n<img width=\"754\" alt=\"login-screen\" src=\"https://github.com/user-attachments/assets/9393527d-3e11-483f-ac79-96a4b14de2f9\">\n\n\n# Projects Screen\n\nChoose whether you want to create a new project, go into one of your existing projects or take a look at a project that someone else created. If you own the selected project you will be redirected to Create Mode. If the project belongs to someone else you will be redirected to Run Mode where you can choose to fork the project to modify it or simply download it. \n\n<img width=\"1395\" alt=\"project-screen\" src=\"https://github.com/user-attachments/assets/ce041419-ea68-43e2-92d5-90f0e41a9841\">\n\n\n# Create Mode\n\n\n## Flow\n\nA 3D model within Maslow Create is composed of interconnected nodes called Atoms and Molecules which are linked together through connectors. An atom is a shape or an operation you can perform on a shape (ie circle or translate). A molecule can contain any number of atoms in a configuration (ie generate a table leg). Think of Atoms as the built-in functions of a programming language and molecules as the functions you create. Each atom has attachment points to which connectors can attach. \n\n## Layout of the program\n\nCreate Mode has two main areas to interface with. Along the top of the screen is the logical flow of the design. In the lower portion you can see the rendering area where a 3D view of your model will appear. In the lower left is a cluster of menus that lets you do things like change the parameters and dimensions of the selected shape. \n\n<img width=\"1436\" alt=\"flow-screen\" src=\"https://github.com/user-attachments/assets/0e746a20-cced-412e-b404-197a2a9640ad\">\n\n## Atom Menu\n\nTo see and place the available atoms on your flow screen start by right-clicking anywhere within the flow screen area to spawn the circular atom menu. Move your cursor around to spawn the sub-menus and click on the atom you want to place.\n\n<img width=\"888\" alt=\"top_menu\" src=\"https://github.com/user-attachments/assets/fb28f196-4f31-4f26-abd2-3c1cc59d7280\">\n\nThe atoms available in the circular menu are divided into 6 categories: \n\n### Shapes: \n        - Regular Polygon\n        - Circle\n        - Rectangle\n        - Text\n        - Molecule\n        \n### Interactions: \n        - Intersection\n        - Difference\n        - Join \n        - Loft\n        - ShrinkWrap\n### Actions: \n        - Color\n        - Rotate\n        - Extrude\n        - Move\n        - Genetic Algorithm (disabled)\n### Inputs: \n        - Input\n        - Constant\n        - Equation\n        - Code\n### Tags:\n        - ReadMe\n        - Add-Bom-Tag\n        - Tag\n        - Extract Tag\n        - CutLayout \n### Import-Export:\n        - GCode\n        - Import\n        - Export\n        - Github Molecule\n\n\n## Shapes \n\n\n### Regular Polygon\n\nThe regular polygon atom creates a regular polygon shape. Regular polygons are regularly extruded to create a 3D shape.\n\n<img width=\"821\" alt=\"polygon-example\" src=\"https://github.com/user-attachments/assets/3d5b3fb7-34d5-49fc-b2aa-821e5df7cea4\">\n\n\n### Circle\n\nThe circle atom creates a circle sketch on the XY plane. Circle shapes are commonly extruded to create cylinders.\n\n<img width=\"1176\" alt=\"circle-example\" src=\"https://github.com/user-attachments/assets/7bdb9773-9f93-4ddf-ae6f-ef802a59259f\">\n\n\n### Rectangle\n\nThe rectangle atom creates a rectangle sketch on the XY plane. Rectangles are commonly extruded to make a 3D shape.\n\n<img width=\"1252\" alt=\"rectangle-example\" src=\"https://github.com/user-attachments/assets/528c65fc-be71-47ec-be4d-874380d92ed3\">\n\n\n### Text\n\nThe text atom creates a basic sketch on the XY plane with a string of your choosing. Text is commonly extruded to make a 3D shape.\n\n<img width=\"1203\" alt=\"text-example\" src=\"https://github.com/user-attachments/assets/8b63602f-c020-4f79-a7cd-b00fd311839d\">\n\n\n### Molecule\n\nThe molecule atom can contain any number of atoms in a useful configuration. To add inputs to the molecule, place an input atom within it.\n\n<img width=\"428\" alt=\"molecule-example\" src=\"https://github.com/user-attachments/assets/82eea26c-5383-4556-b12e-95a3d2f92fa0\" />\n\n## Interactions\n\n### Intersection\n\nThe intersection atom computes the area of intersection of two shapes and creates a new shape out of that area.\n\n<img width=\"904\" alt=\"intersection-example\" src=\"https://github.com/user-attachments/assets/ce2bd3ff-f34a-452b-a270-bc104f8988a2\" />\n\n\n### Difference\n\nThe difference atom subtracts one shape from another.\n\n<img width=\"931\" alt=\"difference-example\" src=\"https://github.com/user-attachments/assets/a0a61322-8c4b-4bf7-9a73-0b26e053154f\" />\n\n\n### Join \n\n#### Assembly\n\nThe assembly selector allows multiple shapes to be combined into one unit called an assembly. The order in which atoms are combigned matters because where shapes intersect shapes earlier in the order subtract from shapes later in the order. For example if you have a bolt which needs to create a hole in a part you should assemble first the part and then the bolt.\n\n<img width=\"1162\" alt=\"assembly-example\" src=\"https://github.com/user-attachments/assets/49728e17-55dc-4924-a7fb-42a514ab755e\">\n\n\n#### Fusion\n\nThe fusion selector atom allows multiple shapes to be combined into one unit. The shapes are fused, become one and are inseparable from then on.\n\n<img width=\"1126\" alt=\"fusion-example\" src=\"https://github.com/user-attachments/assets/8a91f7ff-55ca-4c03-ad02-dcf20ef04514\">\n\n\n### Shrinkwrap\n\nThe shrinkwrap atom combines multiple sketches into a single shape as if they had been shrinkwrapped. This is useful for creating shapes that would be difficult to create in other ways.\n\n<img width=\"1051\" alt=\"shrinkwrap-example\" src=\"https://github.com/user-attachments/assets/70ea489c-7e4b-4501-a798-14c828af3a68\" />\n\n\n### Loft\n\n<img width=\"940\" alt=\"loft-example\" src=\"https://github.com/user-attachments/assets/8ef7e0dd-38c3-42d9-bd21-db90da61d546\" />\n\n\n## Actions\n\n### Color\n\nThe color atom gives color to a 2D or 3D shape.\n\n<img width=\"890\" alt=\"color-example\" src=\"https://github.com/user-attachments/assets/4ac141c8-b401-4cae-9b9d-84affba28ad1\" />\n\n\n### Move\n\nThe move atom moves a 3D shape in 3D space or a 2D shape in 2D space.\n\n{<img width=\"884\" alt=\"move-example\" src=\"https://github.com/user-attachments/assets/a8c1f8f7-b390-41fc-acd7-4bd7334ca6ba\" />\n\n### Extrude\n\nThe Extrude atom takes a 2D shape and makes it 3D.\n\n<img width=\"886\" alt=\"extrude-example\" src=\"https://github.com/user-attachments/assets/c4f949b8-e87a-4a3c-a314-ea8d70e03180\" />\n\n### Rotate\n\nThe rotate atom rotates a shape along any of its three axis.\n\n<img width=\"836\" alt=\"rotate-example\" src=\"https://github.com/user-attachments/assets/ae6097ad-07a4-4a14-b69b-23fda96b426b\" />\n\n\n## Tags\n\n### README\n\nThe README atom provides notes to the next person reading the project. The text of the readme input is added to the readme page of the project (similar to this page you are reading now).\n\n<img width=\"588\" alt=\"readme-example\" src=\"https://github.com/user-attachments/assets/5ca90c52-4341-4b96-bb9f-36dcc70ea744\" />\n\n\n### Tag\n\nThe tag atom adds a tag to a part which can be later used to retrieve that part from an assembly.\n\n<img width=\"986\" alt=\"tag-example\" src=\"https://github.com/user-attachments/assets/3b8a5270-6e7e-4a9e-9309-2902602a2ee2\" />\n\n\n### Add BOM Tag\n\nThe Add BOM Tag atom tags a part with a bill of materials item. This item will appear in the project bill of materials one time each time the tagged part appears in the final shape. For example if you have a table leg that needs four bolts, and the final model has four table legs the bolt will automatically appear in the final bill of materials 16 times.\n\n<img width=\"908\" alt=\"bom-tag-example\" src=\"https://github.com/user-attachments/assets/094216c3-26bb-4fb2-be46-62d3b4170d49\" />\n<img width=\"1014\" alt=\"bom-molecule-example\" src=\"https://github.com/user-attachments/assets/4cc3a257-262f-4145-8f7d-60ac10dfc9c6\" />\n\n## Inputs\n\n### Input\n\nThe input atom lets you define which variables are inputs to your program. They function similar to constants, however when you share your project, the person on the other end will have the ability to change the values of the inputs. Inputs placed within a molecule will add inputs to that molecule up one level.\n\n<img width=\"377\" alt=\"inputs-example\" src=\"https://github.com/user-attachments/assets/13d6bd15-8a2f-447d-8a2c-08ae5c250fd4\" />\n<img width=\"426\" alt=\"inputs-molecule-example\" src=\"https://github.com/user-attachments/assets/af7c01bd-1719-42bb-b166-4f6e3bb59fb6\" />\n\n\n### Code\n\nThe code atom allows you to enter arbitrary replicad code. For all available methods see replicad.xyz\n\n<img width=\"1008\" alt=\"code-example-1\" src=\"https://github.com/user-attachments/assets/0617fda4-9adf-4a73-abba-7cd6cbb764f3\" />\n<img width=\"1001\" alt=\"code-example-2\" src=\"https://github.com/user-attachments/assets/8bf72007-5dfa-4529-8848-eac2cc022c65\" />\n\n\n### Constant\n\nThe constant atom defines a constant number that can be used to control multiple inputs.\n\n<img width=\"818\" alt=\"constant-example\" src=\"https://github.com/user-attachments/assets/2fa19ffb-198b-4046-96c1-cb850735b815\" />\n\n\n### Equation\n\nThe equation Atom lets you perform basic math operations on numbers produced by constants.\n\n<img width=\"872\" alt=\"equation-example\" src=\"https://github.com/user-attachments/assets/82a8915c-4085-42c9-915d-1f1b217bb34b\" />\n\n\n## Import/Export\n\n### Gcode\n\n### Import\n\nThe Import atom allows you to upload a STL, SVG, or STEP file. Complex models might take a long time to compute. \n\n<img width=\"986\" alt=\"import-example\" src=\"https://github.com/user-attachments/assets/76bef001-d2a9-4e79-83c4-3f83bec8e2f4\" />\n\n### Export\n\nThe export atom tags a part for export. An Export atom lets you download the selected part in a file format of your choosing and makes that part available for download in Run Mode\n\n<img width=\"997\" alt=\"export-example\" src=\"https://github.com/user-attachments/assets/2107d6cd-2812-4131-9f37-df52173e0716\" />\n\n### GitHub Molecule\n\nThe GitHub atom type is not directly available. By clicking on the GitHub tab when placing a new Atom you can search for and add any other Abundance project to your project as a molecule.\n\n<img width=\"1298\" alt=\"github-example\" src=\"https://github.com/user-attachments/assets/bb63bb29-4a9c-4b79-85bb-f2b32c00fa2d\" />\n\n## Output\n\nThe output atom cannot be directly placed however, each molecule has one output that can't be deleted. Connect a shape to the output of a molecule to make that shape available one level up. The output of the top-level molecule is the output of the project.\n\n<img width=\"241\" alt=\"output-example\" src=\"https://github.com/user-attachments/assets/946feb6f-9ebe-4c47-958f-8a5407afe9ba\" />\n\n\n\n# Run Mode\n\nIf you are not the owner of a project or are not logged in, you can still see a project in Run Mode. \n\n<img width=\"1436\" alt=\"run-mode\" src=\"https://github.com/user-attachments/assets/c3bed30e-f253-4245-a62c-67067a5319ee\">\n\n\n# Development\n\nYou can read the complete documentation at ----(Documentation pending)\n\n## How To Setup\n\n1.  Clone the repo:\n\n        git clone https://github.com/BarbourSmith/Abundance.git\n\n2.  Install dependencies:\n\n        npm install\n\n3.  Run webpack:\n\n        npm start\n\nYour canvas piece should open up automatically at http://localhost:4444 \n\n\n",
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"homepage\": \"https://alzatin.github.io\",\n  \"name\": \"replicad-app-example\",\n  \"version\": \"0.14.6\",\n  \"description\": \"A simple React app based on replicad.\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"vite\",\n    \"predeploy\": \"npm run build\",\n    \"deploy\": \"gh-pages -d dist\",\n    \"build\": \"vite build && cp ./dist/index.html ./dist/404.html\",\n    \"serve\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"-\": \"^0.0.1\",\n    \"@auth0/auth0-react\": \"^1.12.1\",\n    \"@octokit/core\": \"^6.1.2\",\n    \"@octokit/plugin-paginate-rest\": \"^11.3.5\",\n    \"@octokit/rest\": \"^21.0.2\",\n    \"@react-three/drei\": \"^9.115.0\",\n    \"@react-three/fiber\": \"^8.15.16\",\n    \"@uiw/react-codemirror\": \"^4.22.0\",\n    \"any-nest\": \"^1.0.3\",\n    \"circular-menu\": \"^1.0.6\",\n    \"codemirror\": \"^6.0.1\",\n    \"comlink\": \"^4.4.1\",\n    \"file-saver\": \"^2.0.5\",\n    \"leva\": \"^0.9.35\",\n    \"mathjs\": \"^12.3.1\",\n    \"oauthio-web\": \"^0.6.2\",\n    \"react\": \"18.2.0\",\n    \"react-dom\": \"18.2.0\",\n    \"react-router-dom\": \"^6.22.3\",\n    \"react-select\": \"^5.8.0\",\n    \"react-three-fiber\": \"^6.0.13\",\n    \"replicad\": \"^0.16.1\",\n    \"replicad-decorate\": \"^0.1.0\",\n    \"replicad-opencascadejs\": \"^0.15.2\",\n    \"replicad-shrink-wrap\": \"^0.1.0\",\n    \"replicad-threejs-helper\": \"^0.15.2\",\n    \"save-dev\": \"^0.0.1-security\",\n    \"showdown\": \"^2.1.0\",\n    \"three\": \"^0.161.0\",\n    \"uuid\": \"^9.0.1\",\n    \"webfontloader\": \"^1.6.28\"\n  },\n  \"devDependencies\": {\n    \"@vitejs/plugin-react\": \"4.2.1\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"gh-pages\": \"^6.2.0\",\n    \"vite\": \"^5.1.6\",\n    \"vite-plugin-pages\": \"^0.32.3\"\n  },\n  \"browserslist\": [\n    \">0.2%\",\n    \"not dead\"\n  ]\n}\n",
    "longname": "/Users/marianunez/Documents/GitHub/Abundance/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]
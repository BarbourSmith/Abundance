import { EPS } from "@thi.ng/math/api";
const atan2 = Math.atan2;
const grahamScan2 = (pts, eps = EPS) => {
  const num = pts.length;
  if (num <= 3) return pts.slice();
  let h = 1;
  let i;
  let p;
  let q;
  let r;
  let rx;
  let ry;
  const min = findMin(pts);
  [rx, ry] = pts[min];
  const sorted = [];
  for (i = 0; i < num; i++) {
    p = pts[i];
    sorted[i] = { p, t: atan2(p[1] - ry, p[0] - rx) };
  }
  sorted.sort((a, b) => a.t !== b.t ? a.t - b.t : a.p[0] - b.p[0]);
  const hull = [sorted[0].p];
  for (i = 1; i < num; i++) {
    p = hull[h - 2];
    q = hull[h - 1];
    r = sorted[i].p;
    rx = r[0];
    ry = r[1];
    while (h > 1 && notCCW(p[0], p[1], q[0], q[1], rx, ry, eps) || h === 1 && q[0] === rx && q[1] === ry) {
      h--;
      q = p;
      p = hull[h - 2];
    }
    hull[h++] = r;
  }
  hull.length = h;
  return hull;
};
const notCCW = (ax, ay, bx, by, cx, cy, eps) => (by - ay) * (cx - ax) >= (bx - ax) * (cy - ay) - eps;
const findMin = (pts) => {
  let n = pts.length - 1;
  let minID = n;
  let [minX, minY] = pts[n];
  let p, y;
  for (; n-- > 0; ) {
    p = pts[n];
    y = p[1];
    if (y < minY || y === minY && p[0] < minX) {
      minX = p[0];
      minY = y;
      minID = n;
    }
  }
  return minID;
};
export {
  grahamScan2
};

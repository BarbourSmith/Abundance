{"version":3,"file":"replicad-threejs-helper.js","sources":["../../lib/replicad-threejs-helper.ts"],"sourcesContent":["import { BufferGeometry, Float32BufferAttribute, EdgesGeometry } from \"three\";\n\nexport interface ReplicadMeshedFaces {\n  vertices: number[];\n  triangles: number[];\n  normals?: number[];\n  faceGroups?: { start: number; count: number; faceId: number }[];\n}\n\nexport interface ReplicadMeshedEdges {\n  lines: number[];\n  edgeGroups?: { start: number; count: number; edgeId: number }[];\n}\n\nexport interface ReplicadMesh {\n  name?: string;\n  faces: ReplicadMeshedFaces;\n  edges?: ReplicadMeshedEdges;\n}\n\nexport interface ThreeGeometry {\n  faces: BufferGeometry;\n  lines: BufferGeometry;\n}\n\n/**\n * Create or update a set of threejs geometries from some meshed edges and\n * faces from replicad\n */\nexport function syncGeometries(\n  replicadMeshes: ReplicadMesh[],\n  inputGeometries: ThreeGeometry[] = []\n): ThreeGeometry[] {\n  let geometries = inputGeometries;\n  if (inputGeometries.length !== replicadMeshes.length) {\n    inputGeometries.forEach(({ lines, faces }) => {\n      faces.dispose();\n      lines.dispose();\n    });\n    geometries = replicadMeshes.map(({ name }) => ({\n      name,\n      faces: new BufferGeometry(),\n      lines: new BufferGeometry(),\n    }));\n  }\n\n  geometries.forEach(({ faces, lines }, i) => {\n    syncFaces(faces, replicadMeshes[i].faces);\n    const edges = replicadMeshes[i].edges;\n    edges !== undefined\n      ? syncLines(lines, edges)\n      : syncLinesFromFaces(lines, faces);\n  });\n\n  return geometries;\n}\n\n/**\n * Update a threejs BufferGeometry from some meshed faces from replicad.\n */\nexport function syncFaces(\n  faces: BufferGeometry,\n  replicadMesh: ReplicadMeshedFaces,\n  highlight?: number[]\n): void {\n  faces.clearGroups();\n  delete faces.userData.faceGroups;\n  faces.setIndex(replicadMesh.triangles);\n  faces.setAttribute(\n    \"position\",\n    new Float32BufferAttribute(replicadMesh.vertices, 3)\n  );\n\n  // If you want to change the way colors are applied to different faces you\n  // can change the following code. The group id will correspond to the index\n  // of the materials you link to the mesh of this geometry\n  //\n  // This only works with two materials, the standard one, and the highlight\n  // one.\n  if (replicadMesh.faceGroups) {\n    let shouldHighlight = new Set();\n    if (highlight) {\n      shouldHighlight = new Set(highlight);\n    }\n    faces.userData.faceGroups = replicadMesh.faceGroups;\n    replicadMesh.faceGroups.forEach(({ start, count, faceId }) => {\n      faces.addGroup(start, count, shouldHighlight.has(faceId) ? 1 : 0);\n    });\n  } else {\n    faces.addGroup(0, replicadMesh.triangles.length, 0);\n  }\n\n  if (replicadMesh.normals && replicadMesh.normals.length) {\n    faces.setAttribute(\n      \"normal\",\n      new Float32BufferAttribute(replicadMesh.normals, 3)\n    );\n  } else {\n    faces.computeVertexNormals();\n  }\n\n  faces.computeBoundingBox();\n}\n\n/**\n * Update a threejs BufferGeometry from meshed edges from replicad.\n */\nexport function syncLines(\n  lines: BufferGeometry,\n  edges: ReplicadMeshedEdges,\n  highlight?: number[]\n): void {\n  lines.clearGroups();\n  delete lines.userData.edgeGroups;\n\n  lines.setAttribute(\"position\", new Float32BufferAttribute(edges.lines, 3));\n\n  if (!edges) return;\n  if (edges.edgeGroups) {\n    let shouldHighlight = new Set();\n    if (highlight) {\n      shouldHighlight = new Set(highlight);\n    }\n    lines.userData.edgeGroups = edges.edgeGroups;\n    edges.edgeGroups.forEach(({ start, count, edgeId }) => {\n      lines.addGroup(start, count, shouldHighlight.has(edgeId) ? 1 : 0);\n    });\n  } else {\n    lines.addGroup(0, edges.lines.length / 3, 0);\n  }\n}\n\n/**\n * Update a threejs BufferGeometry from the faces buffer geometry\n * Uses threejs EdgesGeometry to guess the relevant edges\n */\nexport function syncLinesFromFaces(\n  lines: BufferGeometry,\n  faces: BufferGeometry\n) {\n  lines.clearGroups();\n  delete lines.userData.edgeGroups;\n\n  lines.copy(new EdgesGeometry(faces, 2));\n}\n\n// Finds the group a specific element is part of\n// This makes the link between the triangles / lines that respectively build\n// faces / edges\nconst groupFinder =\n  (faceIndex: number) =>\n  ({ start, count }: { start: number; count: number }) => {\n    return faceIndex >= start && faceIndex < start + count;\n  };\n\n/**\n * Changes the material used to represent a certain face or edge by the index\n * of its group\n */\nexport function toggleHighlight(\n  groupIndex: number,\n  geometry: BufferGeometry\n): void {\n  const group = geometry.groups.find(groupFinder(groupIndex));\n  if (group) {\n    group.materialIndex = group.materialIndex ? 0 : 1;\n    // @ts-expect-error types not up to date\n    geometry.groupsNeedUpdate = true;\n  }\n}\n\n/**\n * Set all the materials used to the default one.\n */\nexport function clearHighlights(geometry: BufferGeometry): void {\n  geometry.groups.forEach((g) => {\n    if (g.materialIndex !== 0) {\n      // @ts-expect-error types not up to date\n      geometry.groupsNeedUpdate = true;\n      g.materialIndex = 0;\n    }\n  });\n}\n\n/**\n * Make sure that the elements highlighted in the geometry are only the ones in\n * the elements param.\n */\nexport function highlightInGeometry(\n  elements: number[],\n  geometry: ThreeGeometry\n): void {\n  const groupIndices = new Set(elements);\n\n  // @ts-expect-error types not up to date\n  geometry.groups.forEach(\n    (group: { materialIndex: number }, groupIndex: number) => {\n      const shouldHighlight = groupIndices.has(groupIndex);\n      const isHighlighted = group.materialIndex === 1;\n      if (shouldHighlight === isHighlighted) return;\n\n      group.materialIndex = shouldHighlight ? 1 : 0;\n\n      // @ts-expect-error types not up to date\n      geometry.groupsNeedUpdate = true;\n    }\n  );\n}\n\nexport function getFaceId(\n  triangleIndex: number,\n  geometry: BufferGeometry\n): number {\n  const { faceId } =\n    geometry.userData.faceGroups.find(groupFinder(triangleIndex * 3)) || {};\n  return faceId;\n}\n\nexport function getEdgeId(lineIndex: number, geometry: BufferGeometry): number {\n  const { edgeId } =\n    geometry.userData.edgeGroups.find(groupFinder(lineIndex)) || {};\n  return edgeId;\n}\n\nexport function getFaceIndex(\n  triangleIndex: number,\n  geometry: BufferGeometry\n): number {\n  return geometry.groups.findIndex(groupFinder(triangleIndex * 3));\n}\n\nexport function getEdgeIndex(\n  lineIndex: number,\n  geometry: BufferGeometry\n): number {\n  return geometry.groups.findIndex(groupFinder(lineIndex));\n}\n"],"names":["BufferGeometry","Float32BufferAttribute","EdgesGeometry"],"mappings":"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"}
import React, { useEffect, useState, useRef } from "react";
import { licenses } from "./js/licenseOptions.js";
import GlobalVariables from "./js/globalvariables.js";
import Molecule from "./molecules/molecule.js";
import { useNavigate } from "react-router-dom";
import CreatableSelect from "react-select/creatable";
//Replaces the loaded projects if the user clicks on new project button
const NewProjectPopUp = (props) => {
  /**
   * The name of the current user.
   * @type {string}
   */
  var currentUser = null;
  /**
   * The name of the current repo.
   * @type {string}
   */
  var currentRepoName = null;
  /**
   * The text to display at the top of the bill of materials.
   * @type {string}
   */
  var bomHeader =
    "###### Note: Do not edit this file directly, it is automatically generated from the CAD model \n# Bill Of Materials \n |Part|Number Needed|Price|Source| \n |----|----------|-----|-----|";
  /**
   * The text to display at the top of the ReadMe file.
   * @type {string}
   */
  var readmeHeader =
    "###### Note: Do not edit this file directly, it is automatically generated from the CAD model";

  /**
   * The authorized user octokit object.
   * @type {object}
   */
  const authorizedUserOcto = props.authorizedUserOcto;
  const setExportPopUp = props.setExportPopUp;
  const exporting = props.exporting;

  const keys_ar = [];
  Object.keys(licenses).forEach((key) => {
    keys_ar.push(key);
  });

  const navigate = useNavigate();
  const projectRef = useRef();
  const projectTagsRef = useRef();
  const projectDescriptionRef = useRef();
  const [pending, setPending] = useState(false); // useFormStatus(); in the future

  //Progress bar for creating a new project
  const [newProjectBar, setNewProjectBar] = useState(0);

  /**
   * Create a new project or exports current molecule to github and navigate to new project create page
   * * @param {string} name - Project Name
   * @param {array} tags - Array of tags
   * @param {string} description - Project Description
   * @param {object} molecule - If there's an existing molecule to export
   * @param {boolean} exporting - If exporting a molecule
   *
   */
  const createProject = async (
    [name, tags, description],
    molecule,
    exporting
  ) => {
    console.log(tags);
    // If there is a molecule and we are exporting replace current top molecule
    if (molecule !== undefined && exporting) {
      GlobalVariables.topLevelMolecule = molecule;
      molecule.topLevel = true; //force the molecule to export in the long form as if it were the top level molecule
    } else {
      //Load a blank project
      GlobalVariables.topLevelMolecule = new Molecule({
        x: 0,
        y: 0,
        topLevel: true,
        name: name,
        atomType: "Molecule",
        uniqueID: GlobalVariables.generateUniqueID(),
      });
    }
    GlobalVariables.currentMolecule = GlobalVariables.topLevelMolecule;

    await authorizedUserOcto
      .request("POST /user/repos", {
        name: name,
        description: description,
        headers: {
          "X-GitHub-Api-Version": "2022-11-28",
        },
      })
      .catch((err) => {
        window.alert(
          "Error creating project. That name might be taken already. Please try again with a different name."
        );
        setPending(false);
      })
      .then((result) => {
        setNewProjectBar(10);
        //Once we have created the new repo we need to create a file within it to store the project in
        currentRepoName = result.data.name;
        currentUser = GlobalVariables.currentUser;
        GlobalVariables.currentRepo = result.data;

        var jsonRepOfProject = GlobalVariables.topLevelMolecule.serialize();
        jsonRepOfProject.filetypeVersion = 1;
        const projectContent = window.btoa(
          JSON.stringify(jsonRepOfProject, null, 4)
        );

        authorizedUserOcto.rest.repos
          .createOrUpdateFileContents({
            owner: currentUser,
            repo: currentRepoName,
            path: "project.maslowcreate",
            message: "Initialize repo",
            content: projectContent,
          })
          .then((result) => {
            setNewProjectBar(20);
            //Then create the BOM file
            var content = window.btoa(bomHeader); // create a file with just the header in it and base64 encode it
            authorizedUserOcto.rest.repos
              .createOrUpdateFileContents({
                owner: currentUser,
                repo: currentRepoName,
                path: "BillOfMaterials.md",
                message: "initialize BOM",
                content: content,
              })
              .then(() => {
                setNewProjectBar(30);
                //Then create the README file
                content = window.btoa(readmeHeader); // create a file with just the word "init" in it and base64 encode it
                authorizedUserOcto.rest.repos
                  .createOrUpdateFileContents({
                    owner: currentUser,
                    repo: currentRepoName,
                    path: "README.md",
                    message: "initialize README",
                    content: content,
                  })
                  .then(() => {
                    setNewProjectBar(40);
                    authorizedUserOcto.rest.repos
                      .createOrUpdateFileContents({
                        owner: currentUser,
                        repo: currentRepoName,
                        path: "project.svg",
                        message: "SVG Picture",
                        content: "",
                      })
                      .then(() => {
                        setNewProjectBar(50);
                        authorizedUserOcto.rest.repos
                          .createOrUpdateFileContents({
                            owner: currentUser,
                            repo: currentRepoName,
                            path: ".gitattributes",
                            message: "Create gitattributes",
                            content: window.btoa("data binary"),
                          })
                          .then(() => {
                            setNewProjectBar(60);
                            authorizedUserOcto.rest.repos
                              .createOrUpdateFileContents({
                                owner: currentUser,
                                repo: currentRepoName,
                                path: "data.json",
                                message: "Data file",
                                content: "",
                              })
                              .then(() => {
                                setNewProjectBar(80);
                                let licenseText = ""; // ?
                                authorizedUserOcto.rest.repos
                                  .createOrUpdateFileContents({
                                    owner: currentUser,
                                    repo: currentRepoName,
                                    path: "LICENSE.txt",
                                    message: "Establish license",
                                    content: window.btoa(licenseText),
                                  })
                                  .then(() => {
                                    setNewProjectBar(90);

                                    authorizedUserOcto.rest.repos
                                      .replaceAllTopics({
                                        owner: currentUser,
                                        repo: currentRepoName,
                                        names: tags,
                                      })
                                      .then(() => {
                                        setExportPopUp(false);
                                        navigate(
                                          `/${GlobalVariables.currentRepo.id}`
                                        );
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  };

  /* Handles form submission for create new/ export project form */
  const handleSubmit = async (e) => {
    e.preventDefault();
    setPending(true);
    const projectName = projectRef.current.value;
    const projectTagArray = projectTagsRef.current.getValue();
    const projectDescription = projectDescriptionRef.current.value;
    const projectTags = [];

    projectTagArray.forEach((topic) => {
      projectTags.push(topic[`value`]);
    });

    console.log(projectTags);

    if (GlobalVariables.currentMolecule) {
      var molecule = GlobalVariables.currentMolecule;
    }

    createProject(
      [projectName, projectTags, projectDescription],
      molecule,
      exporting
    );
  };
  const options = [
    { value: "maslowcreate", label: "maslowcreate" },
    { value: "maslowcreate-project", label: "maslowcreate-project" },
    { value: "maslowcreate-action", label: "maslowcreate-action" },
    { value: "maslowcreate-joinery", label: "maslowcreate-joinery" },
    { value: "maslowcreate-furniture", label: "maslowcreate-furniture" },
  ];
  return (
    <>
      <div className="login-page export-div">
        <div className="form animate fadeInUp one">
          <button
            style={{ width: "3%", display: "block" }}
            onClick={() => {
              setExportPopUp(false);
            }}
            className="closeButton"
          >
            <img></img>
          </button>
          <form
            onSubmit={(e) => {
              handleSubmit(e);
            }}
          >
            <input
              name="Project Name"
              placeholder="Project Name"
              ref={projectRef}
            />
            <CreatableSelect
              defaultValue={[options[0], options[1]]}
              isMulti
              name="Topics"
              options={options}
              className="basic-multi-select"
              classNamePrefix="select"
              ref={projectTagsRef}
            />
            {/*<select id="license-options">
              {keys_ar.map((opt) => {
                return (
                  <option key={opt} value={opt}>
                    {opt}
                  </option>
                );
              })}
            </select>*/}
            <input
              placeholder="Project Description"
              ref={projectDescriptionRef}
            />
            <button disabled={pending} type="submit">
              {pending ? newProjectBar + "%" : "Submit/Export to Github"}
            </button>
          </form>
        </div>
      </div>
    </>
  );
};

export default NewProjectPopUp;

import React, { useEffect, useState, useRef } from "react";
import GlobalVariables from "./js/globalvariables.js";
import { OAuth } from "oauthio-web";
import { Octokit } from "https://esm.sh/octokit@2.0.19";
import Molecule from "./molecules/molecule.js";
import { nullDependencies } from "mathjs";
import { licenses } from "./js/licenseOptions.js";

/*--Credit to https://codepen.io/colorlib/pen/rxddKy */
//var PopUpState = true;

//Login pop up component logic: pop up appears introducing logo and github login button,
// if user gets authenticated in the tryLogin function, then the pop up disappears and the projects appear, if they do notget authenticated, then the pop up stays and the user can browse projects

/**
 * The text to display at the top of the bill of materials.
 * @type {string}
 */
var bomHeader =
  "###### Note: Do not edit this file directly, it is automatically generated from the CAD model \n# Bill Of Materials \n |Part|Number Needed|Price|Source| \n |----|----------|-----|-----|";
/**
 * The text to display at the top of the ReadMe file.
 * @type {string}
 */
var readmeHeader =
  "###### Note: Do not edit this file directly, it is automatically generated from the CAD model";

/**
 * The timer used to trigger saving of the file.
 * @type {object}
 */
var intervalTimer;
/**
 * The octokit instance which allows interaction with GitHub.
 * @type {object}
 */
var octokit = null;
/**
 * The name of the current user.
 * @type {string}
 */
var currentUser = null;
/**
 * The octokit instance which allows authenticated interaction with GitHub.
 * @type {object}
 */
var authorizedUserOcto = null;
/**
 * The name of the current repo.
 * @type {string}
 */
var currentRepoName = null;
/**
 * Creates a new blank project.
 */

// initial pop up construction with github login button
const InitialLog = (props) => {
  /**
   * Try to login using the oauth popup.
   */
  return (
    <div className="login-page">
      <div className="form animate fadeInUp one">
        <div id="gitSide" className="logindiv">
          <img className="logo" src="/imgs/maslow-logo.png" alt="logo" />
          <div id="welcome">
            <img
              src="/imgs/maslowcreate.svg"
              alt="logo"
              style={{ width: "300px", padding: "10px", margin: "0" }}
            />
          </div>
          <p style={{ padding: "0 20px" }}>
            Maslow Create projects are stored through GitHub. You control your
            files.{" "}
          </p>
          <form className="login-form">
            <button
              type="button"
              id="loginButton"
              onClick={props.tryLogin}
              style={{ height: "40px" }}
            >
              Login With GitHub
            </button>
            <p className="message">
              Don't have an account?{" "}
              <a href="https://github.com/join">Create a free account</a>
            </p>
          </form>
        </div>
        <div id="nonGitSide" className="logindiv curiousBrowse">
          <p
            style={{
              justifyContent: "flex-start",
              display: "inline",
            }}
          >
            Check out what others have designed in Maslow Create
          </p>
          <form className="login-form">
            <button
              type="button"
              className="submit-btn browseButton"
              onClick={() => {
                props.setBrowsing(true);
              }}
              id="browseNonGit"
              style={{ padding: "0 30px" }}
            >
              Browse all projects
            </button>
          </form>
        </div>
      </div>
    </div>
  );
};

/* to add: if current user is null show this next part */
const ShowProjects = (props) => {
  const [nodes, setNodes] = useState([]);
  const [projectsLoaded, setStateLoaded] = React.useState(false);
  const [projectPopUp, setNewProjectPopUp] = useState(false);
  const [searchBarValue, setSearchBarValue] = useState("");

  // conditional query for maslow projects
  useEffect(() => {
    var query;
    if (props.user == "" || props.userBrowsing) {
      query = searchBarValue + " topic:maslowcreate";
    } else {
      query =
        searchBarValue + "fork:true user:" + props.user + " topic:maslowcreate";
    }
    octokit = new Octokit();
    octokit
      .request("GET /search/repositories", {
        q: query,
        per_page: 50,
        headers: {
          accept: "application/vnd.github.mercy-preview+json",
        },
      })
      .then((result) => {
        var userRepos = [];
        result.data.items.forEach((repo) => {
          userRepos.push(repo);
        });
        setNodes([...userRepos]);
        setStateLoaded(true);
      });
  }, [props.userBrowsing, searchBarValue]);

  const createProject = async () => {
    const name = document.getElementById("project-name").value;
    const description = document.getElementById("project-description").value;
    const licenseText =
      licenses[document.getElementById("license-options").value];

    //Load a blank project
    GlobalVariables.topLevelMolecule = new Molecule({
      x: 0,
      y: 0,
      topLevel: true,
      name: name,
      atomType: "Molecule",
      uniqueID: GlobalVariables.generateUniqueID(),
    });

    GlobalVariables.currentMolecule = GlobalVariables.topLevelMolecule;
    await authorizedUserOcto
      .request("POST /user/repos", {
        name: name,
        description: description,
        headers: {
          "X-GitHub-Api-Version": "2022-11-28",
        },
      })
      .then((result) => {
        //Once we have created the new repo we need to create a file within it to store the project in
        currentRepoName = result.data.name;
        var jsonRepOfProject = GlobalVariables.topLevelMolecule.serialize();
        jsonRepOfProject.filetypeVersion = 1;
        jsonRepOfProject.circleSegmentSize = GlobalVariables.circleSegmentSize;
        const projectContent = window.btoa(
          JSON.stringify(jsonRepOfProject, null, 4)
        );

        authorizedUserOcto.rest.repos
          .createOrUpdateFileContents({
            owner: currentUser,
            repo: currentRepoName,
            path: "project.maslowcreate",
            message: "initialize repo",
            content: projectContent,
          })
          .then(() => {
            //Then create the BOM file
            var content = window.btoa(bomHeader); // create a file with just the header in it and base64 encode it
            authorizedUserOcto.rest.repos
              .createOrUpdateFileContents({
                owner: currentUser,
                repo: currentRepoName,
                path: "BillOfMaterials.md",
                message: "initialize BOM",
                content: content,
              })
              .then(() => {
                //Then create the README file
                content = window.btoa(readmeHeader); // create a file with just the word "init" in it and base64 encode it
                authorizedUserOcto.rest.repos
                  .createOrUpdateFileContents({
                    owner: currentUser,
                    repo: currentRepoName,
                    path: "README.md",
                    message: "initialize README",
                    content: content,
                  })
                  .then(() => {
                    authorizedUserOcto.rest.repos
                      .createOrUpdateFileContents({
                        owner: currentUser,
                        repo: currentRepoName,
                        path: "project.svg",
                        message: "SVG Picture",
                        content: "",
                      })
                      .then(() => {
                        authorizedUserOcto.rest.repos
                          .createOrUpdateFileContents({
                            owner: currentUser,
                            repo: currentRepoName,
                            path: ".gitattributes",
                            message: "Create gitattributes",
                            content: window.btoa("data binary"),
                          })
                          .then(() => {
                            authorizedUserOcto.rest.repos
                              .createOrUpdateFileContents({
                                owner: currentUser,
                                repo: currentRepoName,
                                path: "data.json",
                                message: "Data file",
                                content: "",
                              })
                              .then(() => {
                                authorizedUserOcto.rest.repos
                                  .createOrUpdateFileContents({
                                    owner: currentUser,
                                    repo: currentRepoName,
                                    path: "LICENSE.txt",
                                    message: "Establish license",
                                    content: window.btoa(licenseText),
                                  })
                                  .then(() => {
                                    loadProject(result.data);
                                    intervalTimer = setInterval(() => {
                                      this.saveProject();
                                    }, 1200000); //Save the project regularly
                                  });
                              });
                          });
                      });
                  });
              });
          });

        //Update the project topics
        authorizedUserOcto.rest.repos.replaceAllTopics({
          owner: currentUser,
          repo: currentRepoName,
          names: ["maslowcreate", "maslowcreate-project"],
          headers: {
            accept: "application/vnd.github.mercy-preview+json",
          },
        });
      });
  };
  //Replaces the loaded projects if the user clicks on new project button
  const NewProjectPopUp = () => {
    const keys_ar = [];
    Object.keys(licenses).forEach((key) => {
      keys_ar.push(key);
    });
    const [projectName, setName] = useState("");
    const [projectTags, setTags] = useState("");
    const [projectDescription, setDescription] = useState("");

    return (
      <>
        <div>
          <div className="form" style={{ color: "whitesmoke" }}>
            <h1 style={{ fontSize: "1em" }}>NEW PROJECT</h1>
            <form className="login-form">
              <div className="form-row">
                <div className="input-data">
                  <input
                    id="project-name"
                    value={projectName}
                    onChange={(e) => setName(e.target.value)}
                    type="text"
                    required
                  ></input>
                  <div className="underline"></div>
                  <label for="">Project Name</label>
                </div>
              </div>
              <div className="form-row">
                <div className="input-data">
                  <input
                    type="text"
                    id="project-tags"
                    value={projectTags}
                    onChange={(e) => setTags(e.target.value)}
                  ></input>
                  <div className="underline"></div>
                  <label for="">Tags</label>
                </div>
              </div>
              <select id="license-options">
                {keys_ar.map((opt) => {
                  return <option value={opt}>{opt}</option>;
                })}
              </select>
              <div className="form-row">
                <div className="input-data textarea">
                  <textarea
                    id="project-description"
                    value={projectDescription}
                    onChange={(e) => setDescription(e.target.value)}
                    rows="8"
                    cols="80"
                  ></textarea>
                  <br />
                  <div className="underline"></div>
                  <label for="">Project Description</label>
                  <br />
                  <div className="submit-btn">
                    <div className="inner"></div>
                    <button onClick={createProject}>Create Project</button>
                  </div>
                </div>
              </div>
            </form>
          </div>
        </div>
      </>
    );
  };
  // Browse display
  const ClassicBrowse = () => {
    return (
      <>
        {props.isloggedIn ? (
          <div className="top_browse_menu">
            <div
              onClick={() => {
                setNewProjectPopUp(true);
              }}
              className="newProjectDiv"
            >
              <span style={{ alignSelf: "center" }}>Start a new project</span>
              <img
                src="/imgs/defaultThumbnail.svg"
                style={{ height: "80%", float: "left" }}
              ></img>
            </div>

            {!props.userBrowsing ? (
              <div
                className="newProjectDiv"
                onClick={() => props.setBrowsing(true)}
              >
                <span style={{ alignSelf: "center" }}>
                  Browse Other Projects
                </span>
                <img
                  src="/imgs/defaultThumbnail.svg"
                  style={{ height: "80%", float: "right" }}
                ></img>
              </div>
            ) : (
              <div
                className="newProjectDiv"
                onClick={() => props.setBrowsing(false)}
              >
                <span style={{ alignSelf: "center" }}>
                  Return to my Projects
                </span>
                <img
                  src="/imgs/defaultThumbnail.svg"
                  style={{ height: "80%", float: "right" }}
                ></img>
              </div>
            )}
          </div>
        ) : null}

        <div className="project-item-div">
          {projectsLoaded ? <AddProject /> : null}
        </div>
      </>
    );
  };
  // Loads project when clicked in browse mode
  const loadProject = function (project) {
    //should non owners get a different load ?  window.open("/run?" + project.id);
    GlobalVariables.currentRepoName = project.name;
    GlobalVariables.currentRepo = project;
    GlobalVariables.gitHub.totalAtomCount = 0;
    GlobalVariables.gitHub.numberOfAtomsToLoad = 0;

    GlobalVariables.startTime = new Date().getTime();

    const currentRepoName = project.name;
    //Load a blank project
    GlobalVariables.topLevelMolecule = new Molecule({
      x: 0,
      y: 0,
      topLevel: true,
      atomType: "Molecule",
    });

    GlobalVariables.currentMolecule = GlobalVariables.topLevelMolecule;

    octokit
      .request("GET /repos/{owner}/{repo}/contents/project.maslowcreate", {
        owner: project.owner.login,
        repo: project.name,
      })
      .then((response) => {
        props.closePopUp();
        //content will be base64 encoded
        console.log();
        let rawFile = JSON.parse(atob(response.data.content));

        if (rawFile.filetypeVersion == 1) {
          GlobalVariables.topLevelMolecule.deserialize(rawFile);
        } else {
          GlobalVariables.topLevelMolecule.deserialize(
            this.convertFromOldFormat(rawFile)
          );
        }
      });
  };

  // adds individual projects after API call
  const AddProject = () => {
    //const thumbnailPath = "https://raw.githubusercontent.com/"+node.full_name+"/master/project.svg?sanitize=true"
    return nodes.map((node) => (
      <div
        className="project"
        key={node.id}
        id={node.name}
        onClick={(e) => loadProject(node, e)}
      >
        <p
          style={{
            fontSize: "1em",
            textOverflow: "ellipsis",
            display: "block",
            overflow: "hidden",
            width: "80%",
          }}
        >
          {node.name}
        </p>
        <img className="project_image" src="/imgs/defaultThumbnail.svg"></img>
        <div style={{ display: "flex" }}>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            style={{ transform: "scale(.7)" }}
            width="16"
            height="16"
          >
            <path d="M8 .2l4.9 15.2L0 6h16L3.1 15.4z" />
          </svg>
          <p>{node.stargazers_count}</p>
        </div>
      </div>
    ));
  };

  const openInNewTab = (url) => {
    window.open(url, "_blank", "noreferrer");
  };

  const handleSearchChange = (e) => {
    setSearchBarValue(e.target.value);
  };

  return (
    <>
      <div className="middleBrowse" style={{ marginTop: "35px" }}>
        <div
          id="welcome"
          style={{ display: "flex", margin: "10px", alignItems: "center" }}
        >
          <img
            src="/imgs/maslow-logo.png"
            alt="logo"
            style={{ width: "25px", height: "25px", borderRadius: "50%" }}
          />
          <img
            src="/imgs/maslowcreate.svg"
            alt="logo"
            style={{ height: "20px", padding: "10px" }}
          />
          {!props.isloggedIn ? (
            <>
              <button
                className="form browseButton githubSign"
                id="loginButton2"
                onClick={props.tryLogin}
                style={{ width: "90px", fontSize: ".7rem", marginLeft: "auto" }}
              >
                Login
              </button>
              <button
                className="form browseButton githubSign"
                onClick={() => openInNewTab("https://github.com/join")}
                style={{ width: "130px", fontSize: ".7rem", marginLeft: "5px" }}
              >
                Create an Account
              </button>
            </>
          ) : null}
        </div>
        <div className="search-bar-div">
          <input
            type="text"
            contentEditable="true"
            value={searchBarValue}
            onChange={handleSearchChange}
            placeholder="Search for project.."
            className="menu_search browseButton"
            id="project_search"
          />
          <img
            src="/imgs/search_icon.svg"
            alt="search"
            style={{
              width: "20px",
              color: "white",
              marginRight: "5px",
              opacity: "0.5",
            }}
          />
        </div>
      </div>
      {projectPopUp ? <NewProjectPopUp /> : <ClassicBrowse />}
    </>
  );
};

function LoginPopUp(props) {
  const closePopUp = function () {
    props.setPopUpOpen(false);
  };

  /* I think this authorization either needs to happen at a higher level or the variable of the authorized github
   token needs to be saved to global so we don't keep making oauth calls if we need authorization for pull requests and such*/
  const tryLogin = function () {
    // Initialize with OAuth.io app public key
    if (window.location.href.includes("private")) {
      OAuth.initialize("6CQQE8MMCBFjdWEjevnTBMCQpsw"); //app public key for repo scope
    } else {
      OAuth.initialize("BYP9iFpD7aTV9SDhnalvhZ4fwD8"); //app public key for public_repo scope
    }

    // Use popup for oauth
    OAuth.popup("github").then((github) => {
      /**
       * Oktokit object to access github
       * @type {object}
       */
      authorizedUserOcto = new Octokit({
        auth: github.access_token,
      });
      //getting current user post authetication
      authorizedUserOcto.request("GET /user", {}).then((response) => {
        currentUser = response.data.login;
        GlobalVariables.currentUser = currentUser;
        if (currentUser) {
          props.setIsLoggedIn(true);
        }
      });
    });
  };
  const [closed, setTop] = useState(false);
  const [userBrowsing, setBrowsing] = useState(false);
  var isloggedIn = props.isloggedIn;

  let popUpContent;
  if (!closed) {
    if (GlobalVariables.currentUser !== undefined && !userBrowsing) {
      popUpContent = (
        <ShowProjects
          user={currentUser}
          closePopUp={closePopUp}
          userBrowsing={userBrowsing}
          setBrowsing={setBrowsing}
          isloggedIn={isloggedIn}
        />
      );
    } else if (userBrowsing) {
      popUpContent = (
        <ShowProjects
          user={""}
          closePopUp={closePopUp}
          userBrowsing={userBrowsing}
          setBrowsing={setBrowsing}
          isloggedIn={isloggedIn}
          tryLogin={tryLogin}
        />
      );
    } else {
      popUpContent = (
        <InitialLog tryLogin={tryLogin} setBrowsing={setBrowsing} />
      );
    }
    return (
      <div
        className="login-popup"
        id="projects-popup"
        style={{
          padding: "0",
          border: "10px solid #3e3d3d",
        }}
      >
        <div>
          {" "}
          <button
            className="closeButton"
            onClick={() => props.setPopUpOpen(false)}
          >
            <img></img>
          </button>{" "}
        </div>
        {popUpContent}
      </div>
    );
  }
}

export default LoginPopUp;
